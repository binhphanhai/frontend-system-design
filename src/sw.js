import { precacheAndRoute, cleanupOutdatedCaches } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  StaleWhileRevalidate,
  CacheFirst,
  NetworkFirst,
} from "workbox-strategies";

// Precache all static assets generated by Docusaurus
precacheAndRoute(self.__WB_MANIFEST);

// Clean up outdated caches
cleanupOutdatedCaches();

// Cache strategy for navigation requests (HTML pages)
registerRoute(
  ({ request }) => request.mode === "navigate",
  new NetworkFirst({
    cacheName: "pages",
    networkTimeoutSeconds: 5,
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?offline-cache`;
        },
      },
    ],
  })
);

// Cache strategy for API calls and dynamic content
registerRoute(
  ({ url }) => url.pathname.startsWith("/api/"),
  new NetworkFirst({
    cacheName: "api-cache",
    networkTimeoutSeconds: 3,
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?offline-cache`;
        },
      },
    ],
  })
);

// Cache strategy for static assets (CSS, JS, images)
registerRoute(
  ({ request }) =>
    request.destination === "style" ||
    request.destination === "script" ||
    request.destination === "image",
  new CacheFirst({
    cacheName: "static-assets",
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?offline-cache`;
        },
      },
    ],
  })
);

// Cache strategy for fonts
registerRoute(
  ({ request }) => request.destination === "font",
  new CacheFirst({
    cacheName: "fonts",
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?offline-cache`;
        },
      },
    ],
  })
);

// Catch-all for other requests using stale-while-revalidate
registerRoute(
  ({ request }) => request.method === "GET",
  new StaleWhileRevalidate({
    cacheName: "general-cache",
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?offline-cache`;
        },
      },
    ],
  })
);

// Listen for skip waiting message
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Custom offline fallback
const OFFLINE_VERSION = 1;
const CACHE_NAME = `offline-${OFFLINE_VERSION}`;

// Install event - cache the offline page
self.addEventListener("install", (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.add("/frontend-system-design/offline");
    })
  );
});

// Fetch event - serve cached content when offline
self.addEventListener("fetch", (event) => {
  if (event.request.mode === "navigate") {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match("/frontend-system-design/offline");
      })
    );
  }
});
