"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3759],{5529:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"project-detail/ant-design","title":"Ant Design: Enterprise-Class UI Library","description":"Table of Contents","source":"@site/docs/project-detail/ant-design.md","sourceDirName":"project-detail","slug":"/project-detail/ant-design","permalink":"/frontend-system-design/docs/project-detail/ant-design","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/ant-design.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"Styled Components: CSS-in-JS Simplified","permalink":"/frontend-system-design/docs/project-detail/styled-component"},"next":{"title":"Redux: Predictable State Management","permalink":"/frontend-system-design/docs/project-detail/redux"}}');var o=t(4848),i=t(8453);const a={},s="Ant Design: Enterprise-Class UI Library",l={},m=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Importing Styles",id:"importing-styles",level:3},{value:"Core Design Principles",id:"core-design-principles",level:2},{value:"Design Language",id:"design-language",level:3},{value:"Component Architecture",id:"component-architecture",level:2},{value:"Component Composition Pattern",id:"component-composition-pattern",level:3},{value:"Component Props Pattern",id:"component-props-pattern",level:3},{value:"Form System Deep Dive",id:"form-system-deep-dive",level:2},{value:"Form Component Architecture",id:"form-component-architecture",level:3},{value:"Advanced Form Validation",id:"advanced-form-validation",level:3},{value:"Under the Hood: How Form.Item Works",id:"under-the-hood-how-formitem-works",level:2},{value:"Form.Item Implementation Concept",id:"formitem-implementation-concept",level:3},{value:"Why Children Receive <code>value</code> and <code>onChange</code>",id:"why-children-receive-value-and-onchange",level:3},{value:"Custom Form Controls",id:"custom-form-controls",level:3},{value:"Advanced Form Patterns",id:"advanced-form-patterns",level:2},{value:"Dynamic Form Fields",id:"dynamic-form-fields",level:3},{value:"Conditional Fields",id:"conditional-fields",level:3},{value:"Theming and Customization",id:"theming-and-customization",level:2},{value:"Theme Configuration",id:"theme-configuration",level:3},{value:"Custom CSS Variables",id:"custom-css-variables",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Form Performance",id:"form-performance",level:3},{value:"Bundle Size Optimization",id:"bundle-size-optimization",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Form Organization",id:"form-organization",level:3},{value:"Component Composition",id:"component-composition",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"ant-design-enterprise-class-ui-library",children:"Ant Design: Enterprise-Class UI Library"})}),"\n",(0,o.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#core-design-principles",children:"Core Design Principles"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#component-architecture",children:"Component Architecture"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#form-system-deep-dive",children:"Form System Deep Dive"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#under-the-hood-how-formitem-works",children:"Under the Hood: How Form.Item Works"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#advanced-form-patterns",children:"Advanced Form Patterns"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#theming-and-customization",children:"Theming and Customization"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["Ant Design is an enterprise-class UI design language and React UI library. As highlighted in the ",(0,o.jsx)(e.a,{href:"https://github.com/ant-design/ant-design",children:"Ant Design GitHub repository"}),", it provides a comprehensive set of high-quality React components out of the box, with powerful theme customization and internationalization support."]}),"\n",(0,o.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Enterprise-class UI"}),": Designed for web applications with professional requirements"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"TypeScript Support"}),": Written in TypeScript with predictable static types"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Design Language"}),": Complete design resources and development tools"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Internationalization"}),": Support for dozens of languages"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Theme Customization"}),": Powerful theming based on CSS-in-JS"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install Ant Design\nnpm install antd\n\n# Or using yarn\nyarn add antd\n\n# Or using pnpm\npnpm add antd\n"})}),"\n",(0,o.jsx)(e.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import React from "react";\nimport { Button, DatePicker, Form, Input, Space } from "antd";\n\nconst App = () => {\n  return (\n    <Space direction="vertical" size="middle" style={{ display: "flex" }}>\n      <Button type="primary">Primary Button</Button>\n      <DatePicker placeholder="Select date" />\n\n      <Form layout="vertical">\n        <Form.Item label="Username" name="username">\n          <Input placeholder="Enter username" />\n        </Form.Item>\n        <Form.Item>\n          <Button type="primary" htmlType="submit">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </Space>\n  );\n};\n\nexport default App;\n'})}),"\n",(0,o.jsx)(e.h3,{id:"importing-styles",children:"Importing Styles"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Import styles (only needed once in your app)\nimport "antd/dist/reset.css";\n\n// Or for less customization\nimport { ConfigProvider } from "antd";\n\nfunction App() {\n  return (\n    <ConfigProvider\n      theme={{\n        token: {\n          colorPrimary: "#00b96b",\n        },\n      }}\n    >\n      {/* Your app components */}\n    </ConfigProvider>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"core-design-principles",children:"Core Design Principles"}),"\n",(0,o.jsx)(e.h3,{id:"design-language",children:"Design Language"}),"\n",(0,o.jsx)(e.p,{children:"Ant Design follows specific design principles:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Consistent spacing system\nconst spacing = {\n  xs: 8,\n  sm: 12,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  xxl: 40,\n};\n\n// Color system\nconst colors = {\n  primary: "#1890ff",\n  success: "#52c41a",\n  warning: "#faad14",\n  error: "#f5222d",\n  text: {\n    primary: "rgba(0, 0, 0, 0.88)",\n    secondary: "rgba(0, 0, 0, 0.65)",\n    disabled: "rgba(0, 0, 0, 0.25)",\n  },\n};\n\n// Typography scale\nconst typography = {\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    md: 16,\n    lg: 20,\n    xl: 24,\n    xxl: 30,\n  },\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"component-architecture",children:"Component Architecture"}),"\n",(0,o.jsx)(e.h3,{id:"component-composition-pattern",children:"Component Composition Pattern"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Ant Design components follow composition patterns\nimport { Button, Space, Typography, Card } from "antd";\n\nconst { Title, Paragraph } = Typography;\n\nconst UserCard = ({ user }) => {\n  return (\n    <Card\n      title={<Title level={4}>{user.name}</Title>}\n      extra={<Button type="link">Edit</Button>}\n      actions={[\n        <Button key="view" type="primary">\n          View Profile\n        </Button>,\n        <Button key="delete" danger>\n          Delete\n        </Button>,\n      ]}\n    >\n      <Paragraph>{user.description}</Paragraph>\n\n      <Space>\n        <Button icon={<UserOutlined />}>Contact</Button>\n        <Button icon={<MessageOutlined />}>Message</Button>\n      </Space>\n    </Card>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"component-props-pattern",children:"Component Props Pattern"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Ant Design components use consistent prop patterns\nconst ComponentExample = () => {\n  return (\n    <>\n      {/* Size variants */}\n      <Button size="small">Small</Button>\n      <Button size="middle">Middle</Button>\n      <Button size="large">Large</Button>\n\n      {/* Type variants */}\n      <Button type="default">Default</Button>\n      <Button type="primary">Primary</Button>\n      <Button type="dashed">Dashed</Button>\n      <Button type="text">Text</Button>\n      <Button type="link">Link</Button>\n\n      {/* State props */}\n      <Button loading>Loading</Button>\n      <Button disabled>Disabled</Button>\n      <Button danger>Danger</Button>\n\n      {/* Shape variants */}\n      <Button shape="default">Default</Button>\n      <Button shape="circle" icon={<SearchOutlined />} />\n      <Button shape="round">Round</Button>\n    </>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"form-system-deep-dive",children:"Form System Deep Dive"}),"\n",(0,o.jsx)(e.h3,{id:"form-component-architecture",children:"Form Component Architecture"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Form, Input, Button, DatePicker, Select, Checkbox } from "antd";\n\nconst UserForm = () => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values) => {\n    console.log("Form submitted:", values);\n  };\n\n  const onFinishFailed = (errorInfo) => {\n    console.log("Form validation failed:", errorInfo);\n  };\n\n  return (\n    <Form\n      form={form}\n      name="userForm"\n      layout="vertical"\n      onFinish={onFinish}\n      onFinishFailed={onFinishFailed}\n      autoComplete="off"\n      initialValues={{\n        gender: "male",\n        notifications: true,\n      }}\n    >\n      {/* Basic text input */}\n      <Form.Item\n        label="Full Name"\n        name="fullName"\n        rules={[\n          { required: true, message: "Please input your full name!" },\n          { min: 2, message: "Name must be at least 2 characters" },\n        ]}\n      >\n        <Input placeholder="Enter your full name" />\n      </Form.Item>\n\n      {/* Email with custom validation */}\n      <Form.Item\n        label="Email"\n        name="email"\n        rules={[\n          { required: true, message: "Please input your email!" },\n          { type: "email", message: "Please enter a valid email!" },\n        ]}\n      >\n        <Input placeholder="Enter your email" />\n      </Form.Item>\n\n      {/* Select dropdown */}\n      <Form.Item\n        label="Gender"\n        name="gender"\n        rules={[{ required: true, message: "Please select your gender!" }]}\n      >\n        <Select placeholder="Select gender">\n          <Select.Option value="male">Male</Select.Option>\n          <Select.Option value="female">Female</Select.Option>\n          <Select.Option value="other">Other</Select.Option>\n        </Select>\n      </Form.Item>\n\n      {/* Date picker */}\n      <Form.Item\n        label="Birth Date"\n        name="birthDate"\n        rules={[{ required: true, message: "Please select your birth date!" }]}\n      >\n        <DatePicker style={{ width: "100%" }} placeholder="Select birth date" />\n      </Form.Item>\n\n      {/* Checkbox */}\n      <Form.Item name="notifications" valuePropName="checked">\n        <Checkbox>Subscribe to email notifications</Checkbox>\n      </Form.Item>\n\n      {/* Submit button */}\n      <Form.Item>\n        <Button type="primary" htmlType="submit" style={{ width: "100%" }}>\n          Create Account\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"advanced-form-validation",children:"Advanced Form Validation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Form, Input, Button, InputNumber } from "antd";\n\nconst AdvancedForm = () => {\n  const [form] = Form.useForm();\n\n  // Custom validation function\n  const validatePassword = (_, value) => {\n    if (!value) {\n      return Promise.reject(new Error("Please input your password!"));\n    }\n    if (value.length < 8) {\n      return Promise.reject(\n        new Error("Password must be at least 8 characters!")\n      );\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\n      return Promise.reject(\n        new Error("Password must contain uppercase, lowercase, and number!")\n      );\n    }\n    return Promise.resolve();\n  };\n\n  // Confirm password validation\n  const validateConfirmPassword = (_, value) => {\n    if (!value) {\n      return Promise.reject(new Error("Please confirm your password!"));\n    }\n    if (value !== form.getFieldValue("password")) {\n      return Promise.reject(new Error("Passwords do not match!"));\n    }\n    return Promise.resolve();\n  };\n\n  // Dynamic validation based on other fields\n  const validateAge = (_, value) => {\n    const isMinor = value < 18;\n    const hasParentConsent = form.getFieldValue("parentConsent");\n\n    if (isMinor && !hasParentConsent) {\n      return Promise.reject(\n        new Error("Parent consent required for users under 18!")\n      );\n    }\n    return Promise.resolve();\n  };\n\n  return (\n    <Form form={form} layout="vertical">\n      <Form.Item\n        label="Password"\n        name="password"\n        rules={[{ validator: validatePassword }]}\n      >\n        <Input.Password placeholder="Enter password" />\n      </Form.Item>\n\n      <Form.Item\n        label="Confirm Password"\n        name="confirmPassword"\n        dependencies={["password"]}\n        rules={[{ validator: validateConfirmPassword }]}\n      >\n        <Input.Password placeholder="Confirm password" />\n      </Form.Item>\n\n      <Form.Item\n        label="Age"\n        name="age"\n        dependencies={["parentConsent"]}\n        rules={[\n          { required: true, message: "Please input your age!" },\n          { validator: validateAge },\n        ]}\n      >\n        <InputNumber min={1} max={120} style={{ width: "100%" }} />\n      </Form.Item>\n\n      <Form.Item\n        name="parentConsent"\n        valuePropName="checked"\n        dependencies={["age"]}\n      >\n        <Checkbox>I have parent/guardian consent (if under 18)</Checkbox>\n      </Form.Item>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"under-the-hood-how-formitem-works",children:"Under the Hood: How Form.Item Works"}),"\n",(0,o.jsx)(e.h3,{id:"formitem-implementation-concept",children:"Form.Item Implementation Concept"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Simplified Form.Item implementation\nimport React, { cloneElement, isValidElement } from "react";\nimport { Field } from "rc-field-form";\n\nconst FormItem = ({ children, name, rules, label, ...props }) => {\n  return (\n    <Field name={name} rules={rules} {...props}>\n      {(control, meta, context) => {\n        const { value, onChange, onBlur } = control;\n        const { errors } = meta;\n\n        // Clone the child element and inject form control props\n        const childNode = isValidElement(children)\n          ? cloneElement(children, {\n              value,\n              onChange,\n              onBlur,\n              id: name,\n              "aria-describedby": errors.length ? `${name}-error` : undefined,\n            })\n          : children;\n\n        return (\n          <div className="ant-form-item">\n            {label && (\n              <label htmlFor={name} className="ant-form-item-label">\n                {label}\n              </label>\n            )}\n\n            <div className="ant-form-item-control">\n              <div className="ant-form-item-control-input">{childNode}</div>\n\n              {errors.length > 0 && (\n                <div\n                  id={`${name}-error`}\n                  className="ant-form-item-explain ant-form-item-explain-error"\n                >\n                  {errors[0]}\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      }}\n    </Field>\n  );\n};\n'})}),"\n",(0,o.jsxs)(e.h3,{id:"why-children-receive-value-and-onchange",children:["Why Children Receive ",(0,o.jsx)(e.code,{children:"value"})," and ",(0,o.jsx)(e.code,{children:"onChange"})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// This is how Form.Item injects props into children\nconst FormItemExample = () => {\n  return (\n    <Form.Item name="username" label="Username">\n      {/* \n        Form.Item automatically injects:\n        - value: current field value from form state\n        - onChange: function to update field value\n        - onBlur: function for validation triggers\n        - id: for accessibility\n      */}\n      <Input placeholder="Enter username" />\n    </Form.Item>\n  );\n};\n\n// The Input component receives these props automatically:\nconst Input = ({ value, onChange, onBlur, placeholder, ...props }) => {\n  return (\n    <input\n      type="text"\n      value={value || ""}\n      onChange={(e) => onChange?.(e.target.value)}\n      onBlur={onBlur}\n      placeholder={placeholder}\n      {...props}\n    />\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"custom-form-controls",children:"Custom Form Controls"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Creating custom components that work with Form.Item\nconst CustomRating = ({ value, onChange }) => {\n  const stars = [1, 2, 3, 4, 5];\n\n  return (\n    <div className="custom-rating">\n      {stars.map((star) => (\n        <span\n          key={star}\n          className={`star ${value >= star ? "filled" : ""}`}\n          onClick={() => onChange?.(star)}\n          style={{\n            cursor: "pointer",\n            color: value >= star ? "#faad14" : "#d9d9d9",\n            fontSize: "20px",\n          }}\n        >\n          \u2605\n        </span>\n      ))}\n    </div>\n  );\n};\n\n// Usage with Form.Item\nconst RatingForm = () => {\n  return (\n    <Form>\n      <Form.Item\n        label="Rate this product"\n        name="rating"\n        rules={[{ required: true, message: "Please provide a rating!" }]}\n      >\n        <CustomRating />\n      </Form.Item>\n    </Form>\n  );\n};\n\n// For components that need different prop names\nconst CustomSlider = ({ value, onChange, min = 0, max = 100 }) => {\n  return (\n    <input\n      type="range"\n      min={min}\n      max={max}\n      value={value || 0}\n      onChange={(e) => onChange?.(Number(e.target.value))}\n      style={{ width: "100%" }}\n    />\n  );\n};\n\n// Using getValueFromEvent for complex transformations\nconst FileUploadForm = () => {\n  return (\n    <Form>\n      <Form.Item\n        label="Upload File"\n        name="file"\n        valuePropName="fileList"\n        getValueFromEvent={(e) => {\n          if (Array.isArray(e)) {\n            return e;\n          }\n          return e?.fileList || [];\n        }}\n      >\n        <Upload>\n          <Button icon={<UploadOutlined />}>Upload</Button>\n        </Upload>\n      </Form.Item>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-form-patterns",children:"Advanced Form Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"dynamic-form-fields",children:"Dynamic Form Fields"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { Form, Input, Button, Space } from "antd";\nimport { MinusCircleOutlined, PlusOutlined } from "@ant-design/icons";\n\nconst DynamicForm = () => {\n  const onFinish = (values) => {\n    console.log("Received values:", values);\n  };\n\n  return (\n    <Form onFinish={onFinish} autoComplete="off">\n      <Form.List name="users">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map(({ key, name, ...restField }) => (\n              <Space\n                key={key}\n                style={{ display: "flex", marginBottom: 8 }}\n                align="baseline"\n              >\n                <Form.Item\n                  {...restField}\n                  name={[name, "firstName"]}\n                  rules={[{ required: true, message: "Missing first name" }]}\n                >\n                  <Input placeholder="First Name" />\n                </Form.Item>\n\n                <Form.Item\n                  {...restField}\n                  name={[name, "lastName"]}\n                  rules={[{ required: true, message: "Missing last name" }]}\n                >\n                  <Input placeholder="Last Name" />\n                </Form.Item>\n\n                <MinusCircleOutlined onClick={() => remove(name)} />\n              </Space>\n            ))}\n\n            <Form.Item>\n              <Button\n                type="dashed"\n                onClick={() => add()}\n                block\n                icon={<PlusOutlined />}\n              >\n                Add User\n              </Button>\n            </Form.Item>\n          </>\n        )}\n      </Form.List>\n\n      <Form.Item>\n        <Button type="primary" htmlType="submit">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"conditional-fields",children:"Conditional Fields"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'const ConditionalForm = () => {\n  const [form] = Form.useForm();\n  const userType = Form.useWatch("userType", form);\n\n  return (\n    <Form form={form} layout="vertical">\n      <Form.Item label="User Type" name="userType" rules={[{ required: true }]}>\n        <Select placeholder="Select user type">\n          <Select.Option value="individual">Individual</Select.Option>\n          <Select.Option value="company">Company</Select.Option>\n        </Select>\n      </Form.Item>\n\n      {userType === "individual" && (\n        <>\n          <Form.Item\n            label="First Name"\n            name="firstName"\n            rules={[{ required: true, message: "Please input first name!" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label="Last Name"\n            name="lastName"\n            rules={[{ required: true, message: "Please input last name!" }]}\n          >\n            <Input />\n          </Form.Item>\n        </>\n      )}\n\n      {userType === "company" && (\n        <>\n          <Form.Item\n            label="Company Name"\n            name="companyName"\n            rules={[{ required: true, message: "Please input company name!" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          <Form.Item\n            label="Tax ID"\n            name="taxId"\n            rules={[{ required: true, message: "Please input tax ID!" }]}\n          >\n            <Input />\n          </Form.Item>\n        </>\n      )}\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"theming-and-customization",children:"Theming and Customization"}),"\n",(0,o.jsx)(e.h3,{id:"theme-configuration",children:"Theme Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { ConfigProvider, theme } from "antd";\n\nconst App = () => {\n  return (\n    <ConfigProvider\n      theme={{\n        // Algorithm for theme variants\n        algorithm: theme.darkAlgorithm,\n\n        // Design tokens\n        token: {\n          // Primary color\n          colorPrimary: "#00b96b",\n\n          // Layout\n          borderRadius: 8,\n\n          // Typography\n          fontSize: 16,\n          fontFamily: "Inter, -apple-system, sans-serif",\n\n          // Spacing\n          sizeStep: 4,\n          sizeUnit: 4,\n\n          // Colors\n          colorSuccess: "#52c41a",\n          colorWarning: "#faad14",\n          colorError: "#f5222d",\n          colorInfo: "#1890ff",\n        },\n\n        // Component-specific tokens\n        components: {\n          Button: {\n            colorPrimary: "#00b96b",\n            algorithm: true,\n          },\n          Input: {\n            colorPrimary: "#eb2f96",\n            algorithm: true,\n          },\n        },\n      }}\n    >\n      <YourApp />\n    </ConfigProvider>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"custom-css-variables",children:"Custom CSS Variables"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-css",children:"/* Custom CSS for advanced theming */\n:root {\n  --ant-primary-color: #1890ff;\n  --ant-success-color: #52c41a;\n  --ant-warning-color: #faad14;\n  --ant-error-color: #f5222d;\n\n  /* Custom spacing scale */\n  --spacing-xs: 4px;\n  --spacing-sm: 8px;\n  --spacing-md: 16px;\n  --spacing-lg: 24px;\n  --spacing-xl: 32px;\n}\n\n/* Custom component styles */\n.custom-form {\n  .ant-form-item-label > label {\n    font-weight: 600;\n    color: var(--ant-primary-color);\n  }\n\n  .ant-input:focus,\n  .ant-input-focused {\n    border-color: var(--ant-primary-color);\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(e.h3,{id:"form-performance",children:"Form Performance"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Optimize form rendering with shouldUpdate\nconst OptimizedForm = () => {\n  return (\n    <Form>\n      {/* Only re-render when specific fields change */}\n      <Form.Item shouldUpdate={(prev, curr) => prev.userType !== curr.userType}>\n        {({ getFieldValue }) => {\n          const userType = getFieldValue("userType");\n          return userType === "premium" ? (\n            <Form.Item name="premiumFeatures">\n              <Select>\n                <Select.Option value="feature1">Feature 1</Select.Option>\n                <Select.Option value="feature2">Feature 2</Select.Option>\n              </Select>\n            </Form.Item>\n          ) : null;\n        }}\n      </Form.Item>\n\n      {/* Use Form.useWatch for better performance */}\n      <WatchedComponent />\n    </Form>\n  );\n};\n\nconst WatchedComponent = () => {\n  // Only re-renders when \'username\' field changes\n  const username = Form.useWatch("username");\n\n  return <div>{username && <p>Hello, {username}!</p>}</div>;\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"bundle-size-optimization",children:"Bundle Size Optimization"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Import only what you need\nimport Button from "antd/es/button";\nimport Input from "antd/es/input";\nimport Form from "antd/es/form";\n\n// Or use babel-plugin-import for automatic tree shaking\n// .babelrc\n{\n  "plugins": [\n    ["import", {\n      "libraryName": "antd",\n      "libraryDirectory": "es",\n      "style": "css"\n    }]\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(e.h3,{id:"form-organization",children:"Form Organization"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 1. Use Form.useForm() hook for form instance\nconst UserForm = () => {\n  const [form] = Form.useForm();\n\n  // 2. Extract validation logic\n  const validateEmail = async (_, value) => {\n    if (!value) throw new Error("Email is required");\n    if (!/\\S+@\\S+\\.\\S+/.test(value)) throw new Error("Invalid email format");\n\n    // API validation\n    const exists = await checkEmailExists(value);\n    if (exists) throw new Error("Email already exists");\n  };\n\n  // 3. Handle form submission properly\n  const handleSubmit = async (values) => {\n    try {\n      await submitUser(values);\n      message.success("User created successfully!");\n      form.resetFields();\n    } catch (error) {\n      message.error("Failed to create user");\n    }\n  };\n\n  return (\n    <Form\n      form={form}\n      onFinish={handleSubmit}\n      layout="vertical"\n      preserve={false} // Reset form when component unmounts\n    >\n      {/* Form fields */}\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"component-composition",children:"Component Composition"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Create reusable form components\nconst UserInfoSection = () => (\n  <>\n    <Form.Item name="firstName" label="First Name" rules={[{ required: true }]}>\n      <Input />\n    </Form.Item>\n    <Form.Item name="lastName" label="Last Name" rules={[{ required: true }]}>\n      <Input />\n    </Form.Item>\n    <Form.Item\n      name="email"\n      label="Email"\n      rules={[{ required: true, type: "email" }]}\n    >\n      <Input />\n    </Form.Item>\n  </>\n);\n\nconst AddressSection = () => (\n  <>\n    <Form.Item\n      name="street"\n      label="Street Address"\n      rules={[{ required: true }]}\n    >\n      <Input />\n    </Form.Item>\n    <Form.Item name="city" label="City" rules={[{ required: true }]}>\n      <Input />\n    </Form.Item>\n    <Form.Item name="zipCode" label="ZIP Code" rules={[{ required: true }]}>\n      <Input />\n    </Form.Item>\n  </>\n);\n\nconst CompleteUserForm = () => (\n  <Form layout="vertical">\n    <Card title="Personal Information">\n      <UserInfoSection />\n    </Card>\n\n    <Card title="Address Information" style={{ marginTop: 16 }}>\n      <AddressSection />\n    </Card>\n\n    <Form.Item style={{ marginTop: 16 }}>\n      <Button type="primary" htmlType="submit" size="large" block>\n        Create Account\n      </Button>\n    </Form.Item>\n  </Form>\n);\n'})}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(e.p,{children:["Ant Design provides a comprehensive, enterprise-ready UI library that significantly accelerates React application development. Its Form system, built on top of ",(0,o.jsx)(e.code,{children:"rc-field-form"}),", offers powerful state management, validation, and field control capabilities."]}),"\n",(0,o.jsx)(e.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Component Architecture"}),": Ant Design follows consistent design patterns and composition principles"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Form System"}),": Form.Item automatically injects ",(0,o.jsx)(e.code,{children:"value"})," and ",(0,o.jsx)(e.code,{children:"onChange"})," props to child components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Validation"}),": Comprehensive validation system with built-in and custom validators"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Theming"}),": Powerful theme customization using design tokens and CSS-in-JS"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance"}),": Optimized rendering with shouldUpdate and Form.useWatch"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Best Practices"}),": Proper form organization and component composition patterns"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["As referenced in the ",(0,o.jsx)(e.a,{href:"https://github.com/ant-design/ant-design",children:"Ant Design GitHub repository"}),", the library continues to evolve with a strong focus on developer experience, performance, and enterprise requirements."]}),"\n",(0,o.jsx)(e.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://ant.design/docs/react/introduce",children:"Ant Design Documentation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://github.com/ant-design/ant-design",children:"Ant Design GitHub Repository"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://ant.design/components/form",children:"Form Component Documentation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://ant.design/docs/react/customize-theme",children:"Theme Customization Guide"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);