"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8586],{8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(i.Provider,{value:n},e.children)}},9220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"react-interview/event-handling","title":"Event Handling in React Interviews","description":"Guide to React\'s synthetic event system, covering best practices for handling, intercepting, and optimizing mouse, input, form, focus, and keyboard events for interview success","source":"@site/docs/react-interview/08-event-handling.md","sourceDirName":"react-interview","slug":"/react-interview/event-handling","permalink":"/frontend-system-design/docs/react-interview/event-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/react-interview/08-event-handling.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{},"sidebar":"reactInterviewSidebar","previous":{"title":"React Hooks for Interviews","permalink":"/frontend-system-design/docs/react-interview/react-hooks"},"next":{"title":"Forms in React Interviews","permalink":"/frontend-system-design/docs/react-interview/forms"}}');var r=t(4848),i=t(8453);const d={},c="Event Handling in React Interviews",l={},o=[{value:"How React Handles Events",id:"how-react-handles-events",level:2},{value:"Event Handlers in React",id:"event-handlers-in-react",level:2},{value:"Mouse Events",id:"mouse-events",level:3},{value:"Input Events",id:"input-events",level:3},{value:"What&#39;s the difference between &#39;change&#39; and &#39;input&#39; events?",id:"whats-the-difference-between-change-and-input-events",level:4},{value:"Form Events",id:"form-events",level:3},{value:"Focus Events",id:"focus-events",level:3},{value:"Keyboard Events",id:"keyboard-events",level:3},{value:"Event Interception",id:"event-interception",level:2},{value:"Stopping Event Propagation",id:"stopping-event-propagation",level:3},{value:"Preventing Default Behavior",id:"preventing-default-behavior",level:3},{value:"Best Practices for Interviews",id:"best-practices-for-interviews",level:2},{value:"What You Need to Know for Interviews",id:"what-you-need-to-know-for-interviews",level:2},{value:"Practice Questions",id:"practice-questions",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"event-handling-in-react-interviews",children:"Event Handling in React Interviews"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Guide to React's synthetic event system, covering best practices for handling, intercepting, and optimizing mouse, input, form, focus, and keyboard events for interview success"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["React uses a ",(0,r.jsx)(n.strong,{children:"synthetic event system"})," to provide a consistent way to handle events across different browsers. Unlike native JavaScript events, React wraps native events into a standardized object called ",(0,r.jsx)(n.code,{children:"SyntheticEvent"}),", which improves performance and ensures cross-browser compatibility."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-react-handles-events",children:"How React Handles Events"}),"\n",(0,r.jsx)(n.p,{children:"React's synthetic event system provides consistency across different browsers and optimizations for performance."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vanilla JS:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"document.getElementById('btn').addEventListener('click', (event) => {\r\n  console.log('Clicked!');\r\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"<button onClick={() => console.log('Clicked!')}>Click Me</button>\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"React uses event delegation: events are attached to the root of the React application (not the document root) instead of individual elements to improve performance."}),"\n",(0,r.jsxs)(n.p,{children:["React wraps native events into a ",(0,r.jsx)(n.code,{children:"SyntheticEvent"})," for efficiency and compatibility. Like event listeners in vanilla JavaScript, React's ",(0,r.jsx)(n.code,{children:"SyntheticEvent"}),"s are passed as the first argument to event handler callbacks. For the most part, they can be treated as raw browser ",(0,r.jsx)(n.code,{children:"Event"})," objects and ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event",children:"Event attributes and methods"})," can also be accessed on the ",(0,r.jsx)(n.code,{children:"SyntheticEvent"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function handleClick(event) {\r\n  console.log(event); // React SyntheticEvent\r\n  console.log(event.nativeEvent); // Native browser event\r\n  console.log(event.target); // <button>...</button>\r\n}\r\n\r\n<button onClick={handleClick}>Click me</button>;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Further reading: ",(0,r.jsx)(n.a,{href:"https://react.dev/learn/responding-to-events",children:"Responding to Events"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"event-handlers-in-react",children:"Event Handlers in React"}),"\n",(0,r.jsx)(n.p,{children:"Event handlers in React are functions that respond to user interactions, such as clicks, key presses, form submissions, or mouse movements."}),"\n",(0,r.jsx)(n.h3,{id:"mouse-events",children:"Mouse Events"}),"\n",(0,r.jsxs)(n.p,{children:["Mouse event handlers fire when users interact with the mouse (clicks, hovers, etc.). Mouse events can be added to most elements but for accessibility purposes, certain handlers like ",(0,r.jsx)(n.code,{children:"onClick"})," should only be added to interactive elements such as ",(0,r.jsx)(n.code,{children:"<button>"}),", ",(0,r.jsx)(n.code,{children:"<a>"}),", ",(0,r.jsx)(n.code,{children:"<input>"}),"; otherwise, screen reader users will not be able to trigger those interactions."]}),"\n",(0,r.jsxs)(n.p,{children:["Mouse event handlers receive the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",children:(0,r.jsx)(n.code,{children:"MouseEvent"})})," argument."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function ClickButton() {\r\n  function handleClick() {\r\n    alert('Button clicked!');\r\n  }\r\n  return <button onClick={handleClick}>Click me</button>;\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should know the following mouse events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onClick"}),": Fires when an element is clicked (mousedown + mouseup). Commonly used in interviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseEnter"}),": Fires when the mouse enters an element. Does not bubble (useful for hover interactions)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseLeave"}),": Fires when the mouse leaves an element. Does not bubble"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseOver"}),": Fires when the mouse enters an element or its children. Does bubble"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseOut"}),": Fires when the mouse leaves an element or its children. Does bubble"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseDown"}),": Fires when the mouse button is pressed down. Rarely used in interviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onMouseUp"}),": Fires when the mouse button is released. Rarely used in interviews"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onDoubleClick"}),": Fires when an element is double-clicked. Rarely used in interviews"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key difference:"})," ",(0,r.jsx)(n.code,{children:"onMouseEnter"}),"/",(0,r.jsx)(n.code,{children:"onMouseLeave"})," do ",(0,r.jsx)(n.strong,{children:"not"})," ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Event_bubbling",children:"bubble up the DOM"}),", while ",(0,r.jsx)(n.code,{children:"onMouseOver"}),"/",(0,r.jsx)(n.code,{children:"onMouseOut"})," do."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Accessibility:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Do not add ",(0,r.jsx)(n.code,{children:"onClick"})," handlers to non-interactive (non-clickable and non-focusable) elements."]}),"\n",(0,r.jsxs)(n.li,{children:["90% of the time, use ",(0,r.jsx)(n.code,{children:"onClick"})," only on ",(0,r.jsx)(n.code,{children:"<button>"}),"s. ",(0,r.jsx)(n.code,{children:'<a href="#" onClick={...}>'})," is an anti-pattern; use ",(0,r.jsx)(n.code,{children:"<button onClick={...}>"})," and style accordingly."]}),"\n",(0,r.jsxs)(n.li,{children:["For hover styles, prefer CSS's ",(0,r.jsx)(n.code,{children:":hover"})," pseudo-class over JS event handlers."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"input-events",children:"Input Events"}),"\n",(0,r.jsxs)(n.p,{children:["Input event handlers are fired when user input changes (typing, pasting, etc.) and can be attached on ",(0,r.jsx)(n.code,{children:"<input>"})," and ",(0,r.jsx)(n.code,{children:"<textarea>"})," elements."]}),"\n",(0,r.jsxs)(n.p,{children:["Input event handlers receive the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/InputEvent",children:(0,r.jsx)(n.code,{children:"InputEvent"})})," as argument."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function Foo() {\r\n  const [value, setValue] = useState('');\r\n  return (\r\n    <input\r\n      onChange={event => setValue(event.target.value)}\r\n      value={value}\r\n      placeholder=\"Type here\"\r\n    />\r\n  );\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should know the following input events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onChange"}),": Fires when the value of an input changes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onInput"}),": Fires when the user inputs data (similar to ",(0,r.jsx)(n.code,{children:"onChange"}),"). Most of the time, use ",(0,r.jsx)(n.code,{children:"onChange"})," instead"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"whats-the-difference-between-change-and-input-events",children:"What's the difference between 'change' and 'input' events?"}),"\n",(0,r.jsxs)(n.p,{children:["For most event handlers in React, the ",(0,r.jsx)(n.code,{children:"onEventName"})," attribute is the same as doing ",(0,r.jsx)(n.code,{children:"element.addEventListener('eventname', ...)"})," in the browser. But not for ",(0,r.jsx)(n.code,{children:"onChange"})," and ",(0,r.jsx)(n.code,{children:"onInput"}),"!"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The browser ",(0,r.jsx)(n.code,{children:"'change'"})," event is fired when the value is committed (e.g. loses focus):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Not fired on every keystroke"}),"\n",(0,r.jsxs)(n.li,{children:["Works for ",(0,r.jsx)(n.code,{children:"<input>"}),", ",(0,r.jsx)(n.code,{children:"<textarea>"}),", ",(0,r.jsx)(n.code,{children:"<select>"}),", etc"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The browser ",(0,r.jsx)(n.code,{children:"'input'"})," event fires on every input change, including typing, pasting, and voice input:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Works in both React and vanilla JS"}),"\n",(0,r.jsxs)(n.li,{children:["Fires immediately on every character input (like React's ",(0,r.jsx)(n.code,{children:"onChange"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Triggers even when using voice input, drag-and-drop, and pasting"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key differences:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsxs)(n.th,{style:{textAlign:"center"},children:[(0,r.jsx)(n.code,{children:"onChange"})," (React)"]}),(0,r.jsx)(n.th,{style:{textAlign:"center"},children:(0,r.jsx)(n.code,{children:"onInput"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Triggers on every keystroke?"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Triggers on copy-paste?"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Triggers on IME (Chinese, Japanese...)?"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c (only on commit)"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Triggers on speech-to-text input?"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c (only on commit)"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Works with ",(0,r.jsx)(n.code,{children:"contenteditable"}),"?"]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Detects programmatic value updates?"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["When in doubt during interviews, use ",(0,r.jsx)(n.code,{children:"onChange"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"form-events",children:"Form Events"}),"\n",(0,r.jsxs)(n.p,{children:["Form event handlers (",(0,r.jsx)(n.code,{children:"onSubmit"})," and ",(0,r.jsx)(n.code,{children:"onReset"}),") only work on ",(0,r.jsx)(n.code,{children:"<form>"})," elements."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onSubmit"})," receives the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent",children:(0,r.jsx)(n.code,{children:"SubmitEvent"})})," argument"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onReset"})," handler receives the generic ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Event",children:(0,r.jsx)(n.code,{children:"Event"})})," argument"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function SimpleForm() {\r\n  const [input, setInput] = useState(\'\');\r\n  function handleSubmit(event) {\r\n    event.preventDefault(); // Prevents page reload\r\n    alert(`Form submitted with: ${input}`);\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type="text"\r\n        value={input}\r\n        onChange={e => setInput(e.target.value)}\r\n        placeholder="Enter something"\r\n      />\r\n      <button type="submit">Submit</button>\r\n    </form>\r\n  );\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You should know the following form events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onSubmit"}),": Fires when a form is submitted. Only fires when triggered by a ",(0,r.jsx)(n.code,{children:'<button type="submit">'})," or ",(0,r.jsx)(n.code,{children:'<input type="submit">'})," within a ",(0,r.jsx)(n.code,{children:"<form>"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onReset"}),": Fires when a form is reset. Only fires when triggered by a ",(0,r.jsx)(n.code,{children:'<button type="reset">'})," or ",(0,r.jsx)(n.code,{children:'<input type="reset">'})," within a ",(0,r.jsx)(n.code,{children:"<form>"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Most of the time, you need to do ",(0,r.jsx)(n.code,{children:"event.preventDefault()"})," within the ",(0,r.jsx)(n.code,{children:"onSubmit"})," handler to prevent a full-page refresh."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"focus-events",children:"Focus Events"}),"\n",(0,r.jsxs)(n.p,{children:["Focus event handlers work with elements that can receive focus such as form elements and interactive elements like ",(0,r.jsx)(n.code,{children:"<input>"}),", ",(0,r.jsx)(n.code,{children:"<textarea>"}),", ",(0,r.jsx)(n.code,{children:"<select>"}),", ",(0,r.jsx)(n.code,{children:"<button>"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Focus event handlers receive the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent",children:(0,r.jsx)(n.code,{children:"FocusEvent"})})," argument."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function FocusBlurExample() {\r\n  const [focused, setFocused] = useState(false);\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Click to focus...\"\r\n        onFocus={() => setFocused(true)}\r\n        onBlur={() => setFocused(false)}\r\n        style={{\r\n          border: focused ? '2px solid blue' : '2px solid gray',\r\n          outline: 'none',\r\n          padding: '5px',\r\n        }}\r\n      />\r\n      <p>{focused ? 'Input is focused' : 'Input is blurred'}</p>\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should know the following focus events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onFocus"}),": Fires when an element gains focus"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onBlur"}),": Fires when an element loses focus"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["While the above example uses ",(0,r.jsx)(n.code,{children:"onFocus"}),"/",(0,r.jsx)(n.code,{children:"onBlur"})," for adding focus styles, it's better to use CSS's ",(0,r.jsx)(n.code,{children:":focus"})," pseudo-class. There is no need to use JavaScript when CSS is able to do the job."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Tabbable elements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Elements with ",(0,r.jsx)(n.code,{children:"tabIndex"})," defined become focusable"]}),"\n",(0,r.jsxs)(n.li,{children:["Non-focusable elements (like ",(0,r.jsx)(n.code,{children:"<div>"}),", ",(0,r.jsx)(n.code,{children:"<span>"}),", ",(0,r.jsx)(n.code,{children:"<p>"}),") need ",(0,r.jsx)(n.code,{children:"tabIndex"})," to receive focus"]}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Element type"}),(0,r.jsxs)(n.th,{style:{textAlign:"center"},children:["Supports ",(0,r.jsx)(n.code,{children:"onFocus"})]}),(0,r.jsxs)(n.th,{style:{textAlign:"center"},children:["Supports ",(0,r.jsx)(n.code,{children:"onBlur"})]}),(0,r.jsx)(n.th,{children:"Notes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Form Inputs (",(0,r.jsx)(n.code,{children:"<input>"}),", ",(0,r.jsx)(n.code,{children:"<textarea>"}),", etc)"]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"Standard usage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Interactive Elements (",(0,r.jsx)(n.code,{children:"<button>"}),", ",(0,r.jsx)(n.code,{children:"<a>"}),", etc)"]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"Automatically focusable"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Elements with ",(0,r.jsx)(n.code,{children:"tabIndex"})," defined"]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u2705 Yes"}),(0,r.jsx)(n.td,{children:"Becomes focusable"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["Non-focusable elements (",(0,r.jsx)(n.code,{children:"<div>"}),", ",(0,r.jsx)(n.code,{children:"<span>"}),")"]}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c No"}),(0,r.jsx)(n.td,{style:{textAlign:"center"},children:"\u274c No"}),(0,r.jsxs)(n.td,{children:["Needs ",(0,r.jsx)(n.code,{children:"tabIndex"})]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Focus handling is an important accessibility topic that goes beyond the scope of this guide."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"keyboard-events",children:"Keyboard Events"}),"\n",(0,r.jsx)(n.p,{children:"Keyboard event handlers are used to detect keyboard interactions inside input fields, buttons, or any focusable elements."}),"\n",(0,r.jsxs)(n.p,{children:["Keyboard event handlers receive the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent",children:(0,r.jsx)(n.code,{children:"KeyboardEvent"})})," argument."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function handleKeyPress(event) {\r\n  if (event.key === 'Enter') {\r\n    alert('Enter key pressed!');\r\n  }\r\n}\r\n\r\n<input type=\"text\" onKeyPress={handleKeyPress} />;\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should know the following keyboard events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onKeyDown"}),": Fires when a key is pressed down. Fires continuously if the key is held"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onKeyUp"}),": Fires when a key is released after being pressed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"onKeyPress"}),": (Deprecated) Similar to ",(0,r.jsx)(n.code,{children:"onKeyDown"}),", but does not detect special keys"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"KeyboardEvent properties:"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Property"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsxs)(n.th,{children:["Example output (",(0,r.jsx)(n.code,{children:"A"})," key)"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.key"})}),(0,r.jsx)(n.td,{children:"The key as a string"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"'a'"})," or ",(0,r.jsx)(n.code,{children:"'A'"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.code"})}),(0,r.jsx)(n.td,{children:"The physical key on the keyboard"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"'KeyA'"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.which"})}),(0,r.jsx)(n.td,{children:"(deprecated) Numeric code"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"65"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.keyCode"})}),(0,r.jsx)(n.td,{children:"(deprecated) Numeric code"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"65"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.shiftKey"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," if ",(0,r.jsx)(n.code,{children:"Shift"})," is held"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," / ",(0,r.jsx)(n.code,{children:"false"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"event.ctrlKey"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," if ",(0,r.jsx)(n.code,{children:"Ctrl"})," is held"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"true"})," / ",(0,r.jsx)(n.code,{children:"false"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#instance_properties",children:"full list of KeyboardEvent properties on MDN"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Best practices for handling keyboard events in React:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"onKeyDown"})," instead of ",(0,r.jsx)(n.code,{children:"onKeyPress"})," (since ",(0,r.jsx)(n.code,{children:"onKeyPress"})," is deprecated)"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"event.key"})," instead of ",(0,r.jsx)(n.code,{children:"event.which"})," or ",(0,r.jsx)(n.code,{children:"event.keyCode"})," (they're deprecated)"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"event.preventDefault()"})," when needed (e.g., prevent ",(0,r.jsx)(n.code,{children:"Enter"})," from submitting a form)"]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"tabIndex"})," for non-focusable elements (e.g., ",(0,r.jsx)(n.code,{children:"<div>"})," needs it to receive keyboard events)"]}),"\n",(0,r.jsx)(n.li,{children:"Handle accessibility properly (keyboard navigation should be consistent)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In most cases, you shouldn't need to use keyboard events during interviews. Detecting text changes within ",(0,r.jsx)(n.code,{children:"<input>"}),"s is better done using ",(0,r.jsx)(n.code,{children:"onChange"}),"/",(0,r.jsx)(n.code,{children:"onInput"})," and detecting Enter key for the purpose of form submission is better done using ",(0,r.jsx)(n.code,{children:"onSubmit"})," on ",(0,r.jsx)(n.code,{children:"<form>"}),"s."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"event-interception",children:"Event Interception"}),"\n",(0,r.jsx)(n.p,{children:"Event interception in React refers to the ability to capture, modify, or stop an event's behavior before it reaches its final target."}),"\n",(0,r.jsx)(n.h3,{id:"stopping-event-propagation",children:"Stopping Event Propagation"}),"\n",(0,r.jsxs)(n.p,{children:["One way to intercept an event in React is by using ",(0,r.jsx)(n.code,{children:"event.stopPropagation()"}),", which prevents the event from bubbling up to parent components. By default, events in React follow the bubbling phase, meaning they propagate from the target element up through its ancestors."]}),"\n",(0,r.jsx)(n.p,{children:"This is useful, for example, when clicking inside a dropdown should not close the entire menu because the click event bubbles up to a parent listener."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"function Dropdown() {\r\n  function handleParentClick() {\r\n    console.log('Parent div clicked!');\r\n  }\r\n  function handleChildClick(event) {\r\n    event.stopPropagation(); // Prevents bubbling to the parent\r\n    console.log('Dropdown item clicked!');\r\n  }\r\n  return (\r\n    <div onClick={handleParentClick} style={{ padding: '20px', border: '2px solid black' }}>\r\n      <div onClick={handleChildClick} style={{ padding: '10px', border: '1px solid blue' }}>\r\n        Click inside dropdown\r\n      </div>\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In interviews, there shouldn't be many instances where you need to nest ",(0,r.jsx)(n.code,{children:"onClick"})," handlers. If you ever do so, consider if you need ",(0,r.jsx)(n.code,{children:"event.stopPropagation()"})," in the inner event handler."]}),"\n",(0,r.jsxs)(n.p,{children:["Further reading: ",(0,r.jsx)(n.a,{href:"https://react.dev/learn/responding-to-events#event-propagation",children:"Event propagation"})]}),"\n",(0,r.jsx)(n.h3,{id:"preventing-default-behavior",children:"Preventing Default Behavior"}),"\n",(0,r.jsxs)(n.p,{children:["Another form of event interception is preventing default browser actions using ",(0,r.jsx)(n.code,{children:"event.preventDefault()"}),". Certain HTML elements, like ",(0,r.jsx)(n.code,{children:"<form>"}),", ",(0,r.jsx)(n.code,{children:"<a>"}),", and ",(0,r.jsx)(n.code,{children:"<input>"}),", have built-in behaviors (e.g., form submission, link navigation). If you want to handle these interactions with custom logic in React, you must prevent their default behavior."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function PreventFormSubmit() {\r\n  function handleSubmit(event) {\r\n    event.preventDefault(); // Prevents full-page reload\r\n    console.log(\'Form submitted without reloading!\');\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type="text" placeholder="Enter something" />\r\n      <button type="submit">Submit</button>\r\n    </form>\r\n  );\r\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Without ",(0,r.jsx)(n.code,{children:"event.preventDefault()"}),', clicking "Submit" would cause the page to refresh, disrupting the React application. By intercepting the event, we can handle the form submission programmatically without affecting the user experience.']}),"\n",(0,r.jsxs)(n.p,{children:["Further reading: ",(0,r.jsx)(n.a,{href:"https://react.dev/learn/responding-to-events#preventing-default-behavior",children:"Preventing default behavior"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"best-practices-for-interviews",children:"Best Practices for Interviews"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If there's a performance issue with excessive re-rendering, avoid inline event handlers and memoize using ",(0,r.jsx)(n.code,{children:"useCallback"})]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"onChange"})," instead of ",(0,r.jsx)(n.code,{children:"onInput"})," for form inputs"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"onMouseEnter"}),"/",(0,r.jsx)(n.code,{children:"onMouseLeave"})," instead of ",(0,r.jsx)(n.code,{children:"onMouseOver"}),"/",(0,r.jsx)(n.code,{children:"onMouseOut"})," to prevent bubbling issues"]}),"\n",(0,r.jsxs)(n.li,{children:["For performance-sensitive events like ",(0,r.jsx)(n.code,{children:"onScroll"}),", debounce or throttle the event handlers"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-you-need-to-know-for-interviews",children:"What You Need to Know for Interviews"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event system:"})," Explain how the event system in React works and how it is different from the browser event system"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Common events:"})," Mouse (",(0,r.jsx)(n.code,{children:"onClick"}),", ",(0,r.jsx)(n.code,{children:"onMouseEnter"}),", ",(0,r.jsx)(n.code,{children:"onMouseLeave"}),"), input (",(0,r.jsx)(n.code,{children:"onChange"}),"), form events (",(0,r.jsx)(n.code,{children:"onSubmit"}),"), and keyboard events (",(0,r.jsx)(n.code,{children:"onKeyDown"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event interception:"})," When and how to use event interception"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"practice-questions",children:"Practice Questions"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Coding:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/temperature-converter/react?framework=react&tab=coding",children:"Temperature Converter"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/dice-roller/react?framework=react&tab=coding",children:"Dice Roller"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/grid-lights/react?framework=react&tab=coding",children:"Grid Lights"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/star-rating/react?framework=react&tab=coding",children:"Star Rating"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/stopwatch/react?framework=react&tab=coding",children:"Stopwatch"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/auth-code-input/react?framework=react&tab=coding",children:"Auth Code Input"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/questions/user-interface/selectable-cells/react?framework=react&tab=coding",children:"Selectable Cells"})}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);