"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3914],{3550:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"project-detail/single-spa","title":"Single-SPA: Microfrontend Framework","description":"Table of Contents","source":"@site/docs/project-detail/single-spa.md","sourceDirName":"project-detail","slug":"/project-detail/single-spa","permalink":"/frontend-system-design/docs/project-detail/single-spa","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/single-spa.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"Recharts: React Data Visualization Library","permalink":"/frontend-system-design/docs/project-detail/recharts"},"next":{"title":"Simple Interpreter: Building a Vietnamese Programming Language","permalink":"/frontend-system-design/docs/project-detail/simple-interpreter"}}');var o=r(4848),a=r(8453);const i={},s="Single-SPA: Microfrontend Framework",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation and Setup",id:"installation-and-setup",level:3},{value:"Basic Root Config Setup",id:"basic-root-config-setup",level:3},{value:"HTML Setup with Import Maps",id:"html-setup-with-import-maps",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Applications vs Parcels",id:"applications-vs-parcels",level:3},{value:"Creating a React Microfrontend",id:"creating-a-react-microfrontend",level:3},{value:"Under the Hood: How Single-SPA Works",id:"under-the-hood-how-single-spa-works",level:2},{value:"Application Registration and Routing",id:"application-registration-and-routing",level:3},{value:"Application Lifecycle",id:"application-lifecycle",level:2},{value:"Lifecycle Functions",id:"lifecycle-functions",level:3},{value:"Inter-App Communication",id:"inter-app-communication",level:2},{value:"1. Custom Events",id:"1-custom-events",level:3},{value:"2. Shared State Management",id:"2-shared-state-management",level:3},{value:"3. Parcel Communication",id:"3-parcel-communication",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Application Structure",id:"1-application-structure",level:3},{value:"2. Error Boundaries and Resilience",id:"2-error-boundaries-and-resilience",level:3},{value:"3. Performance Optimization",id:"3-performance-optimization",level:3},{value:"4. Development vs Production Configuration",id:"4-development-vs-production-configuration",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Module Federation Integration",id:"module-federation-integration",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"single-spa-microfrontend-framework",children:"Single-SPA: Microfrontend Framework"})}),"\n",(0,o.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#under-the-hood-how-single-spa-works",children:"Under the Hood: How Single-SPA Works"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#application-lifecycle",children:"Application Lifecycle"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#inter-app-communication",children:"Inter-App Communication"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["Single-SPA is a JavaScript framework for building microfrontends that allows multiple JavaScript applications to coexist and be written with their own frameworks. As highlighted in the ",(0,o.jsx)(e.a,{href:"https://github.com/single-spa/single-spa",children:"Single-SPA GitHub repository"}),", it enables you to use multiple frameworks on the same page, write new code without rewriting existing apps, and lazy load code for improved performance."]}),"\n",(0,o.jsx)(e.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Framework Agnostic"}),": Mix React, Angular, Vue, or any framework"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Independent Deployment"}),": Deploy microfrontends separately"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Lazy Loading"}),": Load applications on demand"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Legacy Integration"}),": Gradually migrate existing applications"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Team Autonomy"}),": Different teams can work independently"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(e.h3,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,o.jsx)(e.p,{children:"This section demonstrates how to set up Single-SPA from scratch. The CLI provides scaffolding for different types of modules in the microfrontend ecosystem."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Sets up the Single-SPA development environment and creates different types of modules\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Command line instructions\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Generated project structures for root config, applications, and utility modules"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Step 1: Install Single-SPA CLI globally for project scaffolding\r\nnpm install --global create-single-spa\r\n\r\n# Step 2: Create a new root config (orchestrates all microfrontends)\r\nnpx create-single-spa --moduleType root-config\r\n\r\n# Step 3: Create a microfrontend application (individual app that can be mounted/unmounted)\r\nnpx create-single-spa --moduleType app-parcel\r\n\r\n# Step 4: Create a utility module (shared code between microfrontends)\r\nnpx create-single-spa --moduleType util-module\n"})}),"\n",(0,o.jsx)(e.h3,{id:"basic-root-config-setup",children:"Basic Root Config Setup"}),"\n",(0,o.jsx)(e.p,{children:"The root config is the central orchestrator that manages when and how microfrontends are loaded. It defines which applications should be active based on the current URL and handles the lifecycle of mounting and unmounting applications."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Registers multiple microfrontend applications with their loading strategies and activation conditions\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Application configurations with names, loading functions, and activation rules\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": A configured Single-SPA instance that manages application lifecycles based on routing\r\n",(0,o.jsx)(e.strong,{children:"Steps"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Import Single-SPA core functions"}),"\n",(0,o.jsx)(e.li,{children:"Register each microfrontend with its activation condition"}),"\n",(0,o.jsx)(e.li,{children:"Start the Single-SPA router"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// src/root-config.js\r\nimport { registerApplication, start } from "single-spa";\r\n\r\n// Register applications with their routing logic\r\n\r\n// Navbar: Always visible across all routes\r\nregisterApplication({\r\n  name: "navbar", // Unique identifier for this microfrontend\r\n  app: () => import("@org/navbar"), // Lazy loading function that returns the application\r\n  activeWhen: () => true, // Always mounted - navbar should be visible everywhere\r\n});\r\n\r\n// Home application: Only active on the root path\r\nregisterApplication({\r\n  name: "home-app",\r\n  app: () => import("@org/home"), // Dynamic import enables code splitting\r\n  activeWhen: (location) => location.pathname === "/", // Only mount on homepage\r\n});\r\n\r\n// Dashboard application: Active on all dashboard routes\r\nregisterApplication({\r\n  name: "dashboard-app",\r\n  app: () => import("@org/dashboard"),\r\n  activeWhen: (location) => location.pathname.startsWith("/dashboard"), // Mount on /dashboard/*\r\n});\r\n\r\n// Profile application: Simple string-based routing\r\nregisterApplication({\r\n  name: "profile-app",\r\n  app: () => import("@org/profile"),\r\n  activeWhen: "/profile", // Shorthand for exact path match\r\n});\r\n\r\n// Start Single-SPA with configuration options\r\nstart({\r\n  urlRerouteOnly: true, // Only reroute on URL changes, not on popstate events\r\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"html-setup-with-import-maps",children:"HTML Setup with Import Maps"}),"\n",(0,o.jsx)(e.p,{children:"The HTML file serves as the entry point for the microfrontend application. Import maps provide a way to resolve module specifiers without bundlers, enabling native ES modules to work with friendly names instead of full URLs."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Sets up the HTML structure and module resolution for the Single-SPA application\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": HTML template with import maps and module loading\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": A web page that can dynamically load and render microfrontends\r\n",(0,o.jsx)(e.strong,{children:"Steps"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Define import maps for module resolution"}),"\n",(0,o.jsx)(e.li,{children:"Load the root config as an ES module"}),"\n",(0,o.jsx)(e.li,{children:"Provide DOM containers for applications"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset="utf-8" />\r\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\r\n    <title>Microfrontend Application</title>\r\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\r\n\r\n    \x3c!-- Import maps for module resolution - maps friendly names to actual URLs --\x3e\r\n    <script type="importmap">\r\n      {\r\n        "imports": {\r\n          \x3c!-- Core Single-SPA framework from CDN --\x3e\r\n          "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@6.0.0/lib/system/single-spa.min.js",\r\n\r\n          \x3c!-- Shared dependencies - React ecosystem --\x3e\r\n          "react": "https://cdn.jsdelivr.net/npm/react@18.2.0/index.js",\r\n          "react-dom": "https://cdn.jsdelivr.net/npm/react-dom@18.2.0/index.js",\r\n\r\n          \x3c!-- Application modules - these will be loaded dynamically --\x3e\r\n          "@org/root-config": "/root-config.js", \x3c!-- Main orchestrator --\x3e\r\n          "@org/navbar": "/navbar.js", \x3c!-- Navigation component --\x3e\r\n          "@org/home": "/home.js", \x3c!-- Home page application --\x3e\r\n          "@org/dashboard": "/dashboard.js", \x3c!-- Dashboard application --\x3e\r\n          "@org/profile": "/profile.js" \x3c!-- Profile application --\x3e\r\n        }\r\n      }\r\n    <\/script>\r\n\r\n    \x3c!-- Load and execute the root config to start Single-SPA --\x3e\r\n    <script type="module">\r\n      import("@org/root-config"); // This starts the entire microfrontend orchestration\r\n    <\/script>\r\n  </head>\r\n  <body>\r\n    \x3c!-- DOM containers for applications --\x3e\r\n    <div id="single-spa-application:navbar"></div>\r\n    \x3c!-- Navbar will mount here --\x3e\r\n    <div id="main-content"></div>\r\n    \x3c!-- Other apps will mount here --\x3e\r\n  </body>\r\n</html>\n'})}),"\n",(0,o.jsx)(e.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,o.jsx)(e.h3,{id:"applications-vs-parcels",children:"Applications vs Parcels"}),"\n",(0,o.jsx)(e.p,{children:"Single-SPA distinguishes between two types of microfrontends: Applications and Parcels. Applications are route-based and automatically managed by Single-SPA's router, while Parcels are manually controlled components that can be mounted anywhere."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Demonstrates the difference between Applications (route-controlled) and Parcels (manually controlled)\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Lifecycle methods for both application types\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Functional microfrontend components that can be integrated into the Single-SPA ecosystem\r\n",(0,o.jsx)(e.strong,{children:"Key Differences"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Applications: Automatically mounted/unmounted based on routes"}),"\n",(0,o.jsx)(e.li,{children:"Parcels: Manually controlled, can be used like regular components"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Application - Routed by Single-SPA (automatically managed)\r\nconst Application = {\r\n  // Initialize the application once when first loaded\r\n  bootstrap: () => Promise.resolve(),\r\n\r\n  // Mount the application when route becomes active\r\n  mount: (props) => {\r\n    // Props include: name, singleSpa, mountParcel, and custom props\r\n    // domElement is automatically provided based on application name\r\n    return ReactDOM.render(<App {...props} />, props.domElement);\r\n  },\r\n\r\n  // Unmount when route becomes inactive\r\n  unmount: (props) => {\r\n    // Clean up all React components and event listeners\r\n    ReactDOM.unmountComponentAtNode(props.domElement);\r\n    return Promise.resolve();\r\n  },\r\n};\r\n\r\n// Parcel - Manually controlled component (like a reusable widget)\r\nconst Parcel = {\r\n  // One-time initialization\r\n  bootstrap: () => Promise.resolve(),\r\n\r\n  // Mount the parcel when explicitly requested\r\n  mount: (props) => {\r\n    // Props are passed manually when mounting the parcel\r\n    // domElement must be provided by the parent application\r\n    return ReactDOM.render(<Widget {...props} />, props.domElement);\r\n  },\r\n\r\n  // Unmount when explicitly requested\r\n  unmount: (props) => {\r\n    ReactDOM.unmountComponentAtNode(props.domElement);\r\n    return Promise.resolve();\r\n  },\r\n\r\n  // Optional: handle prop updates without full remount\r\n  update: (props) => {\r\n    // Re-render with new props for better performance\r\n    return ReactDOM.render(<Widget {...props} />, props.domElement);\r\n  },\r\n};\n"})}),"\n",(0,o.jsx)(e.h3,{id:"creating-a-react-microfrontend",children:"Creating a React Microfrontend"}),"\n",(0,o.jsxs)(e.p,{children:["This section shows how to create a React-based microfrontend using the ",(0,o.jsx)(e.code,{children:"single-spa-react"})," helper library. This library automatically generates the required lifecycle methods (bootstrap, mount, unmount) for React applications."]}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Creates a React microfrontend with automatic lifecycle management and error handling\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": React components and configuration\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": A Single-SPA compatible application with bootstrap, mount, and unmount methods\r\n",(0,o.jsx)(e.strong,{children:"Steps"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Import required dependencies and the root React component"}),"\n",(0,o.jsx)(e.li,{children:"Configure single-spa-react with error boundary"}),"\n",(0,o.jsx)(e.li,{children:"Export lifecycle methods for Single-SPA"}),"\n",(0,o.jsx)(e.li,{children:"Optionally export component for parcel usage"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// src/app.js - React microfrontend entry point\r\nimport React from "react";\r\nimport ReactDOM from "react-dom";\r\nimport singleSpaReact from "single-spa-react"; // Helper for React integration\r\nimport RootComponent from "./root.component";\r\n\r\n// Generate Single-SPA lifecycle methods automatically\r\nconst lifecycles = singleSpaReact({\r\n  React, // React library reference\r\n  ReactDOM, // ReactDOM for rendering\r\n  rootComponent: RootComponent, // Main React component to render\r\n\r\n  // Error boundary for handling React errors gracefully\r\n  errorBoundary(err, info, props) {\r\n    console.error("React microfrontend error:", err, info);\r\n    // Return fallback UI when component crashes\r\n    return <div>Something went wrong: {err.message}</div>;\r\n  },\r\n});\r\n\r\n// Export the generated lifecycle methods for Single-SPA\r\nexport const { bootstrap, mount, unmount } = lifecycles;\r\n\r\n// Optional: export for parcel usage in other microfrontends\r\nexport const App = RootComponent;\n'})}),"\n",(0,o.jsx)(e.h2,{id:"under-the-hood-how-single-spa-works",children:"Under the Hood: How Single-SPA Works"}),"\n",(0,o.jsx)(e.h3,{id:"application-registration-and-routing",children:"Application Registration and Routing"}),"\n",(0,o.jsx)(e.p,{children:"This section provides a simplified implementation of how Single-SPA works internally. Understanding this helps developers grasp the framework's core concepts: application registration, lifecycle management, and routing logic."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Demonstrates Single-SPA's internal architecture for managing microfrontend lifecycles\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Application configurations and browser navigation events\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Automatic mounting/unmounting of applications based on current route\r\n",(0,o.jsx)(e.strong,{children:"Key Components"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Application registry with status tracking"}),"\n",(0,o.jsx)(e.li,{children:"Route-based activation logic"}),"\n",(0,o.jsx)(e.li,{children:"Lifecycle state management"}),"\n",(0,o.jsx)(e.li,{children:"Error handling and recovery"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Simplified Single-SPA implementation concept\r\nclass SingleSPA {\r\n  constructor() {\r\n    this.apps = []; // Registry of all registered applications\r\n    this.started = false; // Flag to track if Single-SPA has been started\r\n  }\r\n\r\n  // Register a new microfrontend application\r\n  registerApplication(appConfig) {\r\n    const app = {\r\n      name: appConfig.name, // Unique identifier\r\n      loadApp: appConfig.app, // Function that loads the application\r\n      activeWhen: appConfig.activeWhen, // Route matching logic\r\n      customProps: appConfig.customProps || {}, // Props passed to application\r\n      status: "NOT_LOADED", // Initial lifecycle status\r\n    };\r\n\r\n    this.apps.push(app);\r\n\r\n    // If Single-SPA is already started, check if this app should be mounted\r\n    if (this.started) {\r\n      this.reroute();\r\n    }\r\n  }\r\n\r\n  // Start Single-SPA and begin listening for route changes\r\n  start(opts = {}) {\r\n    this.started = true;\r\n    this.urlRerouteOnly = opts.urlRerouteOnly;\r\n\r\n    // Listen for browser navigation events\r\n    window.addEventListener("hashchange", () => this.reroute()); // Hash-based routing\r\n    window.addEventListener("popstate", () => this.reroute()); // History API navigation\r\n\r\n    // Override pushState and replaceState to catch programmatic navigation\r\n    this.overrideHistoryAPI();\r\n\r\n    // Perform initial routing to mount appropriate applications\r\n    this.reroute();\r\n  }\r\n\r\n  // Core routing logic - determines which apps to mount/unmount\r\n  async reroute() {\r\n    const currentLocation = window.location;\r\n\r\n    // Find applications that should be active but aren\'t mounted\r\n    const appsToMount = this.apps.filter(\r\n      (app) =>\r\n        this.shouldBeActive(app, currentLocation) && app.status !== "MOUNTED"\r\n    );\r\n\r\n    // Find applications that are mounted but should no longer be active\r\n    const appsToUnmount = this.apps.filter(\r\n      (app) =>\r\n        !this.shouldBeActive(app, currentLocation) && app.status === "MOUNTED"\r\n    );\r\n\r\n    // Unmount inactive apps first to free up resources\r\n    await Promise.all(appsToUnmount.map((app) => this.unmountApp(app)));\r\n\r\n    // Mount newly active apps\r\n    await Promise.all(appsToMount.map((app) => this.mountApp(app)));\r\n  }\r\n\r\n  // Determine if an application should be active based on current location\r\n  shouldBeActive(app, location) {\r\n    if (typeof app.activeWhen === "function") {\r\n      // Custom function for complex routing logic\r\n      return app.activeWhen(location);\r\n    }\r\n    if (typeof app.activeWhen === "string") {\r\n      // Simple string matching for path prefixes\r\n      return location.pathname.startsWith(app.activeWhen);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Mount an application through its complete lifecycle\r\n  async mountApp(app) {\r\n    try {\r\n      // Step 1: Load the application if not already loaded\r\n      if (app.status === "NOT_LOADED") {\r\n        app.status = "LOADING";\r\n        app.instance = await app.loadApp(); // Dynamic import of the application\r\n        app.status = "LOADED";\r\n      }\r\n\r\n      // Step 2: Bootstrap the application (one-time initialization)\r\n      if (app.status === "LOADED") {\r\n        app.status = "BOOTSTRAPPING";\r\n        await app.instance.bootstrap(); // Initialize app resources\r\n        app.status = "NOT_MOUNTED";\r\n      }\r\n\r\n      // Step 3: Mount the application to the DOM\r\n      if (app.status === "NOT_MOUNTED") {\r\n        app.status = "MOUNTING";\r\n        await app.instance.mount({\r\n          name: app.name, // Application name\r\n          singleSpa: this, // Reference to Single-SPA instance\r\n          ...app.customProps, // Custom properties\r\n        });\r\n        app.status = "MOUNTED";\r\n      }\r\n    } catch (error) {\r\n      // Mark app as broken to prevent further mount attempts\r\n      app.status = "SKIP_BECAUSE_BROKEN";\r\n      console.error(`Failed to mount app ${app.name}:`, error);\r\n    }\r\n  }\r\n\r\n  // Unmount an application and clean up resources\r\n  async unmountApp(app) {\r\n    if (app.status === "MOUNTED") {\r\n      app.status = "UNMOUNTING";\r\n      await app.instance.unmount(); // Clean up DOM and event listeners\r\n      app.status = "NOT_MOUNTED"; // Ready to be mounted again later\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"application-lifecycle",children:"Application Lifecycle"}),"\n",(0,o.jsx)(e.h3,{id:"lifecycle-functions",children:"Lifecycle Functions"}),"\n",(0,o.jsx)(e.p,{children:"Every Single-SPA application must implement specific lifecycle functions that Single-SPA calls at different stages. These functions control how applications are initialized, mounted to the DOM, unmounted, and optionally updated."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Implements the complete lifecycle for a React-based microfrontend\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Props object containing application name, DOM element, and custom properties\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Promises that resolve when each lifecycle phase completes\r\n",(0,o.jsx)(e.strong,{children:"Lifecycle Stages"}),":"]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Bootstrap"}),": One-time initialization when app is first loaded"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Mount"}),": Render the application to the DOM when route becomes active"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Unmount"}),": Clean up and remove from DOM when route becomes inactive"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Update"}),": (Optional) Handle prop changes without full remount"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Detailed lifecycle implementation for a React microfrontend\r\nconst MyApp = {\r\n  // 1. Bootstrap - Initialize app (runs once per browser session)\r\n  bootstrap: async (props) => {\r\n    console.log("Bootstrapping app", props.name);\r\n\r\n    // One-time setup operations:\r\n    // - Initialize global state stores\r\n    // - Setup error boundaries and monitoring\r\n    // - Configure third-party libraries\r\n    // - Setup shared resources that persist between mounts\r\n    await initializeApp();\r\n\r\n    return Promise.resolve();\r\n  },\r\n\r\n  // 2. Mount - Render app to DOM (called every time route becomes active)\r\n  mount: async (props) => {\r\n    console.log("Mounting app", props.name);\r\n\r\n    // Find or create the DOM container for this application\r\n    // Single-SPA automatically creates elements with id="single-spa-application:{name}"\r\n    const domElement =\r\n      props.domElement ||\r\n      document.getElementById(`single-spa-application:${props.name}`);\r\n\r\n    // Create React 18 root for concurrent features\r\n    const root = ReactDOM.createRoot(domElement);\r\n\r\n    // Render the application with all props passed from Single-SPA\r\n    // Props may include: routing info, shared state, custom data\r\n    root.render(\r\n      <App\r\n        {...props} // All Single-SPA props\r\n        history={props.history} // Routing history object\r\n        basename={props.basename} // Base path for routing\r\n      />\r\n    );\r\n\r\n    // Store React root reference for cleanup during unmount\r\n    props.reactRoot = root;\r\n\r\n    return Promise.resolve();\r\n  },\r\n\r\n  // 3. Unmount - Cleanup and remove from DOM (called when route becomes inactive)\r\n  unmount: async (props) => {\r\n    console.log("Unmounting app", props.name);\r\n\r\n    // Cleanup React application and free memory\r\n    if (props.reactRoot) {\r\n      props.reactRoot.unmount(); // React 18 cleanup\r\n    }\r\n\r\n    // Critical cleanup operations:\r\n    // - Remove event listeners\r\n    // - Clear intervals/timeouts\r\n    // - Cancel pending requests\r\n    // - Cleanup WebSocket connections\r\n    // - Remove global state subscriptions\r\n    cleanup();\r\n\r\n    return Promise.resolve();\r\n  },\r\n\r\n  // 4. Update - Handle prop changes (optional, for performance optimization)\r\n  update: async (props) => {\r\n    console.log("Updating app", props.name);\r\n\r\n    // Re-render with new props without full unmount/mount cycle\r\n    // Useful for:\r\n    // - Theme changes\r\n    // - User preference updates\r\n    // - Shared state updates\r\n    if (props.reactRoot) {\r\n      props.reactRoot.render(<App {...props} />);\r\n    }\r\n\r\n    return Promise.resolve();\r\n  },\r\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"inter-app-communication",children:"Inter-App Communication"}),"\n",(0,o.jsx)(e.h3,{id:"1-custom-events",children:"1. Custom Events"}),"\n",(0,o.jsx)(e.p,{children:"Custom events provide a decoupled way for microfrontends to communicate without direct dependencies. This pattern uses the browser's native event system to enable pub/sub communication across applications."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Implements a cross-application event bus for microfrontend communication\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Event names and data payloads\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Dispatched events that any application can listen to\r\n",(0,o.jsx)(e.strong,{children:"Use Cases"}),": User authentication, theme changes, notifications, shared state updates\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": Loose coupling, framework agnostic, no shared dependencies"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Utility for cross-app communication using browser\'s native event system\r\nclass EventBus {\r\n  // Emit an event that any microfrontend can listen to\r\n  static emit(eventName, data) {\r\n    // Use CustomEvent to send structured data between apps\r\n    window.dispatchEvent(new CustomEvent(eventName, { detail: data }));\r\n  }\r\n\r\n  // Listen for events from other microfrontends\r\n  static on(eventName, callback) {\r\n    window.addEventListener(eventName, callback);\r\n\r\n    // Return cleanup function for proper memory management\r\n    // This prevents memory leaks when components unmount\r\n    return () => window.removeEventListener(eventName, callback);\r\n  }\r\n}\r\n\r\n// Example: Authentication app publishes login events\r\nconst publishUserLogin = (user) => {\r\n  // Emit event with user data and metadata\r\n  EventBus.emit("user:login", {\r\n    user, // User object with profile info\r\n    timestamp: Date.now(), // When the login occurred\r\n    source: "auth-app", // Which app published the event\r\n  });\r\n};\r\n\r\n// Example: Navigation app subscribes to login events\r\nconst cleanup = EventBus.on("user:login", (event) => {\r\n  // Extract data from the event detail\r\n  const { user, timestamp } = event.detail;\r\n\r\n  console.log("User logged in:", user);\r\n\r\n  // Update UI based on the login event\r\n  updateNavbarUser(user);\r\n  showWelcomeMessage(user.name);\r\n  updateUserMenuOptions(user.permissions);\r\n});\r\n\r\n// Critical: Always clean up event listeners in unmount\r\nexport const unmount = () => {\r\n  cleanup(); // Remove event listener to prevent memory leaks\r\n  return Promise.resolve();\r\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-shared-state-management",children:"2. Shared State Management"}),"\n",(0,o.jsx)(e.p,{children:"Shared state management allows microfrontends to share data through a centralized store. This pattern is useful for maintaining consistent state across applications while avoiding prop drilling through the Single-SPA boundary."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Creates a global state store that multiple microfrontends can read from and write to\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": State updates from any microfrontend\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Synchronized state across all subscribed applications\r\n",(0,o.jsx)(e.strong,{children:"Use Cases"}),": User authentication state, theme preferences, shopping cart data, notification queues\r\n",(0,o.jsx)(e.strong,{children:"Pattern"}),": Observer pattern with pub/sub for state synchronization"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// shared-store.js - Global state store for cross-application data sharing\r\nclass SharedStore {\r\n  constructor() {\r\n    // Initialize global application state\r\n    this.state = {\r\n      user: null, // Current authenticated user\r\n      theme: "light", // UI theme preference\r\n      notifications: [], // Global notification queue\r\n      shoppingCart: [], // E-commerce cart items\r\n      permissions: [], // User permissions\r\n    };\r\n\r\n    // Array of callback functions that get notified on state changes\r\n    this.subscribers = [];\r\n  }\r\n\r\n  // Get current state snapshot (read-only)\r\n  getState() {\r\n    return this.state; // Return current state for reading\r\n  }\r\n\r\n  // Update state and notify all subscribers\r\n  setState(newState) {\r\n    // Merge new state with existing state (immutable update)\r\n    this.state = { ...this.state, ...newState };\r\n\r\n    // Notify all subscribed microfrontends of the change\r\n    this.notifySubscribers();\r\n  }\r\n\r\n  // Subscribe to state changes (returns unsubscribe function)\r\n  subscribe(callback) {\r\n    this.subscribers.push(callback);\r\n\r\n    // Return cleanup function for memory management\r\n    return () => {\r\n      this.subscribers = this.subscribers.filter((sub) => sub !== callback);\r\n    };\r\n  }\r\n\r\n  // Internal method to notify all subscribers of state changes\r\n  notifySubscribers() {\r\n    // Call each subscriber with the new state\r\n    this.subscribers.forEach((callback) => callback(this.state));\r\n  }\r\n}\r\n\r\n// Create singleton instance on window object to ensure one store per page\r\n// This pattern ensures the same store instance across all microfrontends\r\nwindow.__SHARED_STORE__ = window.__SHARED_STORE__ || new SharedStore();\r\n\r\nexport default window.__SHARED_STORE__;\r\n\r\n// Usage in microfrontends - React component example\r\nimport sharedStore from "@org/shared-store";\r\n\r\n// React component that subscribes to global user state\r\nconst UserProfile = () => {\r\n  // Initialize with current user from shared store\r\n  const [user, setUser] = useState(sharedStore.getState().user);\r\n\r\n  useEffect(() => {\r\n    // Subscribe to state changes when component mounts\r\n    const unsubscribe = sharedStore.subscribe((state) => {\r\n      // Update local state when global state changes\r\n      setUser(state.user);\r\n    });\r\n\r\n    // Cleanup subscription when component unmounts\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return <div>{user ? `Welcome, ${user.name}` : "Please log in"}</div>;\r\n};\r\n\r\n// Update global state from any microfrontend\r\nconst handleLogin = (userData) => {\r\n  // This will trigger updates in all subscribed components across all apps\r\n  sharedStore.setState({\r\n    user: userData,\r\n    permissions: userData.permissions,\r\n  });\r\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-parcel-communication",children:"3. Parcel Communication"}),"\n",(0,o.jsx)(e.p,{children:"Parcels are manually controlled microfrontend components that can be mounted anywhere in any application. They're perfect for reusable UI components that need to be shared across different microfrontends."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Creates a reusable modal component that any microfrontend can use\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Props including title, content, and callback functions\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": A mounted modal component that can be controlled programmatically\r\n",(0,o.jsx)(e.strong,{children:"Use Cases"}),": Shared modals, widgets, notifications, tooltips, confirmation dialogs\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": Reusable across apps, framework agnostic, controlled lifecycle"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Modal parcel that can be used across any microfrontend\r\nconst ModalParcel = {\r\n  // One-time initialization\r\n  bootstrap: () => Promise.resolve(),\r\n\r\n  // Mount the modal to a specific DOM element\r\n  mount: (props) => {\r\n    // Extract props passed from the parent application\r\n    const { domElement, title, content, onClose, theme = "light" } = props;\r\n\r\n    // Create modal structure with dynamic content\r\n    const modal = document.createElement("div");\r\n    modal.className = `modal-overlay modal-overlay--${theme}`;\r\n\r\n    // Build modal HTML with provided content\r\n    modal.innerHTML = `\r\n      <div class="modal modal--${theme}" role="dialog" aria-modal="true">\r\n        <div class="modal__header">\r\n          <h2 class="modal__title">${title}</h2>\r\n          <button class="modal__close" aria-label="Close modal">&times;</button>\r\n        </div>\r\n        <div class="modal__content">${content}</div>\r\n        <div class="modal__footer">\r\n          <button class="btn btn--primary close-btn">Close</button>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    // Add event listeners for close functionality\r\n    const closeBtn = modal.querySelector(".close-btn");\r\n    const closeX = modal.querySelector(".modal__close");\r\n\r\n    const handleClose = () => {\r\n      onClose && onClose(); // Call parent\'s close handler\r\n    };\r\n\r\n    closeBtn.onclick = handleClose;\r\n    closeX.onclick = handleClose;\r\n\r\n    // Close on overlay click\r\n    modal.onclick = (e) => {\r\n      if (e.target === modal) handleClose();\r\n    };\r\n\r\n    // Add to DOM and focus for accessibility\r\n    domElement.appendChild(modal);\r\n    modal.querySelector(".modal").focus();\r\n\r\n    return Promise.resolve();\r\n  },\r\n\r\n  // Cleanup when modal is closed\r\n  unmount: (props) => {\r\n    // Remove all content and event listeners\r\n    props.domElement.innerHTML = "";\r\n    return Promise.resolve();\r\n  },\r\n};\r\n\r\n// Usage across different microfrontends\r\nimport { mountRootParcel } from "single-spa";\r\n\r\n// Function to programmatically show a modal from any app\r\nconst showModal = async (title, content, options = {}) => {\r\n  // Mount the modal parcel with configuration\r\n  const parcel = mountRootParcel(ModalParcel, {\r\n    domElement: document.getElementById("modal-container"), // Global modal container\r\n    title, // Modal title\r\n    content, // Modal body content\r\n    theme: options.theme || "light", // Theme preference\r\n    onClose: () => {\r\n      // Cleanup function when modal is closed\r\n      parcel.unmount();\r\n      options.onClose && options.onClose(); // Custom close handler\r\n    },\r\n  });\r\n\r\n  return parcel; // Return parcel reference for manual control\r\n};\r\n\r\n// Example usage in different microfrontends:\r\n\r\n// From an e-commerce app:\r\nconst showProductDetails = (product) => {\r\n  showModal(\r\n    product.name,\r\n    `<img src="${product.image}" alt="${product.name}" />\r\n     <p>${product.description}</p>\r\n     <p>Price: $${product.price}</p>`,\r\n    { theme: "dark" }\r\n  );\r\n};\r\n\r\n// From a user management app:\r\nconst showUserProfile = (user) => {\r\n  showModal(\r\n    `User: ${user.name}`,\r\n    `<p>Email: ${user.email}</p>\r\n     <p>Role: ${user.role}</p>\r\n     <p>Last Login: ${user.lastLogin}</p>`,\r\n    {\r\n      onClose: () => console.log("User profile closed"),\r\n    }\r\n  );\r\n};\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(e.h3,{id:"1-application-structure",children:"1. Application Structure"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Recommended folder structure\r\n/*\r\nroot-config/\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u251c\u2500\u2500 index.ejs\r\n\u2502   \u251c\u2500\u2500 root-config.js\r\n\u2502   \u2514\u2500\u2500 microfrontend-layout.html\r\n\r\nshared-dependencies/\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u251c\u2500\u2500 react.js\r\n\u2502   \u251c\u2500\u2500 react-dom.js\r\n\u2502   \u2514\u2500\u2500 shared-utils.js\r\n\r\nnavbar/\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u251c\u2500\u2500 app.js\r\n\u2502   \u251c\u2500\u2500 root.component.js\r\n\u2502   \u2514\u2500\u2500 navbar.component.js\r\n\r\nhome-app/\r\n\u251c\u2500\u2500 src/\r\n\u2502   \u251c\u2500\u2500 app.js\r\n\u2502   \u251c\u2500\u2500 root.component.js\r\n\u2502   \u2514\u2500\u2500 components/\r\n*/\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-error-boundaries-and-resilience",children:"2. Error Boundaries and Resilience"}),"\n",(0,o.jsx)(e.p,{children:"Error handling is crucial in microfrontend architectures to prevent one failing application from breaking the entire system. This pattern implements graceful degradation and fallback mechanisms."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Wraps application registration with error handling and fallback UI\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Application configuration with potential loading failures\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Either the successfully loaded application or a fallback error UI\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": System resilience, graceful degradation, improved user experience\r\n",(0,o.jsx)(e.strong,{children:"Error Scenarios"}),": Network failures, JavaScript errors, missing dependencies, server downtime"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Global error handling wrapper for application registration\r\nconst registerApplicationWithErrorHandling = (config) => {\r\n  registerApplication({\r\n    ...config, // Spread original config (name, activeWhen, etc.)\r\n\r\n    // Wrap the app loading function with error handling\r\n    app: async () => {\r\n      try {\r\n        // Attempt to load the application normally\r\n        return await config.app();\r\n      } catch (error) {\r\n        // Log the error for debugging and monitoring\r\n        console.error(`Failed to load ${config.name}:`, error);\r\n\r\n        // Send error to monitoring service (optional)\r\n        if (window.errorReporting) {\r\n          window.errorReporting.captureException(error, {\r\n            tags: {\r\n              microfrontend: config.name,\r\n              type: "loading_failure",\r\n            },\r\n          });\r\n        }\r\n\r\n        // Return a fallback application with basic lifecycle methods\r\n        return {\r\n          // No initialization needed for fallback\r\n          bootstrap: () => Promise.resolve(),\r\n\r\n          // Mount fallback UI instead of the failed application\r\n          mount: (props) => {\r\n            // Create user-friendly error message\r\n            props.domElement.innerHTML = `\r\n              <div class="error-fallback" role="alert">\r\n                <div class="error-fallback__icon">\u26a0\ufe0f</div>\r\n                <h3 class="error-fallback__title">Unable to load ${config.name}</h3>\r\n                <p class="error-fallback__message">\r\n                  This feature is temporarily unavailable. Please try refreshing the page.\r\n                </p>\r\n                <button class="error-fallback__retry" onclick="window.location.reload()">\r\n                  Refresh Page\r\n                </button>\r\n                <details class="error-fallback__details">\r\n                  <summary>Technical Details</summary>\r\n                  <pre>${error.message}</pre>\r\n                </details>\r\n              </div>\r\n            `;\r\n            return Promise.resolve();\r\n          },\r\n\r\n          // Clean up fallback UI\r\n          unmount: (props) => {\r\n            props.domElement.innerHTML = "";\r\n            return Promise.resolve();\r\n          },\r\n        };\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\n// Usage with enhanced error handling\r\nregisterApplicationWithErrorHandling({\r\n  name: "critical-dashboard",\r\n  app: () => import("@org/dashboard"),\r\n  activeWhen: "/dashboard",\r\n  customProps: {\r\n    fallbackMessage: "Dashboard temporarily unavailable",\r\n  },\r\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-performance-optimization",children:"3. Performance Optimization"}),"\n",(0,o.jsx)(e.p,{children:"Performance optimization in microfrontends involves strategic loading, preloading, and caching strategies. These techniques reduce perceived load times and improve user experience."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Implements preloading strategies to improve application performance\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": User interactions and routing patterns\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Faster application loading through strategic resource preloading\r\n",(0,o.jsx)(e.strong,{children:"Techniques"}),": Module preloading, hover-based prefetching, route-based optimization\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": Reduced time to interactive, better perceived performance, improved UX"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Advanced lazy loading with intelligent preloading strategies\r\n\r\n// Preload application modules based on user behavior\r\nconst preloadApp = (appName) => {\r\n  // Check if already preloaded to avoid duplicate requests\r\n  if (document.querySelector(`link[href*="${appName}"]`)) {\r\n    return;\r\n  }\r\n\r\n  // Create modulepreload link for browser optimization\r\n  const link = document.createElement("link");\r\n  link.rel = "modulepreload"; // Browser hint for module preloading\r\n  link.href = `/apps/${appName}.js`; // Path to the application bundle\r\n  link.crossOrigin = "anonymous"; // CORS handling\r\n\r\n  // Add to document head for browser processing\r\n  document.head.appendChild(link);\r\n\r\n  console.log(`Preloading ${appName} for faster navigation`);\r\n};\r\n\r\n// Register application with preloading strategy\r\nregisterApplication({\r\n  name: "dashboard",\r\n  app: () => import("@org/dashboard"), // Lazy load when actually needed\r\n  activeWhen: "/dashboard",\r\n});\r\n\r\n// Strategy 1: Preload on user intent (hover)\r\ndocument.addEventListener("DOMContentLoaded", () => {\r\n  const dashboardLink = document.querySelector(".dashboard-link");\r\n\r\n  if (dashboardLink) {\r\n    // Preload when user hovers (indicates intent to navigate)\r\n    dashboardLink.addEventListener("mouseenter", () => {\r\n      preloadApp("dashboard");\r\n    });\r\n\r\n    // Also preload on focus for keyboard navigation\r\n    dashboardLink.addEventListener("focus", () => {\r\n      preloadApp("dashboard");\r\n    });\r\n  }\r\n});\r\n\r\n// Strategy 2: Preload based on user role/permissions\r\nconst preloadBasedOnUser = (user) => {\r\n  // Preload applications the user is likely to access\r\n  if (user.role === "admin") {\r\n    preloadApp("admin-panel");\r\n    preloadApp("user-management");\r\n  }\r\n\r\n  if (user.permissions.includes("analytics")) {\r\n    preloadApp("analytics-dashboard");\r\n  }\r\n};\r\n\r\n// Strategy 3: Preload during idle time\r\nconst preloadDuringIdle = () => {\r\n  // Use requestIdleCallback for non-critical preloading\r\n  if ("requestIdleCallback" in window) {\r\n    requestIdleCallback(() => {\r\n      // Preload less critical applications during browser idle time\r\n      preloadApp("settings");\r\n      preloadApp("help-center");\r\n    });\r\n  }\r\n};\r\n\r\n// Strategy 4: Intelligent preloading based on navigation patterns\r\nclass NavigationPreloader {\r\n  constructor() {\r\n    this.navigationHistory = [];\r\n    this.preloadCache = new Set();\r\n  }\r\n\r\n  // Track user navigation patterns\r\n  trackNavigation(route) {\r\n    this.navigationHistory.push({\r\n      route,\r\n      timestamp: Date.now(),\r\n    });\r\n\r\n    // Keep only recent history (last 10 navigations)\r\n    if (this.navigationHistory.length > 10) {\r\n      this.navigationHistory.shift();\r\n    }\r\n\r\n    // Predict and preload next likely route\r\n    this.predictAndPreload();\r\n  }\r\n\r\n  // Predict next route based on patterns\r\n  predictAndPreload() {\r\n    const recentRoutes = this.navigationHistory.slice(-5);\r\n\r\n    // If user visited dashboard -> analytics 3+ times, preload analytics when on dashboard\r\n    const currentRoute = window.location.pathname;\r\n\r\n    if (currentRoute === "/dashboard") {\r\n      const analyticsPattern = recentRoutes.filter(\r\n        (nav, index) =>\r\n          nav.route === "/analytics" &&\r\n          recentRoutes[index - 1]?.route === "/dashboard"\r\n      );\r\n\r\n      if (analyticsPattern.length >= 2 && !this.preloadCache.has("analytics")) {\r\n        preloadApp("analytics");\r\n        this.preloadCache.add("analytics");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Initialize navigation tracking\r\nconst navPreloader = new NavigationPreloader();\r\n\r\n// Track navigation changes\r\nwindow.addEventListener("single-spa:routing-event", (event) => {\r\n  navPreloader.trackNavigation(window.location.pathname);\r\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"4-development-vs-production-configuration",children:"4. Development vs Production Configuration"}),"\n",(0,o.jsx)(e.p,{children:"Different environments require different configuration strategies. This pattern allows seamless switching between local development and production deployments while maintaining the same codebase."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Configures application loading based on the current environment\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Environment variables and build configurations\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Environment-appropriate application loading strategies\r\n",(0,o.jsx)(e.strong,{children:"Use Cases"}),": Local development, staging, production, testing environments\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": Unified codebase, environment-specific optimization, easier debugging"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Environment-based app loading with comprehensive configuration\r\nconst isLocal = process.env.NODE_ENV === "development";\r\nconst isStaging = process.env.NODE_ENV === "staging";\r\nconst isProduction = process.env.NODE_ENV === "production";\r\n\r\n// Environment-specific base URLs\r\nconst getAppUrl = (appName) => {\r\n  if (isLocal) {\r\n    // Local development URLs with hot reloading\r\n    const localPorts = {\r\n      navbar: 8080,\r\n      dashboard: 8081,\r\n      profile: 8082,\r\n      analytics: 8083,\r\n    };\r\n    return `http://localhost:${localPorts[appName]}/${appName}.js`;\r\n  }\r\n\r\n  if (isStaging) {\r\n    // Staging environment with version hashes for testing\r\n    return `https://staging-cdn.myapp.com/apps/${appName}.${process.env.BUILD_HASH}.js`;\r\n  }\r\n\r\n  if (isProduction) {\r\n    // Production CDN with optimized bundles\r\n    return `https://cdn.myapp.com/apps/${appName}.min.js`;\r\n  }\r\n\r\n  // Fallback for unknown environments\r\n  return `/apps/${appName}.js`;\r\n};\r\n\r\n// Register applications with environment-aware loading\r\nregisterApplication({\r\n  name: "navbar",\r\n  app: () => import(getAppUrl("navbar")),\r\n  activeWhen: () => true,\r\n  customProps: {\r\n    // Pass environment info to applications\r\n    environment: process.env.NODE_ENV,\r\n    apiUrl: process.env.API_BASE_URL,\r\n    debugMode: isLocal,\r\n  },\r\n});\r\n\r\nregisterApplication({\r\n  name: "dashboard",\r\n  app: () => {\r\n    // Add development-specific features\r\n    if (isLocal) {\r\n      // Enable hot module replacement in development\r\n      if (module.hot) {\r\n        module.hot.accept();\r\n      }\r\n\r\n      // Load unminified version for better debugging\r\n      return import(getAppUrl("dashboard"));\r\n    }\r\n\r\n    // Production optimizations\r\n    return import(getAppUrl("dashboard"));\r\n  },\r\n  activeWhen: "/dashboard",\r\n  customProps: {\r\n    // Environment-specific feature flags\r\n    enableAnalytics: isProduction,\r\n    enableDebugPanel: isLocal,\r\n    apiTimeout: isLocal ? 30000 : 10000, // Longer timeout in dev\r\n  },\r\n});\r\n\r\n// Development-only applications\r\nif (isLocal) {\r\n  registerApplication({\r\n    name: "dev-tools",\r\n    app: () => import("http://localhost:9000/dev-tools.js"),\r\n    activeWhen: () => window.location.search.includes("debug=true"),\r\n    customProps: {\r\n      showPerformanceMetrics: true,\r\n      enableStateInspector: true,\r\n    },\r\n  });\r\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"module-federation-integration",children:"Module Federation Integration"}),"\n",(0,o.jsx)(e.p,{children:"Module Federation enables dynamic code sharing between applications at runtime. When combined with Single-SPA, it provides powerful capabilities for sharing components, libraries, and even entire applications."}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"What this code does"}),": Integrates Webpack Module Federation with Single-SPA for dynamic module sharing\r\n",(0,o.jsx)(e.strong,{children:"Input"}),": Webpack configuration and federated module imports\r\n",(0,o.jsx)(e.strong,{children:"Output"}),": Applications that can share code and components at runtime\r\n",(0,o.jsx)(e.strong,{children:"Benefits"}),": Reduced bundle sizes, shared dependencies, runtime code sharing\r\n",(0,o.jsx)(e.strong,{children:"Use Cases"}),": Shared component libraries, micro-frontends with common dependencies"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// webpack.config.js for the shell application (host)\r\nconst ModuleFederationPlugin = require("@module-federation/webpack");\r\n\r\nmodule.exports = {\r\n  mode: "development",\r\n  devServer: {\r\n    port: 3000, // Shell application port\r\n  },\r\n\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: "shell", // Name of this application\r\n\r\n      // Define remote applications that this shell can consume\r\n      remotes: {\r\n        // Map friendly names to actual federated module URLs\r\n        navbar: "navbar@http://localhost:3001/remoteEntry.js",\r\n        dashboard: "dashboard@http://localhost:3002/remoteEntry.js",\r\n        profile: "profile@http://localhost:3003/remoteEntry.js",\r\n      },\r\n\r\n      // Share dependencies to avoid duplication\r\n      shared: {\r\n        react: {\r\n          singleton: true, // Only one React instance across all apps\r\n          requiredVersion: "^18.0.0",\r\n          eager: true, // Load immediately, don\'t wait for async\r\n        },\r\n        "react-dom": {\r\n          singleton: true,\r\n          requiredVersion: "^18.0.0",\r\n          eager: true,\r\n        },\r\n        "react-router-dom": {\r\n          singleton: true, // Shared routing\r\n          requiredVersion: "^6.0.0",\r\n        },\r\n        // Share utility libraries\r\n        lodash: {\r\n          requiredVersion: "^4.17.0",\r\n        },\r\n      },\r\n    }),\r\n  ],\r\n};\r\n\r\n// webpack.config.js for a microfrontend (remote)\r\nmodule.exports = {\r\n  mode: "development",\r\n  devServer: {\r\n    port: 3001, // Navbar application port\r\n  },\r\n\r\n  plugins: [\r\n    new ModuleFederationPlugin({\r\n      name: "navbar",\r\n      filename: "remoteEntry.js", // Entry point for federation\r\n\r\n      // Expose components/modules for other applications to consume\r\n      exposes: {\r\n        "./App": "./src/App", // Main application\r\n        "./Navigation": "./src/components/Navigation", // Shared component\r\n        "./UserMenu": "./src/components/UserMenu", // Reusable widget\r\n      },\r\n\r\n      // Same shared dependencies as shell\r\n      shared: {\r\n        react: { singleton: true, requiredVersion: "^18.0.0" },\r\n        "react-dom": { singleton: true, requiredVersion: "^18.0.0" },\r\n        "react-router-dom": { singleton: true },\r\n      },\r\n    }),\r\n  ],\r\n};\r\n\r\n// Loading federated modules in Single-SPA with error handling\r\nregisterApplication({\r\n  name: "dashboard",\r\n  app: async () => {\r\n    try {\r\n      // Import the federated module\r\n      const module = await import("dashboard/App");\r\n\r\n      // The module might export Single-SPA lifecycle methods directly\r\n      if (module.bootstrap && module.mount && module.unmount) {\r\n        return module; // Return the lifecycle methods\r\n      }\r\n\r\n      // Or it might export a React component that needs wrapping\r\n      const Component = module.default;\r\n\r\n      // Wrap React component with Single-SPA lifecycle\r\n      return singleSpaReact({\r\n        React,\r\n        ReactDOM,\r\n        rootComponent: Component,\r\n      });\r\n    } catch (error) {\r\n      console.error("Failed to load federated dashboard:", error);\r\n\r\n      // Return fallback application\r\n      return {\r\n        bootstrap: () => Promise.resolve(),\r\n        mount: (props) => {\r\n          props.domElement.innerHTML =\r\n            "<div>Dashboard temporarily unavailable</div>";\r\n          return Promise.resolve();\r\n        },\r\n        unmount: (props) => {\r\n          props.domElement.innerHTML = "";\r\n          return Promise.resolve();\r\n        },\r\n      };\r\n    }\r\n  },\r\n  activeWhen: "/dashboard",\r\n});\r\n\r\n// Advanced pattern: Dynamically discover and register federated modules\r\nconst registerFederatedApp = async (remoteName, remoteUrl, routePath) => {\r\n  try {\r\n    // Dynamically add remote to Module Federation\r\n    const remoteContainer = await import(remoteUrl);\r\n\r\n    registerApplication({\r\n      name: remoteName,\r\n      app: async () => {\r\n        const module = await remoteContainer.get("./App");\r\n        return module();\r\n      },\r\n      activeWhen: routePath,\r\n      customProps: {\r\n        federated: true,\r\n        remoteUrl: remoteUrl,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(`Failed to register federated app ${remoteName}:`, error);\r\n  }\r\n};\r\n\r\n// Register multiple federated applications\r\nconst federatedApps = [\r\n  {\r\n    name: "analytics",\r\n    url: "http://localhost:3004/remoteEntry.js",\r\n    route: "/analytics",\r\n  },\r\n  {\r\n    name: "reports",\r\n    url: "http://localhost:3005/remoteEntry.js",\r\n    route: "/reports",\r\n  },\r\n];\r\n\r\nfederatedApps.forEach((app) => {\r\n  registerFederatedApp(app.name, app.url, app.route);\r\n});\n'})}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"Single-SPA provides a powerful foundation for building microfrontend architectures that enable independent development, deployment, and scaling of web applications. By understanding its lifecycle management, communication patterns, and best practices, teams can build maintainable and performant distributed frontend systems."}),"\n",(0,o.jsx)(e.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Application Lifecycle"}),": Proper implementation of bootstrap, mount, and unmount functions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Communication Patterns"}),": Use custom events, shared state, and parcels for inter-app communication"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Error Resilience"}),": Implement proper error boundaries and fallback mechanisms"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance"}),": Leverage lazy loading, preloading, and shared dependencies"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Team Independence"}),": Enable autonomous development while maintaining integration"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["As referenced in the ",(0,o.jsx)(e.a,{href:"https://github.com/single-spa/single-spa",children:"Single-SPA GitHub repository"}),", the framework continues to evolve with strong community support and comprehensive tooling for modern microfrontend development."]}),"\n",(0,o.jsx)(e.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://single-spa.js.org/",children:"Single-SPA Documentation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://github.com/single-spa/single-spa",children:"Single-SPA GitHub Repository"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://single-spa.js.org/docs/getting-started-overview",children:"Single-SPA Workshop"})}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>i,x:()=>s});var t=r(6540);const o={},a=t.createContext(o);function i(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);