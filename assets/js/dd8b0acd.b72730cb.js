"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1561],{5201:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"project-detail/redux","title":"Redux: Predictable State Management","description":"Table of Contents","source":"@site/docs/project-detail/redux.md","sourceDirName":"project-detail","slug":"/project-detail/redux","permalink":"/frontend-system-design/docs/project-detail/redux","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/redux.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"Ant Design: Enterprise-Class UI Library","permalink":"/frontend-system-design/docs/project-detail/ant-design"},"next":{"title":"Redux Toolkit: Modern Redux Development","permalink":"/frontend-system-design/docs/project-detail/redux-toolkit"}}');var i=t(4848),s=t(8453);const r={},d="Redux: Predictable State Management",a={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Principles",id:"key-principles",level:3},{value:"When to Use Redux",id:"when-to-use-redux",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Actions",id:"actions",level:3},{value:"Reducers",id:"reducers",level:3},{value:"Store",id:"store",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Basic Setup with React",id:"basic-setup-with-react",level:3},{value:"Connecting Components",id:"connecting-components",level:3},{value:"Under the Hood: How Redux Works",id:"under-the-hood-how-redux-works",level:2},{value:"State Tree Structure",id:"state-tree-structure",level:3},{value:"Store Implementation Simplified",id:"store-implementation-simplified",level:3},{value:"Action Dispatch Flow",id:"action-dispatch-flow",level:3},{value:"Redux Toolkit (Modern Redux)",id:"redux-toolkit-modern-redux",level:2},{value:"Setting Up with Redux Toolkit",id:"setting-up-with-redux-toolkit",level:3},{value:"Creating Slices",id:"creating-slices",level:3},{value:"Modern React Hooks Usage",id:"modern-react-hooks-usage",level:3},{value:"Middleware and Async Actions",id:"middleware-and-async-actions",level:2},{value:"Redux Thunk for Async Actions",id:"redux-thunk-for-async-actions",level:3},{value:"RTK Query for Data Fetching",id:"rtk-query-for-data-fetching",level:3},{value:"Custom Middleware",id:"custom-middleware",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Selector Optimization",id:"selector-optimization",level:3},{value:"Component Optimization",id:"component-optimization",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"State Structure",id:"state-structure",level:3},{value:"Action Design",id:"action-design",level:3},{value:"Reducer Guidelines",id:"reducer-guidelines",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"redux-predictable-state-management",children:"Redux: Predictable State Management"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#core-concepts",children:"Core Concepts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#under-the-hood-how-redux-works",children:"Under the Hood: How Redux Works"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#redux-toolkit-modern-redux",children:"Redux Toolkit (Modern Redux)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#middleware-and-async-actions",children:"Middleware and Async Actions"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["Redux is a predictable state container for JavaScript applications, most commonly used with React. As highlighted in the ",(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux",children:"Redux GitHub repository"}),", it helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test."]}),"\n",(0,i.jsx)(n.h3,{id:"key-principles",children:"Key Principles"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single Source of Truth"}),": The global state is stored in a single store"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State is Read-Only"}),": The only way to change state is by dispatching actions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Changes are Made with Pure Functions"}),": Reducers specify how the state tree is transformed"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-to-use-redux",children:"When to Use Redux"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You have reasonable amounts of data changing over time"}),"\n",(0,i.jsx)(n.li,{children:"You need a single source of truth for your state"}),"\n",(0,i.jsx)(n.li,{children:"You find that keeping all your state in a top-level component is no longer sufficient"}),"\n",(0,i.jsx)(n.li,{children:"You need to share data between components that don't have a parent-child relationship"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(n.p,{children:"Actions are plain JavaScript objects that describe what happened in your application."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Action types\nconst ADD_TODO = "ADD_TODO";\nconst TOGGLE_TODO = "TOGGLE_TODO";\nconst DELETE_TODO = "DELETE_TODO";\n\n// Action creators\nconst addTodo = (text) => ({\n  type: ADD_TODO,\n  payload: {\n    id: Date.now(),\n    text,\n    completed: false,\n  },\n});\n\nconst toggleTodo = (id) => ({\n  type: TOGGLE_TODO,\n  payload: { id },\n});\n\nconst deleteTodo = (id) => ({\n  type: DELETE_TODO,\n  payload: { id },\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reducers",children:"Reducers"}),"\n",(0,i.jsx)(n.p,{children:"Reducers are pure functions that take the current state and an action, and return a new state."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'const initialState = {\n  todos: [],\n  filter: "ALL", // ALL, ACTIVE, COMPLETED\n};\n\nconst todoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n\n    case TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.payload.id\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        ),\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.payload.id),\n      };\n\n    default:\n      return state;\n  }\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"store",children:"Store"}),"\n",(0,i.jsx)(n.p,{children:"The store holds the complete state tree of your application."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { createStore } from "redux";\n\nconst store = createStore(todoReducer);\n\n// Subscribe to state changes\nstore.subscribe(() => {\n  console.log("State updated:", store.getState());\n});\n\n// Dispatch actions\nstore.dispatch(addTodo("Learn Redux"));\nstore.dispatch(addTodo("Build amazing apps"));\nstore.dispatch(toggleTodo(1));\n'})}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Core Redux (for learning purposes)\nnpm install redux react-redux\n\n# Modern approach with Redux Toolkit (recommended)\nnpm install @reduxjs/toolkit react-redux\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-setup-with-react",children:"Basic Setup with React"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// store.js\nimport { createStore } from "redux";\nimport { Provider } from "react-redux";\nimport todoReducer from "./reducers/todoReducer";\n\nconst store = createStore(todoReducer);\n\n// App.js\nimport { Provider } from "react-redux";\nimport store from "./store";\nimport TodoApp from "./TodoApp";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoApp />\n    </Provider>\n  );\n}\n\nexport default App;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"connecting-components",children:"Connecting Components"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// TodoList.js\nimport React from "react";\nimport { connect } from "react-redux";\nimport { toggleTodo, deleteTodo } from "./actions";\n\nconst TodoList = ({ todos, toggleTodo, deleteTodo }) => (\n  <ul>\n    {todos.map((todo) => (\n      <li key={todo.id}>\n        <span\n          style={{\n            textDecoration: todo.completed ? "line-through" : "none",\n          }}\n          onClick={() => toggleTodo(todo.id)}\n        >\n          {todo.text}\n        </span>\n        <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst mapStateToProps = (state) => ({\n  todos: state.todos,\n});\n\nconst mapDispatchToProps = {\n  toggleTodo,\n  deleteTodo,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"under-the-hood-how-redux-works",children:"Under the Hood: How Redux Works"}),"\n",(0,i.jsx)(n.h3,{id:"state-tree-structure",children:"State Tree Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Redux state is a single JavaScript object\nconst stateTree = {\n  todos: [\n    { id: 1, text: "Learn Redux", completed: false },\n    { id: 2, text: "Build app", completed: true },\n  ],\n  filter: "ALL",\n  user: {\n    id: 123,\n    name: "John Doe",\n    isAuthenticated: true,\n  },\n  ui: {\n    loading: false,\n    errors: [],\n  },\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"store-implementation-simplified",children:"Store Implementation Simplified"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Simplified Redux store implementation\nfunction createStore(reducer, preloadedState) {\n  let currentState = preloadedState;\n  let listeners = [];\n  let isDispatching = false;\n\n  function getState() {\n    return currentState;\n  }\n\n  function subscribe(listener) {\n    listeners.push(listener);\n\n    // Return unsubscribe function\n    return function unsubscribe() {\n      const index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n\n  function dispatch(action) {\n    if (isDispatching) {\n      throw new Error("Reducers may not dispatch actions.");\n    }\n\n    try {\n      isDispatching = true;\n      currentState = reducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    // Notify all subscribers\n    listeners.forEach((listener) => listener());\n    return action;\n  }\n\n  // Initialize store with dummy action\n  dispatch({ type: "@@redux/INIT" });\n\n  return { dispatch, subscribe, getState };\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"action-dispatch-flow",children:"Action Dispatch Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// 1. Action is dispatched\nstore.dispatch(addTodo("Learn Redux"));\n\n// 2. Redux calls the reducer with current state and action\nconst newState = todoReducer(currentState, action);\n\n// 3. Store saves the new state\ncurrentState = newState;\n\n// 4. All subscribers are notified\nlisteners.forEach((listener) => listener());\n\n// 5. UI components re-render with new state\n'})}),"\n",(0,i.jsx)(n.h2,{id:"redux-toolkit-modern-redux",children:"Redux Toolkit (Modern Redux)"}),"\n",(0,i.jsxs)(n.p,{children:["Redux Toolkit is the official recommended approach for writing Redux logic, as mentioned in the ",(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux",children:"Redux repository"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-with-redux-toolkit",children:"Setting Up with Redux Toolkit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// store.js\nimport { configureStore } from "@reduxjs/toolkit";\nimport todoSlice from "./features/todoSlice";\n\nexport const store = configureStore({\n  reducer: {\n    todos: todoSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-slices",children:"Creating Slices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// features/todoSlice.js\nimport { createSlice } from "@reduxjs/toolkit";\n\nconst todoSlice = createSlice({\n  name: "todos",\n  initialState: {\n    items: [],\n    filter: "ALL",\n  },\n  reducers: {\n    addTodo: (state, action) => {\n      // RTK uses Immer internally, so we can "mutate" the state\n      state.items.push({\n        id: Date.now(),\n        text: action.payload,\n        completed: false,\n      });\n    },\n    toggleTodo: (state, action) => {\n      const todo = state.items.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    deleteTodo: (state, action) => {\n      state.items = state.items.filter((todo) => todo.id !== action.payload);\n    },\n    setFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n  },\n});\n\nexport const { addTodo, toggleTodo, deleteTodo, setFilter } = todoSlice.actions;\nexport default todoSlice.reducer;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"modern-react-hooks-usage",children:"Modern React Hooks Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// TodoApp.js\nimport React, { useState } from "react";\nimport { useSelector, useDispatch } from "react-redux";\nimport { addTodo, toggleTodo, deleteTodo } from "./features/todoSlice";\n\nconst TodoApp = () => {\n  const [inputText, setInputText] = useState("");\n  const todos = useSelector((state) => state.todos.items);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputText.trim()) {\n      dispatch(addTodo(inputText));\n      setInputText("");\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          placeholder="Add a todo..."\n        />\n        <button type="submit">Add</button>\n      </form>\n\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <span\n              style={{\n                textDecoration: todo.completed ? "line-through" : "none",\n                cursor: "pointer",\n              }}\n              onClick={() => dispatch(toggleTodo(todo.id))}\n            >\n              {todo.text}\n            </span>\n            <button onClick={() => dispatch(deleteTodo(todo.id))}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoApp;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"middleware-and-async-actions",children:"Middleware and Async Actions"}),"\n",(0,i.jsx)(n.h3,{id:"redux-thunk-for-async-actions",children:"Redux Thunk for Async Actions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Async action creator with Redux Thunk\nconst fetchTodos = () => async (dispatch, getState) => {\n  dispatch(setLoading(true));\n\n  try {\n    const response = await fetch("/api/todos");\n    const todos = await response.json();\n    dispatch(setTodos(todos));\n  } catch (error) {\n    dispatch(setError(error.message));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\n\n// Usage in component\nconst handleFetchTodos = () => {\n  dispatch(fetchTodos());\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rtk-query-for-data-fetching",children:"RTK Query for Data Fetching"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// api/todosApi.js\nimport { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";\n\nexport const todosApi = createApi({\n  reducerPath: "todosApi",\n  baseQuery: fetchBaseQuery({ baseUrl: "/api/" }),\n  tagTypes: ["Todo"],\n  endpoints: (builder) => ({\n    getTodos: builder.query({\n      query: () => "todos",\n      providesTags: ["Todo"],\n    }),\n    addTodo: builder.mutation({\n      query: (newTodo) => ({\n        url: "todos",\n        method: "POST",\n        body: newTodo,\n      }),\n      invalidatesTags: ["Todo"],\n    }),\n  }),\n});\n\nexport const { useGetTodosQuery, useAddTodoMutation } = todosApi;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-middleware",children:"Custom Middleware"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Logger middleware\nconst loggerMiddleware = (store) => (next) => (action) => {\n  console.log("Dispatching:", action);\n  const result = next(action);\n  console.log("Next state:", store.getState());\n  return result;\n};\n\n// Apply middleware\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(loggerMiddleware),\n});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(n.h3,{id:"selector-optimization",children:"Selector Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { createSelector } from "@reduxjs/toolkit";\n\n// Memoized selectors\nconst selectTodos = (state) => state.todos.items;\nconst selectFilter = (state) => state.todos.filter;\n\nconst selectFilteredTodos = createSelector(\n  [selectTodos, selectFilter],\n  (todos, filter) => {\n    switch (filter) {\n      case "ACTIVE":\n        return todos.filter((todo) => !todo.completed);\n      case "COMPLETED":\n        return todos.filter((todo) => todo.completed);\n      default:\n        return todos;\n    }\n  }\n);\n\n// Usage in component\nconst filteredTodos = useSelector(selectFilteredTodos);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"component-optimization",children:"Component Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React, { memo } from "react";\n\n// Memoize component to prevent unnecessary re-renders\nconst TodoItem = memo(({ todo, onToggle, onDelete }) => (\n  <li>\n    <span\n      style={{\n        textDecoration: todo.completed ? "line-through" : "none",\n      }}\n      onClick={() => onToggle(todo.id)}\n    >\n      {todo.text}\n    </span>\n    <button onClick={() => onDelete(todo.id)}>Delete</button>\n  </li>\n));\n\n// Use callback hooks for stable references\nconst TodoList = () => {\n  const todos = useSelector(selectFilteredTodos);\n  const dispatch = useDispatch();\n\n  const handleToggle = useCallback(\n    (id) => dispatch(toggleTodo(id)),\n    [dispatch]\n  );\n\n  const handleDelete = useCallback(\n    (id) => dispatch(deleteTodo(id)),\n    [dispatch]\n  );\n\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onToggle={handleToggle}\n          onDelete={handleDelete}\n        />\n      ))}\n    </ul>\n  );\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"state-structure",children:"State Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// \u2705 Good - Normalized state\nconst goodState = {\n  todos: {\n    byId: {\n      1: { id: 1, text: "Learn Redux", completed: false },\n      2: { id: 2, text: "Build app", completed: true },\n    },\n    allIds: [1, 2],\n  },\n  visibilityFilter: "ALL",\n};\n\n// \u274c Bad - Nested and denormalized\nconst badState = {\n  todos: [\n    {\n      id: 1,\n      text: "Learn Redux",\n      completed: false,\n      author: {\n        id: 1,\n        name: "John",\n        todos: [\n          /* circular reference */\n        ],\n      },\n    },\n  ],\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"action-design",children:"Action Design"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// \u2705 Good - Descriptive action types and consistent structure\nconst FETCH_USERS_REQUEST = "users/fetchRequest";\nconst FETCH_USERS_SUCCESS = "users/fetchSuccess";\nconst FETCH_USERS_FAILURE = "users/fetchFailure";\n\nconst fetchUsersRequest = () => ({\n  type: FETCH_USERS_REQUEST,\n});\n\nconst fetchUsersSuccess = (users) => ({\n  type: FETCH_USERS_SUCCESS,\n  payload: users,\n});\n\nconst fetchUsersFailure = (error) => ({\n  type: FETCH_USERS_FAILURE,\n  payload: error,\n  error: true,\n});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"reducer-guidelines",children:"Reducer Guidelines"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Good - Pure function, immutable updates\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    default:\n      return state;\n  }\n};\n\n// \u274c Bad - Mutating state\nconst badReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      state.todos.push(action.payload); // Direct mutation\n      return state;\n    default:\n      return state;\n  }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Redux provides a powerful and predictable way to manage application state. While the core concepts remain the same, modern Redux development with Redux Toolkit significantly simplifies the development experience while maintaining all the benefits of the original Redux architecture."}),"\n",(0,i.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Predictable State Management"}),": Single source of truth with unidirectional data flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging and Time Travel"}),": Excellent developer tools for debugging and state inspection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Middleware Ecosystem"}),": Powerful middleware system for handling side effects and async actions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Optimization"}),": Memoization and selective updates for optimal performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modern Tooling"}),": Redux Toolkit provides excellent developer experience and best practices"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["As highlighted in the ",(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux",children:"Redux GitHub repository"}),", Redux continues to be a valuable tool for organizing application state, especially when combined with modern tools like Redux Toolkit and RTK Query."]}),"\n",(0,i.jsx)(n.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://redux.js.org/",children:"Redux Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://redux-toolkit.js.org/",children:"Redux Toolkit Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/reduxjs/redux",children:"Redux GitHub Repository"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://react-redux.js.org/",children:"React-Redux Documentation"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);