"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2097],{3719:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"project-detail/react-native","title":"React Native: Under the Hood","description":"Table of Contents","source":"@site/docs/project-detail/react-native.md","sourceDirName":"project-detail","slug":"/project-detail/react-native","permalink":"/frontend-system-design/docs/project-detail/react-native","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/react-native.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"React Virtuoso: Deep Dive into Virtual Scrolling","permalink":"/frontend-system-design/docs/project-detail/react-virtuoso"},"next":{"title":"Dexie.js and IndexedDB: Under the Hood","permalink":"/frontend-system-design/docs/project-detail/dexie-and-indexed-db"}}');var t=r(4848),a=r(8453);const o={},s="React Native: Under the Hood",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Advantages",id:"key-advantages",level:3},{value:"Getting Started with React Native",id:"getting-started-with-react-native",level:2},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Creating Your First App",id:"creating-your-first-app",level:3},{value:"Basic Component Structure",id:"basic-component-structure",level:3},{value:"React Native Architecture Deep Dive",id:"react-native-architecture-deep-dive",level:2},{value:"Thread Architecture",id:"thread-architecture",level:3},{value:"JavaScript Engine Integration",id:"javascript-engine-integration",level:3},{value:"Hermes JavaScript Engine",id:"hermes-javascript-engine",level:4},{value:"Engine Configuration (android/app/build.gradle)",id:"engine-configuration-androidappbuildgradle",level:4},{value:"The Bridge System",id:"the-bridge-system",level:2},{value:"Legacy Bridge Architecture",id:"legacy-bridge-architecture",level:3},{value:"Bridge Message Flow",id:"bridge-message-flow",level:3},{value:"Bridge Performance Considerations",id:"bridge-performance-considerations",level:3},{value:"Build Process: From JavaScript to Native Apps",id:"build-process-from-javascript-to-native-apps",level:2},{value:"Metro Bundler",id:"metro-bundler",level:3},{value:"iOS Build Process",id:"ios-build-process",level:3},{value:"Xcode Integration",id:"xcode-integration",level:4},{value:"iOS Native Bridge Setup (AppDelegate.m)",id:"ios-native-bridge-setup-appdelegatem",level:4},{value:"Android Build Process",id:"android-build-process",level:3},{value:"Gradle Build Configuration",id:"gradle-build-configuration",level:4},{value:"Android Native Bridge Setup (MainApplication.java)",id:"android-native-bridge-setup-mainapplicationjava",level:4},{value:"Native Modules and Platform Integration",id:"native-modules-and-platform-integration",level:2},{value:"Creating iOS Native Modules",id:"creating-ios-native-modules",level:3},{value:"CalendarManager.h",id:"calendarmanagerh",level:4},{value:"CalendarManager.m",id:"calendarmanagerm",level:4},{value:"Creating Android Native Modules",id:"creating-android-native-modules",level:3},{value:"CalendarModule.java",id:"calendarmodulejava",level:4},{value:"JavaScript Usage of Native Modules",id:"javascript-usage-of-native-modules",level:3},{value:"Push Notifications Implementation",id:"push-notifications-implementation",level:2},{value:"Setting Up Push Notifications",id:"setting-up-push-notifications",level:3},{value:"Install Dependencies",id:"install-dependencies",level:4},{value:"iOS Configuration",id:"ios-configuration",level:4},{value:"Android Configuration",id:"android-configuration",level:4},{value:"React Native Push Notification Implementation",id:"react-native-push-notification-implementation",level:4},{value:"The New Architecture: Fabric and TurboModules",id:"the-new-architecture-fabric-and-turbomodules",level:2},{value:"JavaScript Interface (JSI)",id:"javascript-interface-jsi",level:3},{value:"TurboModules Implementation",id:"turbomodules-implementation",level:3},{value:"Fabric Renderer",id:"fabric-renderer",level:3},{value:"Performance Optimization Strategies",id:"performance-optimization-strategies",level:2},{value:"Bundle Size Optimization",id:"bundle-size-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Image Optimization",id:"image-optimization",level:3},{value:"Real-World Implementation Examples",id:"real-world-implementation-examples",level:2},{value:"Navigation Setup with React Navigation",id:"navigation-setup-with-react-navigation",level:3},{value:"State Management with Redux Toolkit",id:"state-management-with-redux-toolkit",level:3},{value:"Debugging and Development Tools",id:"debugging-and-development-tools",level:2},{value:"Flipper Integration",id:"flipper-integration",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Best Practices and Common Pitfalls",id:"best-practices-and-common-pitfalls",level:2},{value:"Performance Best Practices",id:"performance-best-practices",level:3},{value:"Memory Management",id:"memory-management-1",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"react-native-under-the-hood",children:"React Native: Under the Hood"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#getting-started-with-react-native",children:"Getting Started with React Native"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#react-native-architecture-deep-dive",children:"React Native Architecture Deep Dive"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-bridge-system",children:"The Bridge System"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#build-process-from-javascript-to-native-apps",children:"Build Process: From JavaScript to Native Apps"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#native-modules-and-platform-integration",children:"Native Modules and Platform Integration"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#push-notifications-implementation",children:"Push Notifications Implementation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#the-new-architecture-fabric-and-turbomodules",children:"The New Architecture: Fabric and TurboModules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#performance-optimization-strategies",children:"Performance Optimization Strategies"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#real-world-implementation-examples",children:"Real-World Implementation Examples"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#debugging-and-development-tools",children:"Debugging and Development Tools"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#best-practices-and-common-pitfalls",children:"Best Practices and Common Pitfalls"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["React Native is a powerful framework developed by ",(0,t.jsx)(n.a,{href:"https://github.com/facebook/react-native",children:"Meta (Facebook)"})," that enables developers to build native mobile applications using JavaScript and React. Unlike hybrid frameworks that run in a WebView, React Native compiles to actual native components, providing near-native performance while maintaining the development velocity of web technologies."]}),"\n",(0,t.jsx)(n.h3,{id:"key-advantages",children:"Key Advantages"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Write Once, Run Anywhere"}),": Share code between iOS and Android platforms"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Native Performance"}),": Direct compilation to native components"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Fast Development Cycle"}),": Hot reloading and live reload capabilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Large Ecosystem"}),": Extensive library and community support"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Native API Access"}),": Full access to platform-specific APIs"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started-with-react-native",children:"Getting Started with React Native"}),"\n",(0,t.jsx)(n.h3,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,t.jsx)(n.p,{children:"Setting up your React Native development environment is crucial for a smooth development experience. This process varies depending on your target platform and operating system."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What this setup accomplishes:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Installs the React Native CLI for project management"}),"\n",(0,t.jsx)(n.li,{children:"Sets up iOS development tools (macOS only)"}),"\n",(0,t.jsx)(n.li,{children:"Configures Android development environment"}),"\n",(0,t.jsx)(n.li,{children:"Prepares device simulators/emulators"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Prerequisites:"})," Node.js (LTS version), Git, and platform-specific tools"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Step 1: Install Node.js (LTS version recommended)\r\n# Download from https://nodejs.org/\r\n# This provides the JavaScript runtime and npm package manager\r\n\r\n# Step 2: Install React Native CLI globally\r\n# This tool helps create, build, and manage React Native projects\r\nnpm install -g @react-native-community/cli\r\n\r\n# Step 3: iOS development setup (macOS only)\r\n# Install Xcode from App Store (required for iOS compilation)\r\n# Install CocoaPods (dependency manager for iOS projects)\r\nsudo gem install cocoapods\r\n\r\n# Step 4: Android development setup\r\n# Install Android Studio from https://developer.android.com/studio\r\n# Set up Android SDK through Android Studio SDK Manager\r\n# Create virtual device (AVD) for testing\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Expected outcome:"})," A fully configured development environment capable of building and running React Native apps on iOS and/or Android platforms."]}),"\n",(0,t.jsx)(n.h3,{id:"creating-your-first-app",children:"Creating Your First App"}),"\n",(0,t.jsx)(n.p,{children:"This section demonstrates how to create, initialize, and run your first React Native application. The process involves setting up the project structure, starting the development server, and launching the app on your chosen platform."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What this process does:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates a new React Native project with all necessary files and dependencies"}),"\n",(0,t.jsx)(n.li,{children:"Initializes the Metro bundler (JavaScript packager)"}),"\n",(0,t.jsx)(n.li,{children:"Builds and deploys the app to iOS Simulator or Android Emulator"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," Project name and target platform\r\n",(0,t.jsx)(n.strong,{children:"Output:"})," A running React Native app on your device/simulator"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Step 1: Create a new React Native project\r\n# This command scaffolds a complete project structure with:\r\n# - JavaScript/TypeScript source files\r\n# - Native iOS and Android project files\r\n# - Package.json with required dependencies\r\n# - Configuration files for Metro bundler\r\nnpx react-native init MyAwesomeApp\r\n\r\n# Step 2: Navigate to project directory\r\ncd MyAwesomeApp\r\n\r\n# Step 3: Start Metro bundler (JavaScript packager)\r\n# Metro compiles JavaScript code and serves it to the app\r\n# Keep this terminal window open during development\r\nnpx react-native start\r\n\r\n# Step 4: Run on iOS (macOS only)\r\n# This command:\r\n# - Builds the iOS project using Xcode\r\n# - Installs the app on iOS Simulator\r\n# - Connects the app to Metro bundler for hot reloading\r\nnpx react-native run-ios\r\n\r\n# Alternative: Run on Android\r\n# This command:\r\n# - Builds the Android project using Gradle\r\n# - Installs the app on Android Emulator or connected device\r\n# - Enables hot reloading for development\r\nnpx react-native run-android\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Expected result:"})," Your app should launch on the simulator/emulator displaying the default React Native welcome screen with hot reloading enabled for development."]}),"\n",(0,t.jsx)(n.h3,{id:"basic-component-structure",children:"Basic Component Structure"}),"\n",(0,t.jsx)(n.p,{children:"This example demonstrates the fundamental structure of a React Native application, showcasing essential components and styling patterns. Understanding this structure is crucial for building any React Native app."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What this component demonstrates:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Import statements for core React Native components"}),"\n",(0,t.jsx)(n.li,{children:"Functional component with hooks"}),"\n",(0,t.jsx)(n.li,{children:"Event handling and user interaction"}),"\n",(0,t.jsx)(n.li,{children:"StyleSheet usage for component styling"}),"\n",(0,t.jsx)(n.li,{children:"Safe area handling for different device screens"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key components used:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SafeAreaView"}),": Ensures content doesn't overlap with system UI"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ScrollView"}),": Provides scrollable content area"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TouchableOpacity"}),": Creates touchable button with opacity feedback"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"StatusBar"}),": Controls the app's status bar appearance"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Input:"})," User touch interaction\r\n",(0,t.jsx)(n.strong,{children:"Output:"})," Visual feedback and alert dialog"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Import React and essential React Native components\r\nimport React from "react";\r\nimport {\r\n  SafeAreaView, // Renders content within safe area boundaries\r\n  ScrollView, // Provides scrollable container for content\r\n  StatusBar, // Controls status bar appearance\r\n  StyleSheet, // Creates optimized style objects\r\n  Text, // Displays text content\r\n  View, // Basic container component\r\n  TouchableOpacity, // Touchable component with opacity feedback\r\n  Alert, // Shows native alert dialogs\r\n} from "react-native";\r\n\r\nconst App = () => {\r\n  // Event handler function for button press\r\n  // Shows a native alert dialog when called\r\n  const handlePress = () => {\r\n    Alert.alert("Hello", "Welcome to React Native!");\r\n  };\r\n\r\n  return (\r\n    // SafeAreaView ensures content doesn\'t overlap with notches/status bars\r\n    <SafeAreaView style={styles.container}>\r\n      {/* StatusBar configuration for iOS/Android */}\r\n      <StatusBar barStyle="dark-content" />\r\n\r\n      {/* ScrollView allows content to be scrollable if it exceeds screen height */}\r\n      <ScrollView contentInsetAdjustmentBehavior="automatic">\r\n        {/* Main content container */}\r\n        <View style={styles.body}>\r\n          {/* App title text */}\r\n          <Text style={styles.title}>My Awesome App</Text>\r\n\r\n          {/* Interactive button with touch feedback */}\r\n          <TouchableOpacity style={styles.button} onPress={handlePress}>\r\n            <Text style={styles.buttonText}>Press Me</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\n// StyleSheet creates optimized style objects\r\n// Styles are similar to CSS but use camelCase property names\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1, // Takes full available height\r\n    backgroundColor: "#f5f5f5", // Light gray background\r\n  },\r\n  body: {\r\n    padding: 20, // 20 units padding on all sides\r\n    alignItems: "center", // Center content horizontally\r\n  },\r\n  title: {\r\n    fontSize: 24, // Large text size\r\n    fontWeight: "bold", // Bold font weight\r\n    marginBottom: 20, // Space below title\r\n    color: "#333", // Dark gray text color\r\n  },\r\n  button: {\r\n    backgroundColor: "#007AFF", // iOS blue background\r\n    paddingHorizontal: 20, // Horizontal padding\r\n    paddingVertical: 10, // Vertical padding\r\n    borderRadius: 8, // Rounded corners\r\n  },\r\n  buttonText: {\r\n    color: "white", // White text color\r\n    fontSize: 16, // Medium text size\r\n    fontWeight: "600", // Semi-bold font weight\r\n  },\r\n});\r\n\r\n// Export component as default export\r\nexport default App;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"react-native-architecture-deep-dive",children:"React Native Architecture Deep Dive"}),"\n",(0,t.jsx)(n.h3,{id:"thread-architecture",children:"Thread Architecture"}),"\n",(0,t.jsx)(n.p,{children:"React Native's multi-threaded architecture is designed to maintain 60 FPS performance by separating JavaScript execution from UI rendering. Understanding this architecture is crucial for optimizing app performance and debugging issues."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Why multiple threads matter:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Prevents JavaScript execution from blocking UI updates"}),"\n",(0,t.jsx)(n.li,{children:"Enables smooth animations and user interactions"}),"\n",(0,t.jsx)(n.li,{children:"Allows background processing without affecting the main thread"}),"\n",(0,t.jsx)(n.li,{children:"Provides better resource utilization on multi-core devices"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Thread responsibilities:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JavaScript Thread"}),": Handles React components, business logic, and state management"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Native Thread"}),": Manages UI rendering, native API calls, and hardware interactions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bridge Layer"}),": Facilitates communication between JavaScript and native code"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Performance implications:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Heavy JavaScript operations can block the JS thread"}),"\n",(0,t.jsx)(n.li,{children:"UI animations run on the native thread for smooth performance"}),"\n",(0,t.jsx)(n.li,{children:"Bridge communication has overhead that should be minimized"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                  React Native App                       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502  JavaScript Thread          \u2502    Native Thread         \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 React Components      \u2502    \u251c\u2500\u2500\u2500 UI Components    \u2502\r\n\u2502  \u2502     \u2022 Component rendering \u2502    \u2502     \u2022 View rendering\u2502\r\n\u2502  \u2502     \u2022 Props/state updates \u2502    \u2502     \u2022 Layout calc   \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Business Logic        \u2502    \u251c\u2500\u2500\u2500 Native APIs      \u2502\r\n\u2502  \u2502     \u2022 App logic          \u2502    \u2502     \u2022 Camera, GPS    \u2502\r\n\u2502  \u2502     \u2022 Data processing    \u2502    \u2502     \u2022 File system    \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 State Management      \u2502    \u251c\u2500\u2500\u2500 Platform APIs    \u2502\r\n\u2502  \u2502     \u2022 Redux/Context      \u2502    \u2502     \u2022 Notifications  \u2502\r\n\u2502  \u2502     \u2022 Local storage      \u2502    \u2502     \u2022 Background tasks\u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Event Handling        \u2502    \u2514\u2500\u2500\u2500 Hardware APIs    \u2502\r\n\u2502       \u2022 Touch events        \u2502         \u2022 Sensors        \u2502\r\n\u2502       \u2022 Navigation          \u2502         \u2022 Device info    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                    Bridge Layer                         \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Message Serialization                            \u2502\r\n\u2502  \u2502     \u2022 JSON conversion of data                       \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Async Communication                              \u2502\r\n\u2502  \u2502     \u2022 Non-blocking message passing                 \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Batched Updates                                  \u2502\r\n\u2502       \u2022 Grouped operations for efficiency              \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502            Native Platform Layer                       \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 iOS (Objective-C/Swift)                         \u2502\r\n\u2502  \u2502     \u2022 UIKit framework integration                  \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Android (Java/Kotlin)                           \u2502\r\n\u2502       \u2022 Android View system integration               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"javascript-engine-integration",children:"JavaScript Engine Integration"}),"\n",(0,t.jsx)(n.p,{children:"The JavaScript engine is the runtime environment that executes your React Native app's JavaScript code. React Native supports multiple engines, with Hermes being the preferred choice for its performance optimizations."}),"\n",(0,t.jsx)(n.h4,{id:"hermes-javascript-engine",children:"Hermes JavaScript Engine"}),"\n",(0,t.jsx)(n.p,{children:"Hermes is Meta's open-source JavaScript engine optimized for React Native. It provides significant performance improvements, especially for app startup time and memory usage."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Hermes benefits:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Faster app startup time (50-70% improvement)"}),"\n",(0,t.jsx)(n.li,{children:"Reduced memory footprint"}),"\n",(0,t.jsx)(n.li,{children:"Smaller app bundle size"}),"\n",(0,t.jsx)(n.li,{children:"Better performance on lower-end devices"}),"\n",(0,t.jsx)(n.li,{children:"Ahead-of-time (AOT) compilation"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"How to detect and use Hermes features:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Check if Hermes is enabled in your app\r\n// This is useful for conditional logic or debugging\r\nconst isHermesEnabled = !!global.HermesInternal;\r\nconsole.log("Hermes enabled:", isHermesEnabled);\r\n\r\n// Access Hermes-specific functionality when available\r\nif (global.HermesInternal) {\r\n  // Get runtime information and version details\r\n  // Useful for debugging and performance monitoring\r\n  const hermesVersion =\r\n    global.HermesInternal.getRuntimeProperties()["OSS Release Version"];\r\n  console.log("Hermes version:", hermesVersion);\r\n\r\n  // Access additional Hermes runtime properties\r\n  const runtimeProps = global.HermesInternal.getRuntimeProperties();\r\n  console.log("Build type:", runtimeProps["Build"]);\r\n  console.log("Bytecode version:", runtimeProps["Bytecode Version"]);\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Expected output:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'If Hermes is enabled: "Hermes enabled: true" and version information'}),"\n",(0,t.jsx)(n.li,{children:'If using JSC: "Hermes enabled: false"'}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"engine-configuration-androidappbuildgradle",children:"Engine Configuration (android/app/build.gradle)"}),"\n",(0,t.jsx)(n.p,{children:"This configuration enables Hermes for Android builds. The settings control when Hermes is used and how it compiles your JavaScript code."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configuration parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"enableHermes"}),": Toggles Hermes engine on/off"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hermesCommand"}),": Path to Hermes compiler binary"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bundleInDebug"}),": Whether to create bundles for debug builds"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"bundleInRelease"}),": Whether to create bundles for release builds"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:'// Android Hermes configuration\r\n// Add this to android/app/build.gradle\r\nproject.ext.react = [\r\n    enableHermes: true,  // Enable Hermes JS engine for better performance\r\n    // Path to Hermes compiler - automatically resolves to correct binary\r\n    hermesCommand: "../../node_modules/hermes-engine/%OS-BIN%/hermes",\r\n    bundleInDebug: false,  // Skip bundling in debug (faster dev builds)\r\n    bundleInRelease: true, // Always bundle for release (optimized)\r\n]\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"For iOS"}),", Hermes is enabled by default in React Native 0.70+. To manually configure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# ios/Podfile\r\nuse_react_native!(\r\n  :path => config[:reactNativePath],\r\n  :hermes_enabled => flags[:hermes_enabled]\r\n)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"the-bridge-system",children:"The Bridge System"}),"\n",(0,t.jsx)(n.p,{children:"The bridge system is React Native's core communication mechanism between JavaScript and native code. While being replaced by the new architecture (JSI), understanding the bridge is essential for working with existing apps and third-party libraries."}),"\n",(0,t.jsx)(n.h3,{id:"legacy-bridge-architecture",children:"Legacy Bridge Architecture"}),"\n",(0,t.jsx)(n.p,{children:"The React Native bridge enables asynchronous, serialized communication between the JavaScript thread and native platforms. All data must be JSON-serializable, and communication is batched for performance."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Bridge characteristics:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Asynchronous"}),": All communication is non-blocking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Serialized"}),": Data converted to JSON strings for transfer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Batched"}),": Multiple operations grouped together"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"One-way"}),": No direct return values, uses callbacks/promises"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"When to use the bridge:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Accessing platform-specific APIs"}),"\n",(0,t.jsx)(n.li,{children:"Integrating existing native libraries"}),"\n",(0,t.jsx)(n.li,{children:"Performing computationally intensive operations"}),"\n",(0,t.jsx)(n.li,{children:"Hardware access (camera, sensors, GPS)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Communication flow:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"JavaScript calls native module method"}),"\n",(0,t.jsx)(n.li,{children:"Arguments serialized to JSON"}),"\n",(0,t.jsx)(n.li,{children:"Message queued for batch transfer"}),"\n",(0,t.jsx)(n.li,{children:"Native side deserializes and executes"}),"\n",(0,t.jsx)(n.li,{children:"Result serialized and sent back to JavaScript"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Bridge communication example demonstrating async native module calls\r\nimport { NativeModules } from "react-native";\r\n\r\n// Access the native calendar module through the bridge\r\n// All native modules are available through NativeModules object\r\nconst { CalendarModule } = NativeModules;\r\n\r\n// Asynchronous bridge call - all bridge calls return promises\r\n// Input: Event title and location (must be JSON-serializable)\r\n// Output: Promise resolving to event ID or rejecting with error\r\nCalendarModule.createCalendarEvent("Party", "My House")\r\n  .then((eventId) => {\r\n    // Success callback - event was created successfully\r\n    console.log("Event created with ID:", eventId);\r\n    // You can now use this eventId for further operations\r\n  })\r\n  .catch((error) => {\r\n    // Error callback - something went wrong on native side\r\n    console.error("Failed to create event:", error);\r\n    // Handle error appropriately (show user message, retry, etc.)\r\n  });\r\n\r\n// Example with multiple parameters and error handling\r\nconst createAdvancedEvent = async () => {\r\n  try {\r\n    const eventData = {\r\n      title: "Team Meeting",\r\n      location: "Conference Room A",\r\n      startDate: new Date().toISOString(),\r\n      duration: 3600, // 1 hour in seconds\r\n      attendees: ["john@company.com", "jane@company.com"],\r\n    };\r\n\r\n    // Note: Complex objects need to be JSON-serializable\r\n    const eventId = await CalendarModule.createAdvancedEvent(eventData);\r\n    return eventId;\r\n  } catch (error) {\r\n    console.error("Advanced event creation failed:", error);\r\n    throw error;\r\n  }\r\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"bridge-message-flow",children:"Bridge Message Flow"}),"\n",(0,t.jsx)(n.p,{children:"This section demonstrates how messages flow through the React Native bridge system. Understanding this flow helps optimize performance and debug communication issues."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Message flow process:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"JavaScript initiates native call"}),"\n",(0,t.jsx)(n.li,{children:"Arguments serialized to JSON format"}),"\n",(0,t.jsx)(n.li,{children:"Message queued in JavaScript message queue"}),"\n",(0,t.jsx)(n.li,{children:"Bridge batches and transfers messages"}),"\n",(0,t.jsx)(n.li,{children:"Native side deserializes and processes"}),"\n",(0,t.jsx)(n.li,{children:"Results sent back through the same process"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Performance considerations:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Messages are batched to reduce overhead"}),"\n",(0,t.jsx)(n.li,{children:"Large objects can cause serialization delays"}),"\n",(0,t.jsx)(n.li,{children:"Frequent bridge calls can impact performance"}),"\n",(0,t.jsx)(n.li,{children:"Use bridge calls judiciously, not in tight loops"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// JavaScript side - demonstrates internal bridge message handling\r\n// Note: This is simplified pseudo-code showing internal bridge mechanics\r\nconst sendBridgeMessage = (module, method, args) => {\r\n  // Step 1: Message is serialized to JSON\r\n  // All arguments must be JSON-serializable (strings, numbers, objects, arrays)\r\n  // Functions, class instances, and undefined values are not supported\r\n  const message = JSON.stringify({\r\n    module, // Name of the native module (e.g., "CalendarModule")\r\n    method, // Method name to call (e.g., "createEvent")\r\n    args, // Array of arguments to pass to the method\r\n    callId: Math.random(), // Unique identifier for tracking this call\r\n  });\r\n\r\n  // Step 2: Message is queued for batch processing\r\n  // React Native batches multiple calls together for efficiency\r\n  // This prevents overwhelming the bridge with individual messages\r\n  MessageQueue.enqueueNativeCall(message);\r\n\r\n  // Step 3: Bridge flushes messages asynchronously\r\n  // Messages are sent in batches during the next run loop\r\n  // This happens automatically but can be triggered manually\r\n  Bridge.flushQueue();\r\n};\r\n\r\n// Example of problematic bridge usage (avoid this pattern)\r\nconst inefficientBridgeUsage = () => {\r\n  // \u274c Bad: Multiple individual bridge calls in a loop\r\n  for (let i = 0; i < 100; i++) {\r\n    NativeModules.DataModule.processItem(i);\r\n  }\r\n};\r\n\r\n// Example of optimized bridge usage\r\nconst efficientBridgeUsage = () => {\r\n  // \u2705 Good: Single bridge call with batched data\r\n  const items = Array.from({ length: 100 }, (_, i) => i);\r\n  NativeModules.DataModule.processBatch(items);\r\n};\r\n\r\n// Native side receives and processes messages (conceptual flow)\r\n// Platform-specific implementation handles:\r\n// 1. Message deserialization from JSON\r\n// 2. Module lookup and method resolution\r\n// 3. Argument validation and type conversion\r\n// 4. Method invocation on native modules\r\n// 5. Result serialization and return to JavaScript\n'})}),"\n",(0,t.jsx)(n.h3,{id:"bridge-performance-considerations",children:"Bridge Performance Considerations"}),"\n",(0,t.jsx)(n.p,{children:"Bridge communication has inherent overhead due to serialization, batching, and thread switching. Following performance best practices ensures your app maintains smooth performance."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Performance bottlenecks:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"JSON serialization/deserialization overhead"}),"\n",(0,t.jsx)(n.li,{children:"Thread context switching delays"}),"\n",(0,t.jsx)(n.li,{children:"Large object transfer costs"}),"\n",(0,t.jsx)(n.li,{children:"Frequent small operations"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Optimization strategies:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Batch multiple operations together"}),"\n",(0,t.jsx)(n.li,{children:"Minimize bridge call frequency"}),"\n",(0,t.jsx)(n.li,{children:"Use native modules for heavy computations"}),"\n",(0,t.jsx)(n.li,{children:"Cache results when possible"}),"\n",(0,t.jsx)(n.li,{children:"Use event emitters for real-time updates"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// \u274c Avoid frequent bridge calls - causes performance issues\r\nconst inefficientLocationTracking = () => {\r\n  // This creates excessive bridge traffic and battery drain\r\n  setInterval(() => {\r\n    // Called every 100ms = 10 calls per second\r\n    NativeModules.LocationManager.getCurrentPosition();\r\n  }, 100);\r\n};\r\n\r\n// \u2705 Batch operations and use efficient patterns\r\nconst batchOperations = async () => {\r\n  // Group multiple database operations into a single bridge call\r\n  // This reduces overhead and improves performance\r\n  const operations = [\r\n    NativeModules.DatabaseManager.getUser(1),\r\n    NativeModules.DatabaseManager.getUser(2),\r\n    NativeModules.DatabaseManager.getUser(3),\r\n  ];\r\n\r\n  // Execute all operations concurrently\r\n  // Results arrive together, reducing bridge round-trips\r\n  const results = await Promise.all(operations);\r\n  return results;\r\n};\r\n\r\n// \u2705 Better: Use event emitters for real-time data\r\nconst efficientLocationTracking = () => {\r\n  // Set up location tracking once\r\n  NativeModules.LocationManager.startLocationTracking({\r\n    interval: 1000, // 1 second intervals\r\n    accuracy: "high",\r\n  });\r\n\r\n  // Listen for location updates via events (no bridge calls)\r\n  const subscription = NativeEventEmitter.addListener(\r\n    "LocationUpdate",\r\n    (location) => {\r\n      console.log("New location:", location);\r\n      // Update UI with new location data\r\n    }\r\n  );\r\n\r\n  // Clean up when done\r\n  return () => {\r\n    NativeModules.LocationManager.stopLocationTracking();\r\n    subscription.remove();\r\n  };\r\n};\r\n\r\n// \u2705 Cache expensive operations\r\nclass BridgeCache {\r\n  constructor() {\r\n    this.cache = new Map();\r\n  }\r\n\r\n  async getDataWithCache(key) {\r\n    // Check cache first to avoid unnecessary bridge calls\r\n    if (this.cache.has(key)) {\r\n      return this.cache.get(key);\r\n    }\r\n\r\n    // Only make bridge call if data not in cache\r\n    const data = await NativeModules.DataManager.getData(key);\r\n    this.cache.set(key, data);\r\n    return data;\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"build-process-from-javascript-to-native-apps",children:"Build Process: From JavaScript to Native Apps"}),"\n",(0,t.jsx)(n.p,{children:"The React Native build process transforms your JavaScript code into native mobile applications. This complex process involves multiple tools and steps that compile, bundle, and package your code for deployment."}),"\n",(0,t.jsx)(n.h3,{id:"metro-bundler",children:"Metro Bundler"}),"\n",(0,t.jsx)(n.p,{children:"Metro is React Native's JavaScript bundler, similar to Webpack for web applications. It handles module resolution, code transformation, and bundle creation for both development and production builds."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Metro's responsibilities:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Transforms modern JavaScript (ES6+, JSX) to compatible code"}),"\n",(0,t.jsx)(n.li,{children:"Resolves module dependencies and creates dependency graph"}),"\n",(0,t.jsx)(n.li,{children:"Bundles JavaScript files into single or multiple bundles"}),"\n",(0,t.jsx)(n.li,{children:"Provides hot reloading and fast refresh for development"}),"\n",(0,t.jsx)(n.li,{children:"Optimizes code for production builds"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configuration benefits:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Custom module resolution for cleaner imports"}),"\n",(0,t.jsx)(n.li,{children:"Performance optimizations for faster builds"}),"\n",(0,t.jsx)(n.li,{children:"Asset handling and transformation"}),"\n",(0,t.jsx)(n.li,{children:"Code splitting and lazy loading support"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Metro workflow:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Reads entry point (usually index.js)"}),"\n",(0,t.jsx)(n.li,{children:"Resolves all dependencies recursively"}),"\n",(0,t.jsx)(n.li,{children:"Transforms each file (TypeScript, JSX, etc.)"}),"\n",(0,t.jsx)(n.li,{children:"Creates bundle with all modules"}),"\n",(0,t.jsx)(n.li,{children:"Serves bundle to React Native app"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// metro.config.js - Comprehensive Metro configuration\r\nmodule.exports = {\r\n  // Transformer configuration - how files are processed\r\n  transformer: {\r\n    getTransformOptions: async () => ({\r\n      transform: {\r\n        experimentalImportSupport: false, // Disable experimental features for stability\r\n        inlineRequires: true, // Inline require() calls for better performance\r\n      },\r\n    }),\r\n    // Enable additional file types\r\n    babelTransformerPath: require.resolve(\r\n      "metro-react-native-babel-transformer"\r\n    ),\r\n    assetPlugins: ["metro-asset-plugin"], // Custom asset processing\r\n  },\r\n\r\n  // Resolver configuration - how modules are found\r\n  resolver: {\r\n    // Create path aliases for cleaner imports\r\n    // Instead of: import Button from \'../../../components/Button\'\r\n    // Use: import Button from \'@components/Button\'\r\n    alias: {\r\n      "@components": "./src/components",\r\n      "@utils": "./src/utils",\r\n      "@screens": "./src/screens",\r\n      "@assets": "./src/assets",\r\n    },\r\n    // File extensions to resolve\r\n    sourceExts: ["js", "json", "ts", "tsx", "jsx"],\r\n    // Asset file extensions\r\n    assetExts: ["png", "jpg", "jpeg", "gif", "svg", "mp4", "webm"],\r\n  },\r\n\r\n  // Serializer configuration - how bundles are created\r\n  serializer: {\r\n    createModuleIdFactory: function () {\r\n      return function (path) {\r\n        // Custom module ID generation for better caching\r\n        // Creates consistent IDs across builds for better caching\r\n        return path.substr(1).replace(/\\//g, "_");\r\n      };\r\n    },\r\n    // Customize what gets included in the bundle\r\n    processModuleFilter: function (module) {\r\n      // Exclude test files and development dependencies from production bundle\r\n      return (\r\n        !module.path.includes("__tests__") &&\r\n        !module.path.includes("node_modules/@testing-library")\r\n      );\r\n    },\r\n  },\r\n\r\n  // Watcher configuration for development\r\n  watchFolders: [\r\n    // Watch additional folders for changes during development\r\n    path.resolve(__dirname, "shared"), // Shared code between projects\r\n  ],\r\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Expected outcome:"})," Optimized JavaScript bundle ready for deployment, with faster builds and better development experience."]}),"\n",(0,t.jsx)(n.h3,{id:"ios-build-process",children:"iOS Build Process"}),"\n",(0,t.jsx)(n.p,{children:"The iOS build process transforms your React Native app into a native iOS application. This involves several steps from dependency management to final app packaging for the App Store."}),"\n",(0,t.jsx)(n.h4,{id:"xcode-integration",children:"Xcode Integration"}),"\n",(0,t.jsx)(n.p,{children:"The iOS build process leverages Xcode's build system and CocoaPods for dependency management. Understanding these steps helps troubleshoot build issues and optimize build times."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Build process overview:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install native dependencies via CocoaPods"}),"\n",(0,t.jsx)(n.li,{children:"Compile native code and React Native framework"}),"\n",(0,t.jsx)(n.li,{children:"Bundle JavaScript code via Metro"}),"\n",(0,t.jsx)(n.li,{children:"Link everything into final iOS app"}),"\n",(0,t.jsx)(n.li,{children:"Code sign for distribution"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Common build configurations:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Debug"}),": Faster builds, includes debugging symbols, connects to Metro"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Release"}),": Optimized builds, minified JavaScript, ready for distribution"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Build outputs:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".app"})," file for simulator/device testing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".xcarchive"})," for App Store submission"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:".ipa"})," file for distribution"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# iOS build process steps with detailed explanations\r\n\r\n# Step 1: Navigate to iOS project directory\r\ncd ios\r\n\r\n# Step 2: Install CocoaPods dependencies\r\n# CocoaPods manages native iOS dependencies (similar to npm for JavaScript)\r\n# This creates .xcworkspace file that includes all dependencies\r\npod install\r\n\r\n# Alternative: Clean install if dependencies are corrupted\r\n# pod deintegrate  # Remove existing integration\r\n# pod install     # Fresh installation\r\n\r\n# Step 3: Build for device/simulator (development/testing)\r\n# This builds the app without archiving, useful for testing\r\nxcodebuild -workspace MyApp.xcworkspace \\\r\n  -scheme MyApp \\                                    # Build scheme to use\r\n  -configuration Release \\                           # Release or Debug configuration\r\n  -destination 'platform=iOS Simulator,name=iPhone 14' \\  # Target device\r\n  build\r\n\r\n# Alternative destinations:\r\n# -destination 'platform=iOS,name=Your Device Name'  # Physical device\r\n# -destination 'generic/platform=iOS'                # Generic iOS device\r\n\r\n# Step 4: Archive for App Store submission\r\n# Creates .xcarchive file needed for App Store Connect upload\r\nxcodebuild -workspace MyApp.xcworkspace \\\r\n  -scheme MyApp \\\r\n  -configuration Release \\                           # Always use Release for App Store\r\n  archive \\\r\n  -archivePath MyApp.xcarchive                      # Output archive path\r\n\r\n# Step 5: Export IPA for distribution (additional step)\r\n# xcodebuild -exportArchive \\\r\n#   -archivePath MyApp.xcarchive \\\r\n#   -exportPath ./build \\\r\n#   -exportOptionsPlist exportOptions.plist\r\n\r\n# Common troubleshooting commands:\r\n# xcodebuild clean                                  # Clean build artifacts\r\n# pod repo update                                   # Update CocoaPods specs\r\n# rm -rf node_modules && npm install               # Reset JavaScript dependencies\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Expected results:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Successful build: App ready for testing or distribution"}),"\n",(0,t.jsxs)(n.li,{children:["Build artifacts: ",(0,t.jsx)(n.code,{children:".app"}),", ",(0,t.jsx)(n.code,{children:".xcarchive"}),", or ",(0,t.jsx)(n.code,{children:".ipa"})," files created"]}),"\n",(0,t.jsx)(n.li,{children:"Any build errors displayed with file/line information"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"ios-native-bridge-setup-appdelegatem",children:"iOS Native Bridge Setup (AppDelegate.m)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objective-c",children:'#import "AppDelegate.h"\r\n#import <React/RCTBridge.h>\r\n#import <React/RCTBundleURLProvider.h>\r\n#import <React/RCTRootView.h>\r\n\r\n@implementation AppDelegate\r\n\r\n- (BOOL)application:(UIApplication *)application\r\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self\r\n                                             launchOptions:launchOptions];\r\n\r\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\r\n                                                   moduleName:@"MyApp"\r\n                                            initialProperties:nil];\r\n\r\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\r\n  UIViewController *rootViewController = [UIViewController new];\r\n  rootViewController.view = rootView;\r\n  self.window.rootViewController = rootViewController;\r\n  [self.window makeKeyAndVisible];\r\n\r\n  return YES;\r\n}\r\n\r\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\r\n{\r\n#if DEBUG\r\n  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];\r\n#else\r\n  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];\r\n#endif\r\n}\r\n\r\n@end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"android-build-process",children:"Android Build Process"}),"\n",(0,t.jsx)(n.h4,{id:"gradle-build-configuration",children:"Gradle Build Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gradle",children:'// android/app/build.gradle\r\nandroid {\r\n    compileSdkVersion rootProject.ext.compileSdkVersion\r\n\r\n    defaultConfig {\r\n        applicationId "com.myapp"\r\n        minSdkVersion rootProject.ext.minSdkVersion\r\n        targetSdkVersion rootProject.ext.targetSdkVersion\r\n        versionCode 1\r\n        versionName "1.0"\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            signingConfig signingConfigs.debug\r\n        }\r\n        release {\r\n            // Enable code shrinking and obfuscation\r\n            minifyEnabled enableProguardInReleaseBuilds\r\n            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"\r\n            signingConfig signingConfigs.release\r\n        }\r\n    }\r\n}\r\n\r\n// Bundle React Native code and images\r\napply from: "../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"\r\napplyNativeModulesAppBuildGradle(project)\n'})}),"\n",(0,t.jsx)(n.h4,{id:"android-native-bridge-setup-mainapplicationjava",children:"Android Native Bridge Setup (MainApplication.java)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.myapp;\r\n\r\nimport android.app.Application;\r\nimport com.facebook.react.ReactApplication;\r\nimport com.facebook.react.ReactNativeHost;\r\nimport com.facebook.react.ReactPackage;\r\nimport com.facebook.react.shell.MainReactPackage;\r\nimport com.facebook.soloader.SoLoader;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class MainApplication extends Application implements ReactApplication {\r\n\r\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\r\n    @Override\r\n    public boolean getUseDeveloperSupport() {\r\n      return BuildConfig.DEBUG;\r\n    }\r\n\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n      return Arrays.<ReactPackage>asList(\r\n          new MainReactPackage(),\r\n          // Add your custom native modules here\r\n          new CustomNativePackage()\r\n      );\r\n    }\r\n\r\n    @Override\r\n    protected String getJSMainModuleName() {\r\n      return "index";\r\n    }\r\n  };\r\n\r\n  @Override\r\n  public ReactNativeHost getReactNativeHost() {\r\n    return mReactNativeHost;\r\n  }\r\n\r\n  @Override\r\n  public void onCreate() {\r\n    super.onCreate();\r\n    SoLoader.init(this, /* native exopackage */ false);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"native-modules-and-platform-integration",children:"Native Modules and Platform Integration"}),"\n",(0,t.jsx)(n.h3,{id:"creating-ios-native-modules",children:"Creating iOS Native Modules"}),"\n",(0,t.jsx)(n.h4,{id:"calendarmanagerh",children:"CalendarManager.h"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objective-c",children:"#import <React/RCTBridgeModule.h>\r\n#import <React/RCTEventEmitter.h>\r\n\r\n@interface CalendarManager : RCTEventEmitter <RCTBridgeModule>\r\n@end\n"})}),"\n",(0,t.jsx)(n.h4,{id:"calendarmanagerm",children:"CalendarManager.m"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objective-c",children:'#import "CalendarManager.h"\r\n#import <EventKit/EventKit.h>\r\n\r\n@implementation CalendarManager\r\n\r\n// Export module to React Native\r\nRCT_EXPORT_MODULE();\r\n\r\n// Export method to JavaScript\r\nRCT_EXPORT_METHOD(createEvent:(NSString *)title\r\n                  location:(NSString *)location\r\n                  resolver:(RCTPromiseResolveBlock)resolve\r\n                  rejecter:(RCTPromiseRejectBlock)reject)\r\n{\r\n  EKEventStore *eventStore = [[EKEventStore alloc] init];\r\n\r\n  [eventStore requestAccessToEntityType:EKEntityTypeEvent\r\n                             completion:^(BOOL granted, NSError *error) {\r\n    if (granted) {\r\n      EKEvent *event = [EKEvent eventWithEventStore:eventStore];\r\n      event.title = title;\r\n      event.location = location;\r\n      event.startDate = [NSDate date];\r\n      event.endDate = [event.startDate dateByAddingTimeInterval:3600]; // 1 hour\r\n      event.calendar = [eventStore defaultCalendarForNewEvents];\r\n\r\n      NSError *saveError = nil;\r\n      BOOL success = [eventStore saveEvent:event span:EKSpanThisEvent error:&saveError];\r\n\r\n      if (success) {\r\n        resolve(event.eventIdentifier);\r\n      } else {\r\n        reject(@"event_failure", @"Failed to save event", saveError);\r\n      }\r\n    } else {\r\n      reject(@"permission_denied", @"Calendar access denied", error);\r\n    }\r\n  }];\r\n}\r\n\r\n// Export constants to JavaScript\r\n- (NSDictionary *)constantsToExport\r\n{\r\n  return @{\r\n    @"DEFAULT_EVENT_NAME": @"New Event",\r\n    @"EVENT_DURATION": @3600\r\n  };\r\n}\r\n\r\n// Required for event emitter\r\n- (NSArray<NSString *> *)supportedEvents\r\n{\r\n  return @[@"EventCreated", @"EventDeleted"];\r\n}\r\n\r\n@end\n'})}),"\n",(0,t.jsx)(n.h3,{id:"creating-android-native-modules",children:"Creating Android Native Modules"}),"\n",(0,t.jsx)(n.h4,{id:"calendarmodulejava",children:"CalendarModule.java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'package com.myapp.modules;\r\n\r\nimport android.provider.CalendarContract;\r\nimport android.content.ContentResolver;\r\nimport android.content.ContentValues;\r\nimport android.net.Uri;\r\n\r\nimport com.facebook.react.bridge.ReactApplicationContext;\r\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\r\nimport com.facebook.react.bridge.ReactMethod;\r\nimport com.facebook.react.bridge.Promise;\r\nimport com.facebook.react.bridge.WritableMap;\r\nimport com.facebook.react.bridge.Arguments;\r\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CalendarModule extends ReactContextBaseJavaModule {\r\n\r\n    private static final String MODULE_NAME = "CalendarModule";\r\n    private ReactApplicationContext reactContext;\r\n\r\n    public CalendarModule(ReactApplicationContext reactContext) {\r\n        super(reactContext);\r\n        this.reactContext = reactContext;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return MODULE_NAME;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getConstants() {\r\n        final Map<String, Object> constants = new HashMap<>();\r\n        constants.put("DEFAULT_EVENT_NAME", "New Event");\r\n        constants.put("EVENT_DURATION", 3600000); // 1 hour in milliseconds\r\n        return constants;\r\n    }\r\n\r\n    @ReactMethod\r\n    public void createEvent(String title, String location, Promise promise) {\r\n        try {\r\n            ContentResolver contentResolver = reactContext.getContentResolver();\r\n            ContentValues values = new ContentValues();\r\n\r\n            values.put(CalendarContract.Events.TITLE, title);\r\n            values.put(CalendarContract.Events.DESCRIPTION, "Created by React Native app");\r\n            values.put(CalendarContract.Events.EVENT_LOCATION, location);\r\n            values.put(CalendarContract.Events.DTSTART, System.currentTimeMillis());\r\n            values.put(CalendarContract.Events.DTEND, System.currentTimeMillis() + 3600000);\r\n            values.put(CalendarContract.Events.CALENDAR_ID, 1);\r\n            values.put(CalendarContract.Events.EVENT_TIMEZONE, "UTC");\r\n\r\n            Uri uri = contentResolver.insert(CalendarContract.Events.CONTENT_URI, values);\r\n\r\n            if (uri != null) {\r\n                String eventId = uri.getLastPathSegment();\r\n\r\n                // Emit event to JavaScript\r\n                WritableMap params = Arguments.createMap();\r\n                params.putString("eventId", eventId);\r\n                params.putString("title", title);\r\n\r\n                reactContext\r\n                    .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\r\n                    .emit("EventCreated", params);\r\n\r\n                promise.resolve(eventId);\r\n            } else {\r\n                promise.reject("CREATE_EVENT_ERROR", "Failed to create event");\r\n            }\r\n        } catch (Exception e) {\r\n            promise.reject("CREATE_EVENT_ERROR", e.getMessage(), e);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"javascript-usage-of-native-modules",children:"JavaScript Usage of Native Modules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { NativeModules, NativeEventEmitter } from "react-native";\r\n\r\nconst { CalendarModule } = NativeModules;\r\n\r\n// Create event listener for native events\r\nconst calendarEventEmitter = new NativeEventEmitter(CalendarModule);\r\n\r\nclass CalendarService {\r\n  constructor() {\r\n    // Listen for events from native module\r\n    this.eventSubscription = calendarEventEmitter.addListener(\r\n      "EventCreated",\r\n      this.handleEventCreated.bind(this)\r\n    );\r\n  }\r\n\r\n  handleEventCreated = (event) => {\r\n    console.log("Event created:", event);\r\n    // Update UI or state based on native event\r\n  };\r\n\r\n  createEvent = async (title, location) => {\r\n    try {\r\n      const eventId = await CalendarModule.createEvent(title, location);\r\n      console.log("Event created with ID:", eventId);\r\n      return eventId;\r\n    } catch (error) {\r\n      console.error("Failed to create event:", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  getConstants = () => {\r\n    return CalendarModule.getConstants();\r\n  };\r\n\r\n  cleanup = () => {\r\n    if (this.eventSubscription) {\r\n      this.eventSubscription.remove();\r\n    }\r\n  };\r\n}\r\n\r\nexport default CalendarService;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"push-notifications-implementation",children:"Push Notifications Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Push notifications are critical for user engagement, allowing your app to communicate with users even when the app is closed. React Native provides robust support for both local and remote notifications across iOS and Android platforms."}),"\n",(0,t.jsx)(n.h3,{id:"setting-up-push-notifications",children:"Setting Up Push Notifications"}),"\n",(0,t.jsx)(n.p,{children:"Setting up push notifications involves multiple steps across different platforms and requires proper configuration of Firebase Cloud Messaging (FCM) for Android and Apple Push Notification service (APNs) for iOS."}),"\n",(0,t.jsx)(n.h4,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Purpose of each dependency:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@react-native-firebase/app"}),": Core Firebase SDK for React Native"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@react-native-firebase/messaging"}),": Firebase Cloud Messaging for push notifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"@react-native-async-storage/async-storage"}),": Local storage for FCM tokens"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Installation process:"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install JavaScript packages"}),"\n",(0,t.jsx)(n.li,{children:"Configure native iOS dependencies via CocoaPods"}),"\n",(0,t.jsx)(n.li,{children:"Configure Android dependencies via Gradle"}),"\n",(0,t.jsx)(n.li,{children:"Set up Firebase project and download config files"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Step 1: Install push notification libraries\r\n# AsyncStorage is needed to store FCM tokens locally\r\nnpm install @react-native-async-storage/async-storage\r\n\r\n# Firebase packages for cross-platform push notifications\r\n# @react-native-firebase/app is the core Firebase SDK\r\n# @react-native-firebase/messaging handles FCM notifications\r\nnpm install @react-native-firebase/app @react-native-firebase/messaging\r\n\r\n# Step 2: Install iOS native dependencies\r\n# CocoaPods will install Firebase iOS SDK and configure Xcode project\r\ncd ios && pod install\r\n\r\n# Step 3: Download Firebase configuration files\r\n# iOS: Download GoogleService-Info.plist from Firebase Console\r\n# Android: Download google-services.json from Firebase Console\r\n# Place these files in the respective platform directories\r\n\r\n# Additional setup required:\r\n# - Enable push notifications capability in Xcode\r\n# - Configure Firebase project with your app bundle IDs\r\n# - Generate APNs certificates/keys for iOS\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Expected outcome:"})," All dependencies installed and native projects configured for push notification support."]}),"\n",(0,t.jsx)(n.h4,{id:"ios-configuration",children:"iOS Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-objective-c",children:"// AppDelegate.m - iOS push notification setup\r\n#import <UserNotifications/UserNotifications.h>\r\n#import <RNCPushNotificationIOS.h>\r\n\r\n@implementation AppDelegate\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n  // Request notification permissions\r\n  UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\r\n  center.delegate = self;\r\n  [center requestAuthorizationWithOptions:(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge) completionHandler:^(BOOL granted, NSError * _Nullable error){\r\n    if (granted) {\r\n      dispatch_async(dispatch_get_main_queue(), ^{\r\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\r\n      });\r\n    }\r\n  }];\r\n\r\n  return YES;\r\n}\r\n\r\n// Handle registration for remote notifications\r\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\r\n{\r\n  [RNCPushNotificationIOS didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\r\n}\r\n\r\n// Handle notification received while app is in foreground\r\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler\r\n{\r\n  completionHandler(UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionBadge);\r\n}\r\n\r\n@end\n"})}),"\n",(0,t.jsx)(n.h4,{id:"android-configuration",children:"Android Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'\x3c!-- android/app/src/main/AndroidManifest.xml --\x3e\r\n<uses-permission android:name="android.permission.INTERNET" />\r\n<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />\r\n<uses-permission android:name="android.permission.VIBRATE" />\r\n\r\n<application>\r\n  \x3c!-- Firebase messaging service --\x3e\r\n  <service\r\n    android:name="io.invertase.firebase.messaging.RNFirebaseMessagingService"\r\n    android:exported="false">\r\n    <intent-filter>\r\n      <action android:name="com.google.firebase.MESSAGING_EVENT" />\r\n    </intent-filter>\r\n  </service>\r\n\r\n  \x3c!-- Notification channel for Android 8.0+ --\x3e\r\n  <meta-data\r\n    android:name="com.google.firebase.messaging.default_notification_channel_id"\r\n    android:value="default_notification_channel" />\r\n</application>\n'})}),"\n",(0,t.jsx)(n.h4,{id:"react-native-push-notification-implementation",children:"React Native Push Notification Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import messaging from "@react-native-firebase/messaging";\r\nimport { Platform, PermissionsAndroid } from "react-native";\r\nimport AsyncStorage from "@react-native-async-storage/async-storage";\r\n\r\nclass PushNotificationService {\r\n  constructor() {\r\n    this.configure();\r\n  }\r\n\r\n  configure = async () => {\r\n    // Request permission (iOS automatically shows prompt, Android needs manual request)\r\n    await this.requestPermission();\r\n\r\n    // Get FCM token\r\n    const token = await this.getFCMToken();\r\n    console.log("FCM Token:", token);\r\n\r\n    // Save token to backend\r\n    await this.saveTokenToBackend(token);\r\n\r\n    // Listen for token refresh\r\n    messaging().onTokenRefresh(this.onTokenRefresh);\r\n\r\n    // Listen for foreground messages\r\n    messaging().onMessage(this.onForegroundMessage);\r\n\r\n    // Listen for background/quit state messages\r\n    messaging().setBackgroundMessageHandler(this.onBackgroundMessage);\r\n\r\n    // Handle notification that opened the app\r\n    messaging().getInitialNotification().then(this.onNotificationOpenedApp);\r\n    messaging().onNotificationOpenedApp(this.onNotificationOpenedApp);\r\n  };\r\n\r\n  requestPermission = async () => {\r\n    if (Platform.OS === "ios") {\r\n      const authStatus = await messaging().requestPermission();\r\n      const enabled =\r\n        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\r\n        authStatus === messaging.AuthorizationStatus.PROVISIONAL;\r\n\r\n      if (enabled) {\r\n        console.log("iOS notification permission granted");\r\n      }\r\n    } else {\r\n      // Android permission request\r\n      try {\r\n        const granted = await PermissionsAndroid.request(\r\n          PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS,\r\n          {\r\n            title: "Notification Permission",\r\n            message: "This app needs access to show notifications",\r\n            buttonNeutral: "Ask Me Later",\r\n            buttonNegative: "Cancel",\r\n            buttonPositive: "OK",\r\n          }\r\n        );\r\n\r\n        if (granted === PermissionsAndroid.RESULTS.GRANTED) {\r\n          console.log("Android notification permission granted");\r\n        }\r\n      } catch (err) {\r\n        console.warn("Permission request error:", err);\r\n      }\r\n    }\r\n  };\r\n\r\n  getFCMToken = async () => {\r\n    try {\r\n      let token = await AsyncStorage.getItem("fcm_token");\r\n\r\n      if (!token) {\r\n        token = await messaging().getToken();\r\n        await AsyncStorage.setItem("fcm_token", token);\r\n      }\r\n\r\n      return token;\r\n    } catch (error) {\r\n      console.error("Error getting FCM token:", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  saveTokenToBackend = async (token) => {\r\n    try {\r\n      // Send token to your backend server\r\n      const response = await fetch("https://your-api.com/api/fcm-token", {\r\n        method: "POST",\r\n        headers: {\r\n          "Content-Type": "application/json",\r\n          Authorization: "Bearer your-auth-token",\r\n        },\r\n        body: JSON.stringify({\r\n          token,\r\n          platform: Platform.OS,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log("Token saved to backend successfully");\r\n      }\r\n    } catch (error) {\r\n      console.error("Failed to save token to backend:", error);\r\n    }\r\n  };\r\n\r\n  onTokenRefresh = async (token) => {\r\n    console.log("FCM token refreshed:", token);\r\n    await AsyncStorage.setItem("fcm_token", token);\r\n    await this.saveTokenToBackend(token);\r\n  };\r\n\r\n  onForegroundMessage = async (remoteMessage) => {\r\n    console.log("Foreground message received:", remoteMessage);\r\n\r\n    // Show local notification when app is in foreground\r\n    this.showLocalNotification(remoteMessage);\r\n  };\r\n\r\n  onBackgroundMessage = async (remoteMessage) => {\r\n    console.log("Background message received:", remoteMessage);\r\n\r\n    // Handle background message processing\r\n    // Note: Limited processing time in background\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onNotificationOpenedApp = (remoteMessage) => {\r\n    if (remoteMessage) {\r\n      console.log("Notification opened app:", remoteMessage);\r\n\r\n      // Navigate to specific screen based on notification data\r\n      this.handleNotificationNavigation(remoteMessage.data);\r\n    }\r\n  };\r\n\r\n  showLocalNotification = (remoteMessage) => {\r\n    // Platform-specific local notification display\r\n    if (Platform.OS === "ios") {\r\n      // Use iOS local notification\r\n      const { title, body } = remoteMessage.notification || {};\r\n      // Implement iOS local notification\r\n    } else {\r\n      // Use Android local notification\r\n      // Implement Android local notification\r\n    }\r\n  };\r\n\r\n  handleNotificationNavigation = (data) => {\r\n    // Navigation logic based on notification data\r\n    const { screen, params } = data || {};\r\n\r\n    if (screen) {\r\n      // Use your navigation library to navigate\r\n      // NavigationService.navigate(screen, JSON.parse(params || \'{}\'));\r\n    }\r\n  };\r\n\r\n  // Subscribe to topic\r\n  subscribeToTopic = async (topic) => {\r\n    try {\r\n      await messaging().subscribeToTopic(topic);\r\n      console.log(`Subscribed to topic: ${topic}`);\r\n    } catch (error) {\r\n      console.error(`Failed to subscribe to topic ${topic}:`, error);\r\n    }\r\n  };\r\n\r\n  // Unsubscribe from topic\r\n  unsubscribeFromTopic = async (topic) => {\r\n    try {\r\n      await messaging().unsubscribeFromTopic(topic);\r\n      console.log(`Unsubscribed from topic: ${topic}`);\r\n    } catch (error) {\r\n      console.error(`Failed to unsubscribe from topic ${topic}:`, error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default new PushNotificationService();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"the-new-architecture-fabric-and-turbomodules",children:"The New Architecture: Fabric and TurboModules"}),"\n",(0,t.jsx)(n.h3,{id:"javascript-interface-jsi",children:"JavaScript Interface (JSI)"}),"\n",(0,t.jsx)(n.p,{children:"JSI enables direct, synchronous communication between JavaScript and native code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'// Native C++ JSI module example\r\n#include <jsi/jsi.h>\r\n\r\nusing namespace facebook;\r\n\r\nclass JSICalculator : public jsi::HostObject {\r\npublic:\r\n  jsi::Value get(jsi::Runtime& runtime, const jsi::PropNameID& propName) override {\r\n    auto name = propName.utf8(runtime);\r\n\r\n    if (name == "add") {\r\n      return jsi::Function::createFromHostFunction(\r\n        runtime,\r\n        jsi::PropNameID::forAscii(runtime, "add"),\r\n        2,\r\n        [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value {\r\n          if (count != 2) {\r\n            throw jsi::JSError(runtime, "add() requires exactly 2 arguments");\r\n          }\r\n\r\n          double a = arguments[0].asNumber();\r\n          double b = arguments[1].asNumber();\r\n          return jsi::Value(a + b);\r\n        }\r\n      );\r\n    }\r\n\r\n    return jsi::Value::undefined();\r\n  }\r\n};\r\n\r\n// Install JSI module\r\nvoid installJSICalculator(jsi::Runtime& runtime) {\r\n  auto calculator = std::make_shared<JSICalculator>();\r\n  runtime.global().setProperty(runtime, "JSICalculator", jsi::Object::createFromHostObject(runtime, calculator));\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"turbomodules-implementation",children:"TurboModules Implementation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// TurboModule spec (NativeCalculator.js)\r\nimport type { TurboModule } from "react-native";\r\nimport { TurboModuleRegistry } from "react-native";\r\n\r\nexport interface Spec extends TurboModule {\r\n  add(a: number, b: number): number;\r\n  addAsync(a: number, b: number): Promise<number>;\r\n  getConstants(): {\r\n    PI: number,\r\n    E: number,\r\n  };\r\n}\r\n\r\nexport default TurboModuleRegistry.getEnforcing < Spec > "NativeCalculator";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"fabric-renderer",children:"Fabric Renderer"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Fabric component spec\r\nimport type { ViewProps } from "react-native";\r\nimport type { HostComponent } from "react-native";\r\nimport codegenNativeComponent from "react-native/Libraries/Utilities/codegenNativeComponent";\r\n\r\ntype NativeProps = $ReadOnly<{\r\n  ...ViewProps,\r\n  value: number,\r\n  onValueChange?: (event: { nativeEvent: { value: number } }) => void,\r\n}>;\r\n\r\nexport default codegenNativeComponent < NativeProps > "CustomSlider";\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-optimization-strategies",children:"Performance Optimization Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"bundle-size-optimization",children:"Bundle Size Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// metro.config.js - Bundle optimization\r\nmodule.exports = {\r\n  transformer: {\r\n    minifierConfig: {\r\n      keepClassNames: true, // Required for some libraries\r\n      keepFnNames: true,\r\n      mangle: {\r\n        keep_fnames: true,\r\n      },\r\n    },\r\n  },\r\n  serializer: {\r\n    // Enable bundle splitting\r\n    createModuleIdFactory: () => (path) => {\r\n      const hash = require("crypto").createHash("md5");\r\n      hash.update(path);\r\n      return hash.digest("hex").substr(0, 8);\r\n    },\r\n  },\r\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Proper cleanup in components\r\nimport { useEffect, useRef } from 'react';\r\nimport { AppState, DeviceEventEmitter } from 'react-native';\r\n\r\nconst OptimizedComponent = () => {\r\n  const timeoutRef = useRef(null);\r\n  const subscriptionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up event listeners\r\n    subscriptionRef.current = DeviceEventEmitter.addListener(\r\n      'memoryWarning',\r\n      handleMemoryWarning\r\n    );\r\n\r\n    // Set up timers\r\n    timeoutRef.current = setTimeout(() => {\r\n      console.log('Timer executed');\r\n    }, 5000);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n\r\n      if (subscriptionRef.current) {\r\n        subscriptionRef.current.remove();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleMemoryWarning = () => {\r\n    // Clear caches, reduce memory usage\r\n    console.log('Memory warning received');\r\n  };\r\n\r\n  return (\r\n    // Component JSX\r\n  );\r\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"image-optimization",children:"Image Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Image } from "react-native";\r\n\r\n// Optimized image usage\r\nconst OptimizedImageComponent = () => {\r\n  return (\r\n    <Image\r\n      source={{ uri: "https://example.com/image.jpg" }}\r\n      style={{ width: 200, height: 200 }}\r\n      resizeMode="cover"\r\n      // Enable native caching\r\n      cache="force-cache"\r\n      // Reduce memory usage for large images\r\n      fadeDuration={300}\r\n      // Optimize for performance\r\n      loadingIndicatorSource={{ uri: "placeholder.jpg" }}\r\n    />\r\n  );\r\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"real-world-implementation-examples",children:"Real-World Implementation Examples"}),"\n",(0,t.jsx)(n.h3,{id:"navigation-setup-with-react-navigation",children:"Navigation Setup with React Navigation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// App.js - Navigation setup\r\nimport React from "react";\r\nimport { NavigationContainer } from "@react-navigation/native";\r\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\r\nimport { createBottomTabNavigator } from "@react-navigation/bottom-tabs";\r\n\r\nimport HomeScreen from "./screens/HomeScreen";\r\nimport ProfileScreen from "./screens/ProfileScreen";\r\nimport SettingsScreen from "./screens/SettingsScreen";\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst TabNavigator = () => {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n        tabBarActiveTintColor: "#007AFF",\r\n        tabBarInactiveTintColor: "#999",\r\n      }}\r\n    >\r\n      <Tab.Screen name="Home" component={HomeScreen} />\r\n      <Tab.Screen name="Profile" component={ProfileScreen} />\r\n      <Tab.Screen name="Settings" component={SettingsScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator>\r\n        <Stack.Screen\r\n          name="Main"\r\n          component={TabNavigator}\r\n          options={{ headerShown: false }}\r\n        />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default App;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"state-management-with-redux-toolkit",children:"State Management with Redux Toolkit"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// store/store.js\r\nimport { configureStore } from "@reduxjs/toolkit";\r\nimport userSlice from "./slices/userSlice";\r\nimport notificationSlice from "./slices/notificationSlice";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userSlice,\r\n    notifications: notificationSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: ["persist/PERSIST"],\r\n      },\r\n    }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"debugging-and-development-tools",children:"Debugging and Development Tools"}),"\n",(0,t.jsx)(n.h3,{id:"flipper-integration",children:"Flipper Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Install Flipper for debugging\r\n# iOS\r\ncd ios && pod install\r\n\r\n# Add to AppDelegate.m\r\n#if DEBUG\r\n#import <FlipperKit/FlipperClient.h>\r\n#import <FlipperKitLayoutPlugin/FlipperKitLayoutPlugin.h>\r\n#import <FlipperKitNetworkPlugin/FlipperKitNetworkPlugin.h>\r\n\r\n- (void)initializeFlipper:(UIApplication *)application {\r\n  FlipperClient *client = [FlipperClient sharedClient];\r\n  [client addPlugin:[[FlipperKitLayoutPlugin alloc] initWithRootNode:application]];\r\n  [client addPlugin:[[FlipperKitNetworkPlugin alloc] init]];\r\n  [client start];\r\n}\r\n#endif\n"})}),"\n",(0,t.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Performance monitoring setup\r\nimport perf from '@react-native-firebase/perf';\r\n\r\nconst performanceTrace = perf().newTrace('app_startup');\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      performanceTrace.start();\r\n\r\n      // App initialization logic\r\n      await initializeServices();\r\n\r\n      performanceTrace.stop();\r\n    };\r\n\r\n    initializeApp();\r\n  }, []);\r\n\r\n  return (\r\n    // App components\r\n  );\r\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices-and-common-pitfalls",children:"Best Practices and Common Pitfalls"}),"\n",(0,t.jsx)(n.h3,{id:"performance-best-practices",children:"Performance Best Practices"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// \u2705 Use FlatList for large lists\r\nimport { FlatList } from "react-native";\r\n\r\nconst OptimizedList = ({ data }) => {\r\n  const renderItem = useCallback(\r\n    ({ item }) => <ItemComponent item={item} />,\r\n    []\r\n  );\r\n\r\n  return (\r\n    <FlatList\r\n      data={data}\r\n      renderItem={renderItem}\r\n      keyExtractor={(item) => item.id}\r\n      removeClippedSubviews={true}\r\n      maxToRenderPerBatch={10}\r\n      windowSize={10}\r\n      initialNumToRender={10}\r\n      getItemLayout={(data, index) => ({\r\n        length: ITEM_HEIGHT,\r\n        offset: ITEM_HEIGHT * index,\r\n        index,\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\n// \u274c Avoid ScrollView for large datasets\r\nconst IneffientList = ({ data }) => {\r\n  return (\r\n    <ScrollView>\r\n      {data.map((item) => (\r\n        <ItemComponent key={item.id} item={item} />\r\n      ))}\r\n    </ScrollView>\r\n  );\r\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"memory-management-1",children:"Memory Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Proper cleanup and memoization\r\nimport { useMemo, useCallback, useEffect } from 'react';\r\n\r\nconst OptimizedComponent = ({ data, onPress }) => {\r\n  // Memoize expensive calculations\r\n  const processedData = useMemo(() => {\r\n    return data.map(item => ({\r\n      ...item,\r\n      processedValue: expensiveCalculation(item.value)\r\n    }));\r\n  }, [data]);\r\n\r\n  // Memoize callback functions\r\n  const handlePress = useCallback((item) => {\r\n    onPress(item);\r\n  }, [onPress]);\r\n\r\n  // Clean up side effects\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      // Some periodic task\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    // Component render\r\n  );\r\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"React Native provides a powerful platform for building cross-platform mobile applications with near-native performance. Understanding its architecture\u2014from the bridge system to the new JSI and Fabric implementations\u2014enables developers to create efficient, maintainable applications."}),"\n",(0,t.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Architecture Understanding"}),": The bridge system, while being replaced by JSI, remains crucial for understanding React Native's communication patterns."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Native Integration"}),": Native modules provide unlimited access to platform APIs while maintaining cross-platform code sharing."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Performance Optimization"}),": Proper use of components like FlatList, image optimization, and memory management are essential for production apps."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Build Process Mastery"}),": Understanding Metro bundler, Xcode, and Gradle configurations helps optimize and troubleshoot builds."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Future-Proofing"}),": The new architecture with Fabric and TurboModules represents the future of React Native development."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/facebook/react-native",children:"React Native GitHub Repository"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://reactnative.dev/",children:"React Native Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://reactnative.dev/docs/the-new-architecture/landing-page",children:"React Native New Architecture"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://facebook.github.io/metro/",children:"Metro Bundler Documentation"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://fbflipper.com/",children:"Flipper Debugging Tool"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"React Native continues to evolve, bridging the gap between web and mobile development while providing developers with the tools needed to build sophisticated, high-performance mobile applications."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var i=r(6540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);