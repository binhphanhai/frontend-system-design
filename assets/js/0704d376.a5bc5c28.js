"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7820],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var t=i(6540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},9209:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"react-interview/signup-form-example","title":"Signup Form Example in React","description":"A step-by-step guide to building an accessible React signup form with uncontrolled inputs, proper labeling, browser validation, and client-side submission","source":"@site/docs/react-interview/10-signup-form-example.md","sourceDirName":"react-interview","slug":"/react-interview/signup-form-example","permalink":"/frontend-system-design/docs/react-interview/signup-form-example","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/react-interview/10-signup-form-example.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"reactInterviewSidebar","previous":{"title":"Forms in React Interviews","permalink":"/frontend-system-design/docs/react-interview/forms"},"next":{"title":"Data Fetching in React Interviews","permalink":"/frontend-system-design/docs/react-interview/data-fetching"}}');var r=i(4848),s=i(8453);const l={},a="Signup Form Example in React",o={},d=[{value:"1. Input Field",id:"1-input-field",level:2},{value:"2. Add Label to Input Field",id:"2-add-label-to-input-field",level:2},{value:"3. Wrap Within a Form",id:"3-wrap-within-a-form",level:2},{value:"4. Form Attributes",id:"4-form-attributes",level:2},{value:"5. Submit Button",id:"5-submit-button",level:2},{value:"6. Input Field <code>name</code> Attribute",id:"6-input-field-name-attribute",level:2},{value:"7. Other Attributes for Input Field (e.g. <code>autocomplete</code>)",id:"7-other-attributes-for-input-field-eg-autocomplete",level:2},{value:"8. Browser Validation",id:"8-browser-validation",level:2},{value:"9. Link Form Control Descriptions Using <code>aria-describedby</code>",id:"9-link-form-control-descriptions-using-aria-describedby",level:2},{value:"10. Submission via <code>fetch()</code>",id:"10-submission-via-fetch",level:2},{value:"What You Need to Know for Interviews",id:"what-you-need-to-know-for-interviews",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"signup-form-example-in-react",children:"Signup Form Example in React"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"A step-by-step guide to building an accessible React signup form with uncontrolled inputs, proper labeling, browser validation, and client-side submission"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"Building a form with great user experience and accessibility isn't all that easy\u2014but it also isn't that hard once you know the things to pay attention to."}),"\n",(0,r.jsx)(n.p,{children:"This guide demonstrates the basics of building a good, accessible simple signup form with uncontrolled inputs. Since the inputs are uncontrolled, most of the points aren't specific to React, but are best practices for web forms in general."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-input-field",children:"1. Input Field"}),"\n",(0,r.jsxs)(n.p,{children:["Start with an ",(0,r.jsx)(n.code,{children:"<input>"})," field. ",(0,r.jsx)(n.code,{children:"<input>"})," elements are the backbone of HTML forms and, depending on the ",(0,r.jsx)(n.code,{children:"type"})," attribute value, browsers render these controls differently to assist the user in filling up the form. Common values include ",(0,r.jsx)(n.code,{children:"text"}),", ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"number"}),", ",(0,r.jsx)(n.code,{children:"url"}),", ",(0,r.jsx)(n.code,{children:"checkbox"}),", ",(0,r.jsx)(n.code,{children:"file"}),", etc."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<input type="email" />\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-add-label-to-input-field",children:"2. Add Label to Input Field"}),"\n",(0,r.jsxs)(n.p,{children:["All ",(0,r.jsx)(n.code,{children:"<input>"})," tags should have an associated ",(0,r.jsx)(n.code,{children:"<label>"})," for accessibility purposes. This is necessary so that users of assistive technologies can tell what the input is for. Clicking or touching a label will also focus on the label's associated form control."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"<label>"})," and the ",(0,r.jsx)(n.code,{children:"<input>"})," are linked using ",(0,r.jsx)(n.code,{children:"for"})," (",(0,r.jsx)(n.code,{children:"htmlFor"})," in React) and ",(0,r.jsx)(n.code,{children:"id"})," attributes respectively."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<label htmlFor="email-input">Email</label>\r\n<input id="email-input" type="email" />\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Alternatively, you can use ",(0,r.jsx)(n.code,{children:"aria-label"})," on ",(0,r.jsx)(n.code,{children:"<input>"}),", but it is better to have a visible label using ",(0,r.jsx)(n.code,{children:"<label>"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-wrap-within-a-form",children:"3. Wrap Within a Form"}),"\n",(0,r.jsxs)(n.p,{children:["Next, the elements should be wrapped within a ",(0,r.jsx)(n.code,{children:"<form>"}),". This enables the browser's enter-to-submit behavior, so users can hit Enter to submit the form."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'<form>\r\n  <label htmlFor="email-input">Email</label>\r\n  <input id="email-input" type="email" />\r\n</form>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-form-attributes",children:"4. Form Attributes"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"<form>"})," tag accepts these attributes:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"action"}),": Specifies the URL of the server that will receive the submitted form data."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"method"}),": Defines the HTTP method used to send the form data. Common values are:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST"}),": Form data is sent as part of the request body."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"GET"}),": Form data is appended to the URL as search/query parameters."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enctype"}),": Specifies how the form data should be encoded when submitting it to the server. This is particularly important when you're uploading files."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input id="email-input" type="email" />\r\n</form>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-submit-button",children:"5. Submit Button"}),"\n",(0,r.jsxs)(n.p,{children:["While not all users are aware they can hit Enter to submit the form, submit buttons are universally understood mechanisms for form submissions. If the ",(0,r.jsx)(n.code,{children:"type"})," attribute of the ",(0,r.jsx)(n.code,{children:"<button>"})," is not specified, the default value used is ",(0,r.jsx)(n.code,{children:'<button type="submit">'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When such ",(0,r.jsx)(n.code,{children:"<button>"}),"s are used within a ",(0,r.jsx)(n.code,{children:"<form>"}),", triggering them will cause form submissions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input id="email-input" type="email" />\r\n  <button>Sign up</button>\r\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["An alternative way to create a submit button is by using the ",(0,r.jsx)(n.code,{children:"<input>"})," tag with ",(0,r.jsx)(n.code,{children:'type="submit"'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input id="email-input" type="email" />\r\n  <input type="submit" value="Sign up" />\r\n</form>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"6-input-field-name-attribute",children:["6. Input Field ",(0,r.jsx)(n.code,{children:"name"})," Attribute"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"<input>"})," elements with a ",(0,r.jsx)(n.code,{children:"name"})," attribute defined will be included in the form submission data as part of the name/value pairs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input id="email-input" name="userEmail" type="email" />\r\n  <button>Sign up</button>\r\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"name"})," attribute specified, when the form is submitted:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.code,{children:'<form method="GET">'}),", a HTTP GET request will be made to ",(0,r.jsx)(n.code,{children:"/users/signup?userEmail=john.doe@gmail.com"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["For ",(0,r.jsx)(n.code,{children:'<form method="POST">'}),", a HTTP POST request will be made to ",(0,r.jsx)(n.code,{children:"/users/signup"})," with the body as ",(0,r.jsx)(n.code,{children:"userEmail=john.doe@gmail.com"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If there are more form fields, the key-value pairs are concatenated with ",(0,r.jsx)(n.code,{children:"&"})," as the delimiter, e.g. ",(0,r.jsx)(n.code,{children:"userEmail=john.doe@gmail.com&password=securepassword123"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["The value of an ",(0,r.jsx)(n.code,{children:"<input>"})," element without a ",(0,r.jsx)(n.code,{children:"name"})," attribute is not included in the data submitted to the server. The ",(0,r.jsx)(n.code,{children:"name"})," attribute acts as a key for the form data, pairing it with the ",(0,r.jsx)(n.code,{children:"value"})," attribute of the input element. If the ",(0,r.jsx)(n.code,{children:"name"})," attribute is missing, the form data associated with that input will not be part of the HTTP request when the form is submitted."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["All form control input elements should have the ",(0,r.jsx)(n.code,{children:"name"})," attribute specified."]})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"7-other-attributes-for-input-field-eg-autocomplete",children:["7. Other Attributes for Input Field (e.g. ",(0,r.jsx)(n.code,{children:"autocomplete"}),")"]}),"\n",(0,r.jsxs)(n.p,{children:["By adding the ",(0,r.jsx)(n.code,{children:"autocomplete"})," attribute, browsers will offer suggestions based on the value and the user's autofill data such as addresses and payment methods."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input autocomplete="email" id="email-input" name="userEmail" type="email" />\r\n  <button>Sign up</button>\r\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Possible values include ",(0,r.jsx)(n.code,{children:"email"}),", ",(0,r.jsx)(n.code,{children:"family-name"}),", ",(0,r.jsx)(n.code,{children:"new-password"}),", ",(0,r.jsx)(n.code,{children:"street-address"}),", etc. Refer to the ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values",children:"full list of values on MDN"}),". Specifying the ",(0,r.jsx)(n.code,{children:"autocomplete"})," attribute is especially useful for shipping and billing address forms on checkout pages."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-browser-validation",children:"8. Browser Validation"}),"\n",(0,r.jsxs)(n.p,{children:["Add a password field using ",(0,r.jsx)(n.code,{children:'<input type="password" />'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["By specifying attributes like ",(0,r.jsx)(n.code,{children:"required"}),", ",(0,r.jsx)(n.code,{children:"minlength"}),", ",(0,r.jsx)(n.code,{children:"pattern"})," on ",(0,r.jsx)(n.code,{children:"<input>"}),", the browser can help to validate that the user's input matches these requirements before the form is submitted to the server."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input autocomplete="email" id="email-input" name="userEmail" required type="email" />\r\n  <label htmlFor="password-input">Password</label>\r\n  <input autocomplete="new-password" id="password-input" minlength="8" name="userPassword" required type="password" />\r\n  <button>Sign up</button>\r\n</form>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Browser validation alone is insufficient! Malicious personnel can directly hit your server endpoints without using your HTML form. You should still validate and sanitize all user input on the server."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"9-link-form-control-descriptions-using-aria-describedby",children:["9. Link Form Control Descriptions Using ",(0,r.jsx)(n.code,{children:"aria-describedby"})]}),"\n",(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.code,{children:"<input>"}),"s which benefit from additional descriptions or hint text, they can be associated with the element that contains the descriptive text, which could be a ",(0,r.jsx)(n.code,{children:"<span>"}),", ",(0,r.jsx)(n.code,{children:"<div>"}),", or any other suitable HTML element."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<form method="POST" action="/users/signup">\r\n  <label htmlFor="email-input">Email</label>\r\n  <input autocomplete="email" id="email-input" name="userEmail" required type="email" />\r\n  <label htmlFor="password-input">Password</label>\r\n  <input\r\n    aria-describedby="password-hint"\r\n    autocomplete="new-password"\r\n    id="password-input"\r\n    minlength="8"\r\n    name="userPassword"\r\n    required\r\n    type="password"\r\n  />\r\n  <div id="password-hint">\r\n    Your password must be at least 8 characters long.\r\n  </div>\r\n  <button>Sign up</button>\r\n</form>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["When a user focuses on the password input field, assistive technologies like screen readers will read the input label along with the additional instructions provided in the ",(0,r.jsx)(n.code,{children:"<div>"}),". This helps users understand the requirements for the password field more clearly."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"10-submission-via-fetch",children:["10. Submission via ",(0,r.jsx)(n.code,{children:"fetch()"})]}),"\n",(0,r.jsxs)(n.p,{children:["The current form will make a HTTP POST request to ",(0,r.jsx)(n.code,{children:"/users/signup"})," upon submission, which causes a full page navigation and that might not always be desirable."]}),"\n",(0,r.jsxs)(n.p,{children:["We can modify the form to make a client-side HTTP POST request via ",(0,r.jsx)(n.code,{children:"fetch()"}),". The main changes to make are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Call ",(0,r.jsx)(n.code,{children:"event.preventDefault()"})," to prevent the browser from navigating away"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"new FormData(formElement)"})," to get the input fields data from the form element"]}),"\n",(0,r.jsxs)(n.li,{children:["Send the data to the server API endpoint via ",(0,r.jsx)(n.code,{children:"fetch()"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'function SignupForm() {\r\n  async function handleSubmit(event) {\r\n    // Prevent default behavior, which is a navigation\r\n    event.preventDefault();\r\n    const formElement = event.target;\r\n    const formData = new FormData(formElement);\r\n    const response = await fetch(\'/users/signup\', {\r\n      method: \'POST\',\r\n      body: JSON.stringify({\r\n        email: formData.get(\'userEmail\'),\r\n        password: formData.get(\'userPassword\'),\r\n      }),\r\n      headers: { \'Content-Type\': \'application/json\' },\r\n    });\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n      // Handle error response\r\n      return;\r\n    }\r\n    // Handle success flow\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor="email-input">Email</label>\r\n      <input\r\n        autocomplete="email"\r\n        id="email-input"\r\n        name="userEmail"\r\n        required\r\n        type="email"\r\n      />\r\n      <label htmlFor="password-input">Password</label>\r\n      <input\r\n        aria-describedby="password-hint"\r\n        autocomplete="new-password"\r\n        id="password-input"\r\n        minlength="8"\r\n        name="userPassword"\r\n        required\r\n        type="password"\r\n      />\r\n      <div id="password-hint">\r\n        Your password must be at least 8 characters long.\r\n      </div>\r\n      <button>Sign up</button>\r\n    </form>\r\n  );\r\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"There you have it, a fully-accessible sign up form in React."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-you-need-to-know-for-interviews",children:"What You Need to Know for Interviews"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How to independently build an accessible form in React with validation and submission."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);