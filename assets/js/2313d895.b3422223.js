"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6724],{2272:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"project-detail/styled-component","title":"Styled Components: CSS-in-JS Simplified","description":"Table of Contents","source":"@site/docs/project-detail/styled-component.md","sourceDirName":"project-detail","slug":"/project-detail/styled-component","permalink":"/frontend-system-design/docs/project-detail/styled-component","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/styled-component.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"Service Workers: The Gateway to Progressive Web Apps","permalink":"/frontend-system-design/docs/project-detail/service-worker"},"next":{"title":"Ant Design: Enterprise-Class UI Library","permalink":"/frontend-system-design/docs/project-detail/ant-design"}}');var o=t(4848),i=t(8453);const r={},a="Styled Components: CSS-in-JS Simplified",l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Getting Started",id:"getting-started",level:2},{value:"Installation",id:"installation",level:3},{value:"Babel Configuration",id:"babel-configuration",level:3},{value:"Basic Usage and Syntax",id:"basic-usage-and-syntax",level:2},{value:"Creating Styled Components",id:"creating-styled-components",level:3},{value:"Styling Existing Components",id:"styling-existing-components",level:3},{value:"Under the Hood: How Styled Components Work",id:"under-the-hood-how-styled-components-work",level:2},{value:"Tagged Template Literals Processing",id:"tagged-template-literals-processing",level:3},{value:"CSS Generation and Injection",id:"css-generation-and-injection",level:3},{value:"Dynamic Styling with Props",id:"dynamic-styling-with-props",level:2},{value:"Props-Based Conditional Styling",id:"props-based-conditional-styling",level:3},{value:"Helper Functions for Complex Logic",id:"helper-functions-for-complex-logic",level:3},{value:"Theming System",id:"theming-system",level:2},{value:"Theme Provider and Theme Access",id:"theme-provider-and-theme-access",level:3},{value:"Dynamic Theme Switching",id:"dynamic-theme-switching",level:3},{value:"Advanced Patterns",id:"advanced-patterns",level:2},{value:"Extending and Composition",id:"extending-and-composition",level:3},{value:"Polymorphic Components",id:"polymorphic-components",level:3},{value:"Global Styles and CSS Reset",id:"global-styles-and-css-reset",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Optimization Techniques",id:"optimization-techniques",level:3},{value:"Server-Side Rendering (SSR)",id:"server-side-rendering-ssr",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Component Organization",id:"component-organization",level:3},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Performance Guidelines",id:"performance-guidelines",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"styled-components-css-in-js-simplified",children:"Styled Components: CSS-in-JS Simplified"})}),"\n",(0,o.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#getting-started",children:"Getting Started"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#basic-usage-and-syntax",children:"Basic Usage and Syntax"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#under-the-hood-how-styled-components-work",children:"Under the Hood: How Styled Components Work"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#dynamic-styling-with-props",children:"Dynamic Styling with Props"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#theming-system",children:"Theming System"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#advanced-patterns",children:"Advanced Patterns"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#best-practices",children:"Best Practices"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["Styled Components is a popular CSS-in-JS library for React and React Native that allows you to write actual CSS code to style your components using tagged template literals. As highlighted in the ",(0,o.jsx)(e.a,{href:"https://github.com/styled-components/styled-components",children:"official Styled Components repository"}),", it removes the mapping between components and styles, making component-level styling intuitive and maintainable."]}),"\n",(0,o.jsx)(e.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Component-scoped styling"}),": No more global CSS conflicts"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Dynamic styling"}),": Props-based conditional styling"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Automatic vendor prefixing"}),": Cross-browser compatibility out of the box"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Dead code elimination"}),": Unused styles are automatically removed"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Theming support"}),": Consistent design system implementation"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,o.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install styled-components\nnpm install styled-components\n\n# Optional: Install types for TypeScript\nnpm install --save-dev @types/styled-components\n\n# Recommended: Babel plugin for better development experience\nnpm install --save-dev babel-plugin-styled-components\n"})}),"\n",(0,o.jsx)(e.h3,{id:"babel-configuration",children:"Babel Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'// .babelrc or babel.config.js\n{\n  "plugins": [\n    [\n      "babel-plugin-styled-components",\n      {\n        "displayName": true,\n        "fileName": true,\n        "ssr": true\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"basic-usage-and-syntax",children:"Basic Usage and Syntax"}),"\n",(0,o.jsx)(e.h3,{id:"creating-styled-components",children:"Creating Styled Components"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import styled from "styled-components";\n\n// Basic styled component\nconst Button = styled.button`\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n\n  &:disabled {\n    background-color: #6c757d;\n    cursor: not-allowed;\n  }\n`;\n\n// Usage in component\nfunction App() {\n  return (\n    <div>\n      <Button>Click me</Button>\n      <Button disabled>Disabled</Button>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"styling-existing-components",children:"Styling Existing Components"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Styling third-party components\nimport { Link } from "react-router-dom";\n\nconst StyledLink = styled(Link)`\n  color: #007bff;\n  text-decoration: none;\n  font-weight: 600;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\n// Styling with component selector\nconst Card = styled.div`\n  padding: 20px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n\n  ${StyledLink} {\n    display: block;\n    margin-top: 10px;\n  }\n`;\n'})}),"\n",(0,o.jsx)(e.h2,{id:"under-the-hood-how-styled-components-work",children:"Under the Hood: How Styled Components Work"}),"\n",(0,o.jsx)(e.h3,{id:"tagged-template-literals-processing",children:"Tagged Template Literals Processing"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// How styled components processes template literals\nfunction styledComponentsProcessor(template, ...expressions) {\n  // 1. Parse template literal\n  const cssString = template.reduce((result, string, i) => {\n    const expression = expressions[i - 1];\n    const evaluatedExpression =\n      typeof expression === "function" ? expression(props) : expression;\n\n    return result + evaluatedExpression + string;\n  });\n\n  // 2. Generate unique class name\n  const className = generateUniqueClassName(cssString);\n\n  // 3. Inject CSS into DOM\n  injectStyles(className, cssString);\n\n  // 4. Return React component\n  return createStyledComponent(className);\n}\n\n// Simplified implementation concept\nconst styled = {\n  button: (template, ...expressions) => {\n    return (props) => {\n      const className = processTemplate(template, expressions, props);\n      return React.createElement("button", { ...props, className });\n    };\n  },\n};\n'})}),"\n",(0,o.jsx)(e.h3,{id:"css-generation-and-injection",children:"CSS Generation and Injection"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Simplified CSS generation process\nclass StyleManager {\n  constructor() {\n    this.styles = new Map();\n    this.sheet = this.createStyleSheet();\n  }\n\n  createStyleSheet() {\n    const style = document.createElement("style");\n    style.type = "text/css";\n    document.head.appendChild(style);\n    return style.sheet;\n  }\n\n  generateClassName(componentId, hash) {\n    return `sc-${componentId}-${hash}`;\n  }\n\n  injectStyles(className, cssText) {\n    if (!this.styles.has(className)) {\n      const rule = `.${className} { ${cssText} }`;\n      this.sheet.insertRule(rule, this.sheet.cssRules.length);\n      this.styles.set(className, cssText);\n    }\n  }\n\n  removeStyles(className) {\n    // Cleanup unused styles for performance\n    if (this.styles.has(className)) {\n      // Find and remove the CSS rule\n      for (let i = 0; i < this.sheet.cssRules.length; i++) {\n        if (this.sheet.cssRules[i].selectorText.includes(className)) {\n          this.sheet.deleteRule(i);\n          break;\n        }\n      }\n      this.styles.delete(className);\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"dynamic-styling-with-props",children:"Dynamic Styling with Props"}),"\n",(0,o.jsx)(e.h3,{id:"props-based-conditional-styling",children:"Props-Based Conditional Styling"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'const Button = styled.button`\n  padding: ${(props) => (props.size === "large" ? "16px 32px" : "8px 16px")};\n  background-color: ${(props) => {\n    switch (props.variant) {\n      case "primary":\n        return "#007bff";\n      case "secondary":\n        return "#6c757d";\n      case "danger":\n        return "#dc3545";\n      default:\n        return "#f8f9fa";\n    }\n  }};\n  color: ${(props) => (props.variant === "default" ? "#212529" : "white")};\n  border: 2px solid ${(props) =>\n      props.outlined ? "currentColor" : "transparent"};\n  background-color: ${(props) => props.outlined && "transparent"};\n`;\n\n// Advanced props with TypeScript\ninterface ButtonProps {\n  variant?: "primary" | "secondary" | "danger" | "default";\n  size?: "small" | "medium" | "large";\n  outlined?: boolean;\n  fullWidth?: boolean;\n}\n\nconst TypedButton =\n  styled.button <\n  ButtonProps >\n  `\n  padding: ${({ size }) => {\n    const sizes = { small: "4px 8px", medium: "8px 16px", large: "12px 24px" };\n    return sizes[size || "medium"];\n  }};\n  width: ${({ fullWidth }) => fullWidth && "100%"};\n  /* ... other styles */\n`;\n'})}),"\n",(0,o.jsx)(e.h3,{id:"helper-functions-for-complex-logic",children:"Helper Functions for Complex Logic"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Utility functions for cleaner styled components\nconst getButtonVariant = (variant) => {\n  const variants = {\n    primary: { bg: "#007bff", color: "white" },\n    secondary: { bg: "#6c757d", color: "white" },\n    success: { bg: "#28a745", color: "white" },\n    danger: { bg: "#dc3545", color: "white" },\n  };\n  return variants[variant] || variants.primary;\n};\n\nconst Button = styled.button`\n  background-color: ${(props) => getButtonVariant(props.variant).bg};\n  color: ${(props) => getButtonVariant(props.variant).color};\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n\n  &:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n`;\n'})}),"\n",(0,o.jsx)(e.h2,{id:"theming-system",children:"Theming System"}),"\n",(0,o.jsx)(e.h3,{id:"theme-provider-and-theme-access",children:"Theme Provider and Theme Access"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import styled, { ThemeProvider } from "styled-components";\n\n// Define theme object\nconst theme = {\n  colors: {\n    primary: "#007bff",\n    secondary: "#6c757d",\n    success: "#28a745",\n    danger: "#dc3545",\n    light: "#f8f9fa",\n    dark: "#212529",\n  },\n  spacing: {\n    xs: "4px",\n    sm: "8px",\n    md: "16px",\n    lg: "24px",\n    xl: "32px",\n  },\n  breakpoints: {\n    mobile: "576px",\n    tablet: "768px",\n    desktop: "992px",\n    wide: "1200px",\n  },\n  typography: {\n    fontFamily: "Arial, sans-serif",\n    fontSize: {\n      small: "12px",\n      medium: "16px",\n      large: "20px",\n      xlarge: "24px",\n    },\n  },\n};\n\n// Themed components\nconst ThemedButton = styled.button`\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: white;\n  padding: ${({ theme }) => `${theme.spacing.sm} ${theme.spacing.md}`};\n  font-family: ${({ theme }) => theme.typography.fontFamily};\n  font-size: ${({ theme }) => theme.typography.fontSize.medium};\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n\n  @media (min-width: ${({ theme }) => theme.breakpoints.tablet}) {\n    padding: ${({ theme }) => `${theme.spacing.md} ${theme.spacing.lg}`};\n  }\n`;\n\n// Theme provider usage\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ThemedButton>Themed Button</ThemedButton>\n    </ThemeProvider>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"dynamic-theme-switching",children:"Dynamic Theme Switching"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { useState } from "react";\n\nconst lightTheme = {\n  colors: { background: "#ffffff", text: "#000000" },\n};\n\nconst darkTheme = {\n  colors: { background: "#000000", text: "#ffffff" },\n};\n\nfunction ThemeToggleApp() {\n  const [isDark, setIsDark] = useState(false);\n  const currentTheme = isDark ? darkTheme : lightTheme;\n\n  return (\n    <ThemeProvider theme={currentTheme}>\n      <Container>\n        <button onClick={() => setIsDark(!isDark)}>\n          Switch to {isDark ? "Light" : "Dark"} Theme\n        </button>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  color: ${({ theme }) => theme.colors.text};\n  min-height: 100vh;\n  padding: 20px;\n  transition: all 0.3s ease;\n`;\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-patterns",children:"Advanced Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"extending-and-composition",children:"Extending and Composition"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// Base button component\nconst BaseButton = styled.button`\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  transition: all 0.2s ease;\n`;\n\n// Extended variants\nconst PrimaryButton = styled(BaseButton)`\n  background-color: #007bff;\n  color: white;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nconst OutlineButton = styled(BaseButton)`\n  background-color: transparent;\n  color: #007bff;\n  border: 2px solid #007bff;\n\n  &:hover {\n    background-color: #007bff;\n    color: white;\n  }\n`;\n"})}),"\n",(0,o.jsx)(e.h3,{id:"polymorphic-components",children:"Polymorphic Components"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// Component that can render as different HTML elements\nconst Text = styled.p`\n  margin: 0;\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.text};\n`;\n\n// Usage with different elements\nfunction TextExamples() {\n  return (\n    <>\n      <Text>Default paragraph</Text>\n      <Text as="span">Rendered as span</Text>\n      <Text as="h2">Rendered as heading</Text>\n      <Text as={Link} to="/home">\n        Rendered as Link component\n      </Text>\n    </>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"global-styles-and-css-reset",children:"Global Styles and CSS Reset"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'import { createGlobalStyle } from "styled-components";\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: ${({ theme }) => theme.typography.fontFamily};\n    background-color: ${({ theme }) => theme.colors.background};\n    color: ${({ theme }) => theme.colors.text};\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0 0 ${({ theme }) => theme.spacing.md} 0;\n  }\n\n  button {\n    font-family: inherit;\n  }\n`;\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      {/* Rest of your app */}\n    </ThemeProvider>\n  );\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(e.h3,{id:"optimization-techniques",children:"Optimization Techniques"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 1. Use object styles for static styles\nconst StaticButton = styled.button({\n  padding: "12px 24px",\n  border: "none",\n  borderRadius: "4px",\n  cursor: "pointer",\n});\n\n// 2. Memoize expensive computations\nimport { css } from "styled-components";\n\nconst buttonVariants = {\n  primary: css`\n    background-color: #007bff;\n    color: white;\n  `,\n  secondary: css`\n    background-color: #6c757d;\n    color: white;\n  `,\n};\n\nconst OptimizedButton = styled.button`\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  ${(props) => buttonVariants[props.variant] || buttonVariants.primary}\n`;\n\n// 3. Avoid inline functions in render\n// \u274c Bad - creates new function on every render\nconst BadButton = styled.button`\n  color: ${(props) => (props.primary ? "white" : "black")};\n`;\n\n// \u2705 Good - extract to variable or use css helper\nconst getButtonColor = (props) => (props.primary ? "white" : "black");\n\nconst GoodButton = styled.button`\n  color: ${getButtonColor};\n`;\n'})}),"\n",(0,o.jsx)(e.h3,{id:"server-side-rendering-ssr",children:"Server-Side Rendering (SSR)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// SSR setup with Next.js\nimport Document from "next/document";\nimport { ServerStyleSheet } from "styled-components";\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () =>\n        originalRenderPage({\n          enhanceApp: (App) => (props) =>\n            sheet.collectStyles(<App {...props} />),\n        });\n\n      const initialProps = await Document.getInitialProps(ctx);\n      return {\n        ...initialProps,\n        styles: (\n          <>\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          </>\n        ),\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsx)(e.h3,{id:"component-organization",children:"Component Organization"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// 1. Keep styled components close to usage\n// ComponentName/index.js\nimport { StyledWrapper, StyledTitle } from "./styles";\n\nexport function MyComponent({ title, children }) {\n  return (\n    <StyledWrapper>\n      <StyledTitle>{title}</StyledTitle>\n      {children}\n    </StyledWrapper>\n  );\n}\n\n// ComponentName/styles.js\nexport const StyledWrapper = styled.div`\n  padding: 20px;\n  border: 1px solid #e0e0e0;\n`;\n\nexport const StyledTitle = styled.h2`\n  margin: 0 0 16px 0;\n  color: #333;\n`;\n'})}),"\n",(0,o.jsx)(e.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"// \u2705 Good - Clear, descriptive names\nconst NavigationHeader = styled.header``;\nconst PrimaryActionButton = styled.button``;\nconst ProductCardContainer = styled.div``;\n\n// \u274c Avoid - Generic or unclear names\nconst Wrapper = styled.div``;\nconst Container = styled.div``;\nconst StyledDiv = styled.div``;\n"})}),"\n",(0,o.jsx)(e.h3,{id:"performance-guidelines",children:"Performance Guidelines"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// \u2705 Good practices\nconst Button = styled.button`\n  // Static styles first\n  padding: 12px 24px;\n  border: none;\n  border-radius: 4px;\n\n  // Dynamic styles with simple conditions\n  background-color: ${(props) => (props.primary ? "#007bff" : "#6c757d")};\n\n  // Complex logic extracted to functions\n  ${(props) => getButtonVariant(props.variant)}\n`;\n\n// \u274c Avoid complex computations in template literals\nconst BadButton = styled.button`\n  // Expensive computation on every render\n  color: ${(props) => {\n    // Complex logic that should be extracted\n    const colors = calculateColors(props.theme);\n    return (\n      colors.find((color) => color.name === props.variant)?.value || "black"\n    );\n  }};\n`;\n'})}),"\n",(0,o.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(e.p,{children:"Styled Components revolutionizes how we approach styling in React applications by bringing CSS directly into the component paradigm. By leveraging tagged template literals and providing powerful features like theming, props-based styling, and automatic scoping, it eliminates many traditional CSS pain points while maintaining the full power of CSS."}),"\n",(0,o.jsx)(e.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Component-Scoped Styling"}),": Eliminates global CSS conflicts through automatic scoping"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Dynamic Styling"}),": Props-based conditional styling enables flexible, reusable components"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Powerful Theming"}),": Centralized theme management with context-based propagation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Performance Considerations"}),": Proper usage patterns ensure optimal runtime performance"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Developer Experience"}),": Excellent tooling support and debugging capabilities"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["Styled Components continues to be a popular choice for modern React applications, offering a balance of flexibility, maintainability, and performance. As referenced in the ",(0,o.jsx)(e.a,{href:"https://github.com/styled-components/styled-components",children:"Styled Components GitHub repository"}),", the library remains actively maintained with a strong community and comprehensive documentation."]}),"\n",(0,o.jsx)(e.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://styled-components.com/docs",children:"Styled Components Documentation"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://github.com/styled-components/styled-components",children:"Styled Components GitHub Repository"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://styled-components.com/docs/best-practices",children:"CSS-in-JS Best Practices"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://styled-components.com/docs/faqs#performance",children:"Performance Optimization Guide"})}),"\n"]})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>a});var s=t(6540);const o={},i=s.createContext(o);function r(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);