"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[827],{676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"project-detail/redux-toolkit","title":"Redux Toolkit: Modern Redux Development","description":"Table of Contents","source":"@site/docs/project-detail/redux-toolkit.md","sourceDirName":"project-detail","slug":"/project-detail/redux-toolkit","permalink":"/frontend-system-design/docs/project-detail/redux-toolkit","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/redux-toolkit.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"Redux: Predictable State Management","permalink":"/frontend-system-design/docs/project-detail/redux"}}');var r=n(4848),i=n(8453);const s={},a="Redux Toolkit: Modern Redux Development",d={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Core Problems Redux Toolkit Solves",id:"core-problems-redux-toolkit-solves",level:2},{value:"1. Store Configuration Complexity",id:"1-store-configuration-complexity",level:3},{value:"2. Boilerplate Reduction",id:"2-boilerplate-reduction",level:3},{value:"Installation and Setup",id:"installation-and-setup",level:2},{value:"Store Configuration",id:"store-configuration",level:3},{value:"Core APIs Deep Dive",id:"core-apis-deep-dive",level:2},{value:"createSlice() - The Heart of RTK",id:"createslice---the-heart-of-rtk",level:3},{value:"createAsyncThunk() - Async Logic",id:"createasyncthunk---async-logic",level:3},{value:"Under the Hood: How RTK Works",id:"under-the-hood-how-rtk-works",level:2},{value:"createSlice Implementation Concept",id:"createslice-implementation-concept",level:3},{value:"Immer Integration",id:"immer-integration",level:3},{value:"RTK Query: Data Fetching Solution",id:"rtk-query-data-fetching-solution",level:2},{value:"Basic RTK Query Setup",id:"basic-rtk-query-setup",level:3},{value:"Using RTK Query Hooks",id:"using-rtk-query-hooks",level:3},{value:"Advanced Patterns and Best Practices",id:"advanced-patterns-and-best-practices",level:2},{value:"Feature-Based File Structure",id:"feature-based-file-structure",level:3},{value:"Type-Safe Redux Hooks",id:"type-safe-redux-hooks",level:3},{value:"Slice Composition",id:"slice-composition",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:2},{value:"Selector Optimization",id:"selector-optimization",level:3},{value:"RTK Query Cache Configuration",id:"rtk-query-cache-configuration",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key RTK Advantages",id:"key-rtk-advantages",level:3},{value:"Further Resources",id:"further-resources",level:3}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"redux-toolkit-modern-redux-development",children:"Redux Toolkit: Modern Redux Development"})}),"\n",(0,r.jsx)(t.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#core-problems-redux-toolkit-solves",children:"Core Problems Redux Toolkit Solves"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#installation-and-setup",children:"Installation and Setup"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#core-apis-deep-dive",children:"Core APIs Deep Dive"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#under-the-hood-how-rtk-works",children:"Under the Hood: How RTK Works"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#rtk-query-data-fetching-solution",children:"RTK Query: Data Fetching Solution"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#advanced-patterns-and-best-practices",children:"Advanced Patterns and Best Practices"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#performance-optimizations",children:"Performance Optimizations"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(t.p,{children:["Redux Toolkit (RTK) is the official, opinionated, batteries-included toolset for efficient Redux development. As stated in the ",(0,r.jsx)(t.a,{href:"https://github.com/reduxjs/redux-toolkit",children:"Redux Toolkit GitHub repository"}),", it was created to address three common concerns about Redux: complex store configuration, excessive boilerplate code, and the need for multiple packages to make Redux useful."]}),"\n",(0,r.jsx)(t.p,{children:"Since you already understand Redux fundamentals, RTK essentially provides a layer of abstraction that simplifies Redux development while maintaining all the core principles and benefits of Redux."}),"\n",(0,r.jsx)(t.h2,{id:"core-problems-redux-toolkit-solves",children:"Core Problems Redux Toolkit Solves"}),"\n",(0,r.jsx)(t.h3,{id:"1-store-configuration-complexity",children:"1. Store Configuration Complexity"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// Traditional Redux store setup\nimport { createStore, combineReducers, applyMiddleware, compose } from "redux";\nimport thunk from "redux-thunk";\nimport { composeWithDevTools } from "redux-devtools-extension";\nimport todosReducer from "./todosReducer";\nimport usersReducer from "./usersReducer";\n\nconst rootReducer = combineReducers({\n  todos: todosReducer,\n  users: usersReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\n// RTK simplified version\nimport { configureStore } from "@reduxjs/toolkit";\nimport todosSlice from "./todosSlice";\nimport usersSlice from "./usersSlice";\n\nconst store = configureStore({\n  reducer: {\n    todos: todosSlice,\n    users: usersSlice,\n  },\n});\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-boilerplate-reduction",children:"2. Boilerplate Reduction"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// Traditional Redux - Action types, creators, and reducer\nconst ADD_TODO = "todos/addTodo";\nconst TOGGLE_TODO = "todos/toggleTodo";\n\nconst addTodo = (text) => ({ type: ADD_TODO, payload: text });\nconst toggleTodo = (id) => ({ type: TOGGLE_TODO, payload: id });\n\nconst todosReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        { id: Date.now(), text: action.payload, completed: false },\n      ];\n    case TOGGLE_TODO:\n      return state.map((todo) =>\n        todo.id === action.payload\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      );\n    default:\n      return state;\n  }\n};\n\n// RTK equivalent\nimport { createSlice } from "@reduxjs/toolkit";\n\nconst todosSlice = createSlice({\n  name: "todos",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      state.push({ id: Date.now(), text: action.payload, completed: false });\n    },\n    toggleTodo: (state, action) => {\n      const todo = state.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n  },\n});\n\nexport const { addTodo, toggleTodo } = todosSlice.actions;\nexport default todosSlice.reducer;\n'})}),"\n",(0,r.jsx)(t.h2,{id:"installation-and-setup",children:"Installation and Setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"# Install Redux Toolkit and React-Redux\nnpm install @reduxjs/toolkit react-redux\n\n# Using RTK templates for new projects\nnpx degit reduxjs/redux-templates/packages/vite-template-redux my-app\n"})}),"\n",(0,r.jsx)(t.h3,{id:"store-configuration",children:"Store Configuration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// store.js\nimport { configureStore } from "@reduxjs/toolkit";\nimport todosSlice from "./features/todos/todosSlice";\nimport usersSlice from "./features/users/usersSlice";\n\nexport const store = configureStore({\n  reducer: {\n    todos: todosSlice,\n    users: usersSlice,\n  },\n  // RTK includes these by default:\n  // - redux-thunk middleware\n  // - Redux DevTools Extension\n  // - Immutability and serializability middleware (in dev)\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n'})}),"\n",(0,r.jsx)(t.h2,{id:"core-apis-deep-dive",children:"Core APIs Deep Dive"}),"\n",(0,r.jsx)(t.h3,{id:"createslice---the-heart-of-rtk",children:"createSlice() - The Heart of RTK"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'import { createSlice, PayloadAction } from "@reduxjs/toolkit";\n\ninterface Todo {\n  id: number;\n  text: string;\n  completed: boolean;\n}\n\ninterface TodosState {\n  items: Todo[];\n  filter: "all" | "active" | "completed";\n}\n\nconst initialState: TodosState = {\n  items: [],\n  filter: "all",\n};\n\nconst todosSlice = createSlice({\n  name: "todos",\n  initialState,\n  reducers: {\n    // RTK uses Immer internally - you can "mutate" the state\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.items.push({\n        id: Date.now(),\n        text: action.payload,\n        completed: false,\n      });\n    },\n\n    toggleTodo: (state, action: PayloadAction<number>) => {\n      const todo = state.items.find((todo) => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n\n    removeTodo: (state, action: PayloadAction<number>) => {\n      state.items = state.items.filter((todo) => todo.id !== action.payload);\n    },\n\n    setFilter: (\n      state,\n      action: PayloadAction<"all" | "active" | "completed">\n    ) => {\n      state.filter = action.payload;\n    },\n\n    // Prepare callback for more complex action payloads\n    addTodoWithId: {\n      reducer: (state, action: PayloadAction<Todo>) => {\n        state.items.push(action.payload);\n      },\n      prepare: (text: string) => ({\n        payload: {\n          id: Math.random(),\n          text,\n          completed: false,\n        },\n      }),\n    },\n  },\n});\n\nexport const { addTodo, toggleTodo, removeTodo, setFilter, addTodoWithId } =\n  todosSlice.actions;\nexport default todosSlice.reducer;\n'})}),"\n",(0,r.jsx)(t.h3,{id:"createasyncthunk---async-logic",children:"createAsyncThunk() - Async Logic"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\n// Async thunk for API calls\nexport const fetchTodos = createAsyncThunk(\n  'todos/fetchTodos',\n  async (userId: number, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/api/users/${userId}/todos`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTodoAsync = createAsyncThunk(\n  'todos/addTodo',\n  async (text: string, { getState, dispatch }) => {\n    const state = getState() as RootState;\n    const response = await fetch('/api/todos', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text, userId: state.auth.user.id }),\n    });\n    return await response.json();\n  }\n);\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: {\n    items: [],\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    // Sync reducers here\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodos.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchTodos.fulfilled, (state, action) => {\n        state.loading = false;\n        state.items = action.payload;\n      })\n      .addCase(fetchTodos.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"under-the-hood-how-rtk-works",children:"Under the Hood: How RTK Works"}),"\n",(0,r.jsx)(t.h3,{id:"createslice-implementation-concept",children:"createSlice Implementation Concept"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// Simplified createSlice implementation\nfunction createSlice({ name, initialState, reducers, extraReducers }) {\n  const actionCreators = {};\n  const actionTypes = {};\n\n  // Generate action types and creators\n  Object.keys(reducers).forEach((reducerName) => {\n    const type = `${name}/${reducerName}`;\n    actionTypes[reducerName] = type;\n\n    // Create action creator\n    actionCreators[reducerName] = (payload) => ({\n      type,\n      payload,\n    });\n  });\n\n  // Create the reducer function\n  const reducer = (state = initialState, action) => {\n    // Use Immer's produce for immutable updates\n    return produce(state, (draft) => {\n      const caseReducer = reducers[action.type];\n      if (caseReducer) {\n        caseReducer(draft, action);\n      }\n    });\n  };\n\n  // Handle extraReducers (for async thunks)\n  if (extraReducers) {\n    const extraReducerMap = {};\n    const builder = {\n      addCase: (actionCreator, reducer) => {\n        extraReducerMap[actionCreator.type] = reducer;\n      },\n    };\n    extraReducers(builder);\n\n    // Merge extra reducers with main reducer\n    const originalReducer = reducer;\n    reducer = (state, action) => {\n      const extraReducer = extraReducerMap[action.type];\n      if (extraReducer) {\n        return produce(state, (draft) => extraReducer(draft, action));\n      }\n      return originalReducer(state, action);\n    };\n  }\n\n  return {\n    actions: actionCreators,\n    reducer,\n    actionTypes,\n  };\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"immer-integration",children:"Immer Integration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// What RTK does internally with Immer\nimport produce from "immer";\n\n// Your "mutative" code\nconst reducer = (state, action) => {\n  state.items.push(newItem); // Looks like mutation\n};\n\n// What Immer actually does\nconst actualReducer = (state, action) => {\n  return produce(state, (draft) => {\n    draft.items.push(newItem); // Safe "mutation" on draft\n  });\n};\n'})}),"\n",(0,r.jsx)(t.h2,{id:"rtk-query-data-fetching-solution",children:"RTK Query: Data Fetching Solution"}),"\n",(0,r.jsx)(t.p,{children:"RTK Query is included in Redux Toolkit and provides powerful data fetching and caching capabilities."}),"\n",(0,r.jsx)(t.h3,{id:"basic-rtk-query-setup",children:"Basic RTK Query Setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// api/apiSlice.js\nimport { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";\n\nexport const apiSlice = createApi({\n  reducerPath: "api",\n  baseQuery: fetchBaseQuery({\n    baseUrl: "/api",\n    prepareHeaders: (headers, { getState }) => {\n      const token = getState().auth.token;\n      if (token) {\n        headers.set("authorization", `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  tagTypes: ["Todo", "User"],\n  endpoints: (builder) => ({\n    getTodos: builder.query({\n      query: () => "todos",\n      providesTags: ["Todo"],\n    }),\n    addTodo: builder.mutation({\n      query: (newTodo) => ({\n        url: "todos",\n        method: "POST",\n        body: newTodo,\n      }),\n      invalidatesTags: ["Todo"],\n    }),\n    updateTodo: builder.mutation({\n      query: ({ id, ...patch }) => ({\n        url: `todos/${id}`,\n        method: "PATCH",\n        body: patch,\n      }),\n      invalidatesTags: ["Todo"],\n    }),\n  }),\n});\n\nexport const { useGetTodosQuery, useAddTodoMutation, useUpdateTodoMutation } =\n  apiSlice;\n'})}),"\n",(0,r.jsx)(t.h3,{id:"using-rtk-query-hooks",children:"Using RTK Query Hooks"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'import { useGetTodosQuery, useAddTodoMutation } from "./api/apiSlice";\n\nconst TodoList = () => {\n  const { data: todos, error, isLoading, refetch } = useGetTodosQuery();\n\n  const [addTodo, { isLoading: isAdding }] = useAddTodoMutation();\n\n  const handleAddTodo = async (text) => {\n    try {\n      await addTodo({ text }).unwrap();\n    } catch (error) {\n      console.error("Failed to add todo:", error);\n    }\n  };\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      {todos?.map((todo) => (\n        <TodoItem key={todo.id} todo={todo} />\n      ))}\n      <button onClick={() => handleAddTodo("New todo")} disabled={isAdding}>\n        {isAdding ? "Adding..." : "Add Todo"}\n      </button>\n    </div>\n  );\n};\n'})}),"\n",(0,r.jsx)(t.h2,{id:"advanced-patterns-and-best-practices",children:"Advanced Patterns and Best Practices"}),"\n",(0,r.jsx)(t.h3,{id:"feature-based-file-structure",children:"Feature-Based File Structure"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"src/\n  features/\n    todos/\n      todosSlice.js\n      todosApi.js\n      TodoList.jsx\n      TodoItem.jsx\n    users/\n      usersSlice.js\n      usersApi.js\n  app/\n    store.js\n    rootReducer.js\n"})}),"\n",(0,r.jsx)(t.h3,{id:"type-safe-redux-hooks",children:"Type-Safe Redux Hooks"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:'// app/hooks.ts\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport type { RootState, AppDispatch } from "./store";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n'})}),"\n",(0,r.jsx)(t.h3,{id:"slice-composition",children:"Slice Composition"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'// Combining multiple slices\nimport { combineSlices } from "@reduxjs/toolkit";\nimport { todosSlice } from "./todosSlice";\nimport { usersSlice } from "./usersSlice";\n\nexport const rootReducer = combineSlices(todosSlice, usersSlice);\n\n// Lazy slice loading\nconst store = configureStore({\n  reducer: {\n    todos: todosSlice.reducer,\n  },\n});\n\n// Later, inject a new slice\nstore.dispatch({\n  type: "reducer/inject",\n  payload: { key: "users", reducer: usersSlice.reducer },\n});\n'})}),"\n",(0,r.jsx)(t.h2,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,r.jsx)(t.h3,{id:"selector-optimization",children:"Selector Optimization"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'import { createSelector } from "@reduxjs/toolkit";\n\n// Memoized selectors\nconst selectTodos = (state) => state.todos.items;\nconst selectFilter = (state) => state.todos.filter;\n\nexport const selectFilteredTodos = createSelector(\n  [selectTodos, selectFilter],\n  (todos, filter) => {\n    switch (filter) {\n      case "active":\n        return todos.filter((todo) => !todo.completed);\n      case "completed":\n        return todos.filter((todo) => todo.completed);\n      default:\n        return todos;\n    }\n  }\n);\n'})}),"\n",(0,r.jsx)(t.h3,{id:"rtk-query-cache-configuration",children:"RTK Query Cache Configuration"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:'const apiSlice = createApi({\n  // Cache data for 60 seconds\n  keepUnusedDataFor: 60,\n\n  // Refetch on mount/focus\n  refetchOnMountOrArgChange: true,\n  refetchOnFocus: true,\n  refetchOnReconnect: true,\n\n  endpoints: (builder) => ({\n    getTodos: builder.query({\n      query: () => "todos",\n      // Custom cache behavior\n      keepUnusedDataFor: 30,\n    }),\n  }),\n});\n'})}),"\n",(0,r.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(t.p,{children:"Redux Toolkit transforms Redux development from a verbose, configuration-heavy experience into a streamlined, developer-friendly process. By abstracting away common patterns and providing sensible defaults, RTK allows you to focus on your application logic rather than Redux boilerplate."}),"\n",(0,r.jsx)(t.h3,{id:"key-rtk-advantages",children:"Key RTK Advantages"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Dramatic Boilerplate Reduction"}),": ",(0,r.jsx)(t.code,{children:"createSlice"})," eliminates action types and creators"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Simplified Store Setup"}),": ",(0,r.jsx)(t.code,{children:"configureStore"})," provides sensible defaults"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Built-in Immer"}),': Write "mutative" logic that\'s actually immutable']}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Powerful Data Fetching"}),": RTK Query handles caching, loading states, and cache invalidation"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Excellent TypeScript Support"}),": First-class TypeScript integration"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Performance Optimized"}),": Built-in memoization and optimization strategies"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["As highlighted in the ",(0,r.jsx)(t.a,{href:"https://github.com/reduxjs/redux-toolkit",children:"Redux Toolkit repository"}),", RTK is now the recommended approach for all Redux development, providing the benefits of Redux with significantly improved developer experience and reduced complexity."]}),"\n",(0,r.jsx)(t.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://redux-toolkit.js.org/",children:"Redux Toolkit Documentation"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://redux-toolkit.js.org/rtk-query/overview",children:"RTK Query Overview"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/reduxjs/redux-toolkit",children:"Redux Toolkit GitHub"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var o=n(6540);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);