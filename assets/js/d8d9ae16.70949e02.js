"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2097],{3719:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"project-detail/react-native","title":"React Native: Under the Hood","description":"Table of Contents","source":"@site/docs/project-detail/react-native.md","sourceDirName":"project-detail","slug":"/project-detail/react-native","permalink":"/frontend-system-design/docs/project-detail/react-native","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/react-native.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"React Virtuoso: Deep Dive into Virtual Scrolling","permalink":"/frontend-system-design/docs/project-detail/react-virtuoso"},"next":{"title":"Dexie.js and IndexedDB: Under the Hood","permalink":"/frontend-system-design/docs/project-detail/dexie-and-indexed-db"}}');var i=r(4848),a=r(8453);const o={},s="React Native: Under the Hood",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Advantages",id:"key-advantages",level:3},{value:"Getting Started with React Native",id:"getting-started-with-react-native",level:2},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Creating Your First App",id:"creating-your-first-app",level:3},{value:"Basic Component Structure",id:"basic-component-structure",level:3},{value:"React Native Architecture Deep Dive",id:"react-native-architecture-deep-dive",level:2},{value:"Thread Architecture",id:"thread-architecture",level:3},{value:"JavaScript Engine Integration",id:"javascript-engine-integration",level:3},{value:"Hermes JavaScript Engine",id:"hermes-javascript-engine",level:4},{value:"Engine Configuration (android/app/build.gradle)",id:"engine-configuration-androidappbuildgradle",level:4},{value:"The Bridge System",id:"the-bridge-system",level:2},{value:"Legacy Bridge Architecture",id:"legacy-bridge-architecture",level:3},{value:"Bridge Message Flow",id:"bridge-message-flow",level:3},{value:"Bridge Performance Considerations",id:"bridge-performance-considerations",level:3},{value:"Build Process: From JavaScript to Native Apps",id:"build-process-from-javascript-to-native-apps",level:2},{value:"Metro Bundler",id:"metro-bundler",level:3},{value:"iOS Build Process",id:"ios-build-process",level:3},{value:"Xcode Integration",id:"xcode-integration",level:4},{value:"iOS Native Bridge Setup (AppDelegate.m)",id:"ios-native-bridge-setup-appdelegatem",level:4},{value:"Android Build Process",id:"android-build-process",level:3},{value:"Gradle Build Configuration",id:"gradle-build-configuration",level:4},{value:"Android Native Bridge Setup (MainApplication.java)",id:"android-native-bridge-setup-mainapplicationjava",level:4},{value:"Native Modules and Platform Integration",id:"native-modules-and-platform-integration",level:2},{value:"Creating iOS Native Modules",id:"creating-ios-native-modules",level:3},{value:"CalendarManager.h",id:"calendarmanagerh",level:4},{value:"CalendarManager.m",id:"calendarmanagerm",level:4},{value:"Creating Android Native Modules",id:"creating-android-native-modules",level:3},{value:"CalendarModule.java",id:"calendarmodulejava",level:4},{value:"JavaScript Usage of Native Modules",id:"javascript-usage-of-native-modules",level:3},{value:"Push Notifications Implementation",id:"push-notifications-implementation",level:2},{value:"Setting Up Push Notifications",id:"setting-up-push-notifications",level:3},{value:"Install Dependencies",id:"install-dependencies",level:4},{value:"iOS Configuration",id:"ios-configuration",level:4},{value:"Android Configuration",id:"android-configuration",level:4},{value:"React Native Push Notification Implementation",id:"react-native-push-notification-implementation",level:4},{value:"The New Architecture: Fabric and TurboModules",id:"the-new-architecture-fabric-and-turbomodules",level:2},{value:"JavaScript Interface (JSI)",id:"javascript-interface-jsi",level:3},{value:"TurboModules Implementation",id:"turbomodules-implementation",level:3},{value:"Fabric Renderer",id:"fabric-renderer",level:3},{value:"Performance Optimization Strategies",id:"performance-optimization-strategies",level:2},{value:"Bundle Size Optimization",id:"bundle-size-optimization",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Image Optimization",id:"image-optimization",level:3},{value:"Real-World Implementation Examples",id:"real-world-implementation-examples",level:2},{value:"Navigation Setup with React Navigation",id:"navigation-setup-with-react-navigation",level:3},{value:"State Management with Redux Toolkit",id:"state-management-with-redux-toolkit",level:3},{value:"Debugging and Development Tools",id:"debugging-and-development-tools",level:2},{value:"Flipper Integration",id:"flipper-integration",level:3},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Best Practices and Common Pitfalls",id:"best-practices-and-common-pitfalls",level:2},{value:"Performance Best Practices",id:"performance-best-practices",level:3},{value:"Memory Management",id:"memory-management-1",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"Further Resources",id:"further-resources",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"react-native-under-the-hood",children:"React Native: Under the Hood"})}),"\n",(0,i.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#getting-started-with-react-native",children:"Getting Started with React Native"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#react-native-architecture-deep-dive",children:"React Native Architecture Deep Dive"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#the-bridge-system",children:"The Bridge System"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#build-process-from-javascript-to-native-apps",children:"Build Process: From JavaScript to Native Apps"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#native-modules-and-platform-integration",children:"Native Modules and Platform Integration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#push-notifications-implementation",children:"Push Notifications Implementation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#the-new-architecture-fabric-and-turbomodules",children:"The New Architecture: Fabric and TurboModules"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#performance-optimization-strategies",children:"Performance Optimization Strategies"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#real-world-implementation-examples",children:"Real-World Implementation Examples"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#debugging-and-development-tools",children:"Debugging and Development Tools"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#best-practices-and-common-pitfalls",children:"Best Practices and Common Pitfalls"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(n.p,{children:["React Native is a powerful framework developed by ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/react-native",children:"Meta (Facebook)"})," that enables developers to build native mobile applications using JavaScript and React. Unlike hybrid frameworks that run in a WebView, React Native compiles to actual native components, providing near-native performance while maintaining the development velocity of web technologies."]}),"\n",(0,i.jsx)(n.h3,{id:"key-advantages",children:"Key Advantages"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write Once, Run Anywhere"}),": Share code between iOS and Android platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Native Performance"}),": Direct compilation to native components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Development Cycle"}),": Hot reloading and live reload capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Large Ecosystem"}),": Extensive library and community support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Native API Access"}),": Full access to platform-specific APIs"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started-with-react-native",children:"Getting Started with React Native"}),"\n",(0,i.jsx)(n.h3,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install Node.js (LTS version recommended)\r\n# Download from https://nodejs.org/\r\n\r\n# Install React Native CLI\r\nnpm install -g @react-native-community/cli\r\n\r\n# For iOS development (macOS only)\r\n# Install Xcode from App Store\r\n# Install CocoaPods\r\nsudo gem install cocoapods\r\n\r\n# For Android development\r\n# Install Android Studio\r\n# Set up Android SDK and emulator\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-your-first-app",children:"Creating Your First App"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create a new React Native project\r\nnpx react-native init MyAwesomeApp\r\n\r\n# Navigate to project directory\r\ncd MyAwesomeApp\r\n\r\n# Start Metro bundler\r\nnpx react-native start\r\n\r\n# Run on iOS (macOS only)\r\nnpx react-native run-ios\r\n\r\n# Run on Android\r\nnpx react-native run-android\n"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-component-structure",children:"Basic Component Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import React from "react";\r\nimport {\r\n  SafeAreaView,\r\n  ScrollView,\r\n  StatusBar,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Alert,\r\n} from "react-native";\r\n\r\nconst App = () => {\r\n  const handlePress = () => {\r\n    Alert.alert("Hello", "Welcome to React Native!");\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar barStyle="dark-content" />\r\n      <ScrollView contentInsetAdjustmentBehavior="automatic">\r\n        <View style={styles.body}>\r\n          <Text style={styles.title}>My Awesome App</Text>\r\n          <TouchableOpacity style={styles.button} onPress={handlePress}>\r\n            <Text style={styles.buttonText}>Press Me</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </ScrollView>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: "#f5f5f5",\r\n  },\r\n  body: {\r\n    padding: 20,\r\n    alignItems: "center",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: "bold",\r\n    marginBottom: 20,\r\n    color: "#333",\r\n  },\r\n  button: {\r\n    backgroundColor: "#007AFF",\r\n    paddingHorizontal: 20,\r\n    paddingVertical: 10,\r\n    borderRadius: 8,\r\n  },\r\n  buttonText: {\r\n    color: "white",\r\n    fontSize: 16,\r\n    fontWeight: "600",\r\n  },\r\n});\r\n\r\nexport default App;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"react-native-architecture-deep-dive",children:"React Native Architecture Deep Dive"}),"\n",(0,i.jsx)(n.h3,{id:"thread-architecture",children:"Thread Architecture"}),"\n",(0,i.jsx)(n.p,{children:"React Native operates on multiple threads to ensure smooth performance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                  React Native App                       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502  JavaScript Thread          \u2502    Native Thread         \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 React Components      \u2502    \u251c\u2500\u2500\u2500 UI Components    \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Business Logic        \u2502    \u251c\u2500\u2500\u2500 Native APIs      \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 State Management      \u2502    \u251c\u2500\u2500\u2500 Platform APIs    \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Event Handling        \u2502    \u2514\u2500\u2500\u2500 Hardware APIs    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                    Bridge Layer                         \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Message Serialization                            \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Async Communication                              \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Batched Updates                                  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502            Native Platform Layer                       \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 iOS (Objective-C/Swift)                         \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Android (Java/Kotlin)                           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"javascript-engine-integration",children:"JavaScript Engine Integration"}),"\n",(0,i.jsx)(n.h4,{id:"hermes-javascript-engine",children:"Hermes JavaScript Engine"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Hermes optimizations can be verified\r\nconst isHermesEnabled = !!global.HermesInternal;\r\nconsole.log("Hermes enabled:", isHermesEnabled);\r\n\r\n// Hermes provides specific APIs\r\nif (global.HermesInternal) {\r\n  // Access Hermes-specific functionality\r\n  const hermesVersion =\r\n    global.HermesInternal.getRuntimeProperties()["OSS Release Version"];\r\n  console.log("Hermes version:", hermesVersion);\r\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"engine-configuration-androidappbuildgradle",children:"Engine Configuration (android/app/build.gradle)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:'project.ext.react = [\r\n    enableHermes: true,  // Enable Hermes JS engine\r\n    hermesCommand: "../../node_modules/hermes-engine/%OS-BIN%/hermes",\r\n    bundleInDebug: false,\r\n    bundleInRelease: true,\r\n]\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-bridge-system",children:"The Bridge System"}),"\n",(0,i.jsx)(n.h3,{id:"legacy-bridge-architecture",children:"Legacy Bridge Architecture"}),"\n",(0,i.jsx)(n.p,{children:"The React Native bridge is responsible for communication between JavaScript and native code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Bridge communication example\r\nimport { NativeModules } from "react-native";\r\n\r\n// Accessing native module through bridge\r\nconst { CalendarModule } = NativeModules;\r\n\r\n// Asynchronous bridge call\r\nCalendarModule.createCalendarEvent("Party", "My House")\r\n  .then((eventId) => {\r\n    console.log("Event created with ID:", eventId);\r\n  })\r\n  .catch((error) => {\r\n    console.error("Failed to create event:", error);\r\n  });\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bridge-message-flow",children:"Bridge Message Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// JavaScript side - sending message to native\r\nconst sendBridgeMessage = (module, method, args) => {\r\n  // 1. Message is serialized to JSON\r\n  const message = JSON.stringify({\r\n    module,\r\n    method,\r\n    args,\r\n    callId: Math.random(),\r\n  });\r\n\r\n  // 2. Message is queued for batch processing\r\n  MessageQueue.enqueueNativeCall(message);\r\n\r\n  // 3. Bridge flushes messages asynchronously\r\n  Bridge.flushQueue();\r\n};\r\n\r\n// Native side receives and processes messages\r\n// Platform-specific implementation handles deserialization\r\n// and method invocation on native modules\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bridge-performance-considerations",children:"Bridge Performance Considerations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// \u274c Avoid frequent bridge calls\r\nsetInterval(() => {\r\n  NativeModules.LocationManager.getCurrentPosition(); // Called every 100ms\r\n}, 100);\r\n\r\n// \u2705 Batch operations and use efficient patterns\r\nconst batchOperations = async () => {\r\n  const operations = [\r\n    NativeModules.DatabaseManager.getUser(1),\r\n    NativeModules.DatabaseManager.getUser(2),\r\n    NativeModules.DatabaseManager.getUser(3),\r\n  ];\r\n\r\n  const results = await Promise.all(operations);\r\n  return results;\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"build-process-from-javascript-to-native-apps",children:"Build Process: From JavaScript to Native Apps"}),"\n",(0,i.jsx)(n.h3,{id:"metro-bundler",children:"Metro Bundler"}),"\n",(0,i.jsx)(n.p,{children:"Metro is React Native's JavaScript bundler that transforms and bundles your code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// metro.config.js\r\nmodule.exports = {\r\n  transformer: {\r\n    getTransformOptions: async () => ({\r\n      transform: {\r\n        experimentalImportSupport: false,\r\n        inlineRequires: true, // Optimize require() calls\r\n      },\r\n    }),\r\n  },\r\n  resolver: {\r\n    alias: {\r\n      "@components": "./src/components",\r\n      "@utils": "./src/utils",\r\n    },\r\n  },\r\n  serializer: {\r\n    createModuleIdFactory: function () {\r\n      return function (path) {\r\n        // Custom module ID generation for better caching\r\n        return path.substr(1).replace(/\\//g, "_");\r\n      };\r\n    },\r\n  },\r\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ios-build-process",children:"iOS Build Process"}),"\n",(0,i.jsx)(n.h4,{id:"xcode-integration",children:"Xcode Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# iOS build process steps\r\ncd ios\r\n\r\n# 1. Install CocoaPods dependencies\r\npod install\r\n\r\n# 2. Build for device/simulator\r\nxcodebuild -workspace MyApp.xcworkspace \\\r\n  -scheme MyApp \\\r\n  -configuration Release \\\r\n  -destination 'platform=iOS Simulator,name=iPhone 14' \\\r\n  build\r\n\r\n# 3. Archive for App Store\r\nxcodebuild -workspace MyApp.xcworkspace \\\r\n  -scheme MyApp \\\r\n  -configuration Release \\\r\n  archive \\\r\n  -archivePath MyApp.xcarchive\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ios-native-bridge-setup-appdelegatem",children:"iOS Native Bridge Setup (AppDelegate.m)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objective-c",children:'#import "AppDelegate.h"\r\n#import <React/RCTBridge.h>\r\n#import <React/RCTBundleURLProvider.h>\r\n#import <React/RCTRootView.h>\r\n\r\n@implementation AppDelegate\r\n\r\n- (BOOL)application:(UIApplication *)application\r\n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self\r\n                                             launchOptions:launchOptions];\r\n\r\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge\r\n                                                   moduleName:@"MyApp"\r\n                                            initialProperties:nil];\r\n\r\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\r\n  UIViewController *rootViewController = [UIViewController new];\r\n  rootViewController.view = rootView;\r\n  self.window.rootViewController = rootViewController;\r\n  [self.window makeKeyAndVisible];\r\n\r\n  return YES;\r\n}\r\n\r\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\r\n{\r\n#if DEBUG\r\n  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];\r\n#else\r\n  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];\r\n#endif\r\n}\r\n\r\n@end\n'})}),"\n",(0,i.jsx)(n.h3,{id:"android-build-process",children:"Android Build Process"}),"\n",(0,i.jsx)(n.h4,{id:"gradle-build-configuration",children:"Gradle Build Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:'// android/app/build.gradle\r\nandroid {\r\n    compileSdkVersion rootProject.ext.compileSdkVersion\r\n\r\n    defaultConfig {\r\n        applicationId "com.myapp"\r\n        minSdkVersion rootProject.ext.minSdkVersion\r\n        targetSdkVersion rootProject.ext.targetSdkVersion\r\n        versionCode 1\r\n        versionName "1.0"\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            signingConfig signingConfigs.debug\r\n        }\r\n        release {\r\n            // Enable code shrinking and obfuscation\r\n            minifyEnabled enableProguardInReleaseBuilds\r\n            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"\r\n            signingConfig signingConfigs.release\r\n        }\r\n    }\r\n}\r\n\r\n// Bundle React Native code and images\r\napply from: "../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"\r\napplyNativeModulesAppBuildGradle(project)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"android-native-bridge-setup-mainapplicationjava",children:"Android Native Bridge Setup (MainApplication.java)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.myapp;\r\n\r\nimport android.app.Application;\r\nimport com.facebook.react.ReactApplication;\r\nimport com.facebook.react.ReactNativeHost;\r\nimport com.facebook.react.ReactPackage;\r\nimport com.facebook.react.shell.MainReactPackage;\r\nimport com.facebook.soloader.SoLoader;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class MainApplication extends Application implements ReactApplication {\r\n\r\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\r\n    @Override\r\n    public boolean getUseDeveloperSupport() {\r\n      return BuildConfig.DEBUG;\r\n    }\r\n\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n      return Arrays.<ReactPackage>asList(\r\n          new MainReactPackage(),\r\n          // Add your custom native modules here\r\n          new CustomNativePackage()\r\n      );\r\n    }\r\n\r\n    @Override\r\n    protected String getJSMainModuleName() {\r\n      return "index";\r\n    }\r\n  };\r\n\r\n  @Override\r\n  public ReactNativeHost getReactNativeHost() {\r\n    return mReactNativeHost;\r\n  }\r\n\r\n  @Override\r\n  public void onCreate() {\r\n    super.onCreate();\r\n    SoLoader.init(this, /* native exopackage */ false);\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"native-modules-and-platform-integration",children:"Native Modules and Platform Integration"}),"\n",(0,i.jsx)(n.h3,{id:"creating-ios-native-modules",children:"Creating iOS Native Modules"}),"\n",(0,i.jsx)(n.h4,{id:"calendarmanagerh",children:"CalendarManager.h"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objective-c",children:"#import <React/RCTBridgeModule.h>\r\n#import <React/RCTEventEmitter.h>\r\n\r\n@interface CalendarManager : RCTEventEmitter <RCTBridgeModule>\r\n@end\n"})}),"\n",(0,i.jsx)(n.h4,{id:"calendarmanagerm",children:"CalendarManager.m"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objective-c",children:'#import "CalendarManager.h"\r\n#import <EventKit/EventKit.h>\r\n\r\n@implementation CalendarManager\r\n\r\n// Export module to React Native\r\nRCT_EXPORT_MODULE();\r\n\r\n// Export method to JavaScript\r\nRCT_EXPORT_METHOD(createEvent:(NSString *)title\r\n                  location:(NSString *)location\r\n                  resolver:(RCTPromiseResolveBlock)resolve\r\n                  rejecter:(RCTPromiseRejectBlock)reject)\r\n{\r\n  EKEventStore *eventStore = [[EKEventStore alloc] init];\r\n\r\n  [eventStore requestAccessToEntityType:EKEntityTypeEvent\r\n                             completion:^(BOOL granted, NSError *error) {\r\n    if (granted) {\r\n      EKEvent *event = [EKEvent eventWithEventStore:eventStore];\r\n      event.title = title;\r\n      event.location = location;\r\n      event.startDate = [NSDate date];\r\n      event.endDate = [event.startDate dateByAddingTimeInterval:3600]; // 1 hour\r\n      event.calendar = [eventStore defaultCalendarForNewEvents];\r\n\r\n      NSError *saveError = nil;\r\n      BOOL success = [eventStore saveEvent:event span:EKSpanThisEvent error:&saveError];\r\n\r\n      if (success) {\r\n        resolve(event.eventIdentifier);\r\n      } else {\r\n        reject(@"event_failure", @"Failed to save event", saveError);\r\n      }\r\n    } else {\r\n      reject(@"permission_denied", @"Calendar access denied", error);\r\n    }\r\n  }];\r\n}\r\n\r\n// Export constants to JavaScript\r\n- (NSDictionary *)constantsToExport\r\n{\r\n  return @{\r\n    @"DEFAULT_EVENT_NAME": @"New Event",\r\n    @"EVENT_DURATION": @3600\r\n  };\r\n}\r\n\r\n// Required for event emitter\r\n- (NSArray<NSString *> *)supportedEvents\r\n{\r\n  return @[@"EventCreated", @"EventDeleted"];\r\n}\r\n\r\n@end\n'})}),"\n",(0,i.jsx)(n.h3,{id:"creating-android-native-modules",children:"Creating Android Native Modules"}),"\n",(0,i.jsx)(n.h4,{id:"calendarmodulejava",children:"CalendarModule.java"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.myapp.modules;\r\n\r\nimport android.provider.CalendarContract;\r\nimport android.content.ContentResolver;\r\nimport android.content.ContentValues;\r\nimport android.net.Uri;\r\n\r\nimport com.facebook.react.bridge.ReactApplicationContext;\r\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\r\nimport com.facebook.react.bridge.ReactMethod;\r\nimport com.facebook.react.bridge.Promise;\r\nimport com.facebook.react.bridge.WritableMap;\r\nimport com.facebook.react.bridge.Arguments;\r\nimport com.facebook.react.modules.core.DeviceEventManagerModule;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class CalendarModule extends ReactContextBaseJavaModule {\r\n\r\n    private static final String MODULE_NAME = "CalendarModule";\r\n    private ReactApplicationContext reactContext;\r\n\r\n    public CalendarModule(ReactApplicationContext reactContext) {\r\n        super(reactContext);\r\n        this.reactContext = reactContext;\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return MODULE_NAME;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> getConstants() {\r\n        final Map<String, Object> constants = new HashMap<>();\r\n        constants.put("DEFAULT_EVENT_NAME", "New Event");\r\n        constants.put("EVENT_DURATION", 3600000); // 1 hour in milliseconds\r\n        return constants;\r\n    }\r\n\r\n    @ReactMethod\r\n    public void createEvent(String title, String location, Promise promise) {\r\n        try {\r\n            ContentResolver contentResolver = reactContext.getContentResolver();\r\n            ContentValues values = new ContentValues();\r\n\r\n            values.put(CalendarContract.Events.TITLE, title);\r\n            values.put(CalendarContract.Events.DESCRIPTION, "Created by React Native app");\r\n            values.put(CalendarContract.Events.EVENT_LOCATION, location);\r\n            values.put(CalendarContract.Events.DTSTART, System.currentTimeMillis());\r\n            values.put(CalendarContract.Events.DTEND, System.currentTimeMillis() + 3600000);\r\n            values.put(CalendarContract.Events.CALENDAR_ID, 1);\r\n            values.put(CalendarContract.Events.EVENT_TIMEZONE, "UTC");\r\n\r\n            Uri uri = contentResolver.insert(CalendarContract.Events.CONTENT_URI, values);\r\n\r\n            if (uri != null) {\r\n                String eventId = uri.getLastPathSegment();\r\n\r\n                // Emit event to JavaScript\r\n                WritableMap params = Arguments.createMap();\r\n                params.putString("eventId", eventId);\r\n                params.putString("title", title);\r\n\r\n                reactContext\r\n                    .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)\r\n                    .emit("EventCreated", params);\r\n\r\n                promise.resolve(eventId);\r\n            } else {\r\n                promise.reject("CREATE_EVENT_ERROR", "Failed to create event");\r\n            }\r\n        } catch (Exception e) {\r\n            promise.reject("CREATE_EVENT_ERROR", e.getMessage(), e);\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"javascript-usage-of-native-modules",children:"JavaScript Usage of Native Modules"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { NativeModules, NativeEventEmitter } from "react-native";\r\n\r\nconst { CalendarModule } = NativeModules;\r\n\r\n// Create event listener for native events\r\nconst calendarEventEmitter = new NativeEventEmitter(CalendarModule);\r\n\r\nclass CalendarService {\r\n  constructor() {\r\n    // Listen for events from native module\r\n    this.eventSubscription = calendarEventEmitter.addListener(\r\n      "EventCreated",\r\n      this.handleEventCreated.bind(this)\r\n    );\r\n  }\r\n\r\n  handleEventCreated = (event) => {\r\n    console.log("Event created:", event);\r\n    // Update UI or state based on native event\r\n  };\r\n\r\n  createEvent = async (title, location) => {\r\n    try {\r\n      const eventId = await CalendarModule.createEvent(title, location);\r\n      console.log("Event created with ID:", eventId);\r\n      return eventId;\r\n    } catch (error) {\r\n      console.error("Failed to create event:", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  getConstants = () => {\r\n    return CalendarModule.getConstants();\r\n  };\r\n\r\n  cleanup = () => {\r\n    if (this.eventSubscription) {\r\n      this.eventSubscription.remove();\r\n    }\r\n  };\r\n}\r\n\r\nexport default CalendarService;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"push-notifications-implementation",children:"Push Notifications Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"setting-up-push-notifications",children:"Setting Up Push Notifications"}),"\n",(0,i.jsx)(n.h4,{id:"install-dependencies",children:"Install Dependencies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install push notification library\r\nnpm install @react-native-async-storage/async-storage\r\nnpm install @react-native-firebase/app @react-native-firebase/messaging\r\n\r\n# For iOS\r\ncd ios && pod install\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ios-configuration",children:"iOS Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objective-c",children:"// AppDelegate.m - iOS push notification setup\r\n#import <UserNotifications/UserNotifications.h>\r\n#import <RNCPushNotificationIOS.h>\r\n\r\n@implementation AppDelegate\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\r\n{\r\n  // Request notification permissions\r\n  UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\r\n  center.delegate = self;\r\n  [center requestAuthorizationWithOptions:(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge) completionHandler:^(BOOL granted, NSError * _Nullable error){\r\n    if (granted) {\r\n      dispatch_async(dispatch_get_main_queue(), ^{\r\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\r\n      });\r\n    }\r\n  }];\r\n\r\n  return YES;\r\n}\r\n\r\n// Handle registration for remote notifications\r\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\r\n{\r\n  [RNCPushNotificationIOS didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\r\n}\r\n\r\n// Handle notification received while app is in foreground\r\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler\r\n{\r\n  completionHandler(UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert | UNNotificationPresentationOptionBadge);\r\n}\r\n\r\n@end\n"})}),"\n",(0,i.jsx)(n.h4,{id:"android-configuration",children:"Android Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'\x3c!-- android/app/src/main/AndroidManifest.xml --\x3e\r\n<uses-permission android:name="android.permission.INTERNET" />\r\n<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />\r\n<uses-permission android:name="android.permission.VIBRATE" />\r\n\r\n<application>\r\n  \x3c!-- Firebase messaging service --\x3e\r\n  <service\r\n    android:name="io.invertase.firebase.messaging.RNFirebaseMessagingService"\r\n    android:exported="false">\r\n    <intent-filter>\r\n      <action android:name="com.google.firebase.MESSAGING_EVENT" />\r\n    </intent-filter>\r\n  </service>\r\n\r\n  \x3c!-- Notification channel for Android 8.0+ --\x3e\r\n  <meta-data\r\n    android:name="com.google.firebase.messaging.default_notification_channel_id"\r\n    android:value="default_notification_channel" />\r\n</application>\n'})}),"\n",(0,i.jsx)(n.h4,{id:"react-native-push-notification-implementation",children:"React Native Push Notification Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import messaging from "@react-native-firebase/messaging";\r\nimport { Platform, PermissionsAndroid } from "react-native";\r\nimport AsyncStorage from "@react-native-async-storage/async-storage";\r\n\r\nclass PushNotificationService {\r\n  constructor() {\r\n    this.configure();\r\n  }\r\n\r\n  configure = async () => {\r\n    // Request permission (iOS automatically shows prompt, Android needs manual request)\r\n    await this.requestPermission();\r\n\r\n    // Get FCM token\r\n    const token = await this.getFCMToken();\r\n    console.log("FCM Token:", token);\r\n\r\n    // Save token to backend\r\n    await this.saveTokenToBackend(token);\r\n\r\n    // Listen for token refresh\r\n    messaging().onTokenRefresh(this.onTokenRefresh);\r\n\r\n    // Listen for foreground messages\r\n    messaging().onMessage(this.onForegroundMessage);\r\n\r\n    // Listen for background/quit state messages\r\n    messaging().setBackgroundMessageHandler(this.onBackgroundMessage);\r\n\r\n    // Handle notification that opened the app\r\n    messaging().getInitialNotification().then(this.onNotificationOpenedApp);\r\n    messaging().onNotificationOpenedApp(this.onNotificationOpenedApp);\r\n  };\r\n\r\n  requestPermission = async () => {\r\n    if (Platform.OS === "ios") {\r\n      const authStatus = await messaging().requestPermission();\r\n      const enabled =\r\n        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||\r\n        authStatus === messaging.AuthorizationStatus.PROVISIONAL;\r\n\r\n      if (enabled) {\r\n        console.log("iOS notification permission granted");\r\n      }\r\n    } else {\r\n      // Android permission request\r\n      try {\r\n        const granted = await PermissionsAndroid.request(\r\n          PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS,\r\n          {\r\n            title: "Notification Permission",\r\n            message: "This app needs access to show notifications",\r\n            buttonNeutral: "Ask Me Later",\r\n            buttonNegative: "Cancel",\r\n            buttonPositive: "OK",\r\n          }\r\n        );\r\n\r\n        if (granted === PermissionsAndroid.RESULTS.GRANTED) {\r\n          console.log("Android notification permission granted");\r\n        }\r\n      } catch (err) {\r\n        console.warn("Permission request error:", err);\r\n      }\r\n    }\r\n  };\r\n\r\n  getFCMToken = async () => {\r\n    try {\r\n      let token = await AsyncStorage.getItem("fcm_token");\r\n\r\n      if (!token) {\r\n        token = await messaging().getToken();\r\n        await AsyncStorage.setItem("fcm_token", token);\r\n      }\r\n\r\n      return token;\r\n    } catch (error) {\r\n      console.error("Error getting FCM token:", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  saveTokenToBackend = async (token) => {\r\n    try {\r\n      // Send token to your backend server\r\n      const response = await fetch("https://your-api.com/api/fcm-token", {\r\n        method: "POST",\r\n        headers: {\r\n          "Content-Type": "application/json",\r\n          Authorization: "Bearer your-auth-token",\r\n        },\r\n        body: JSON.stringify({\r\n          token,\r\n          platform: Platform.OS,\r\n          timestamp: new Date().toISOString(),\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log("Token saved to backend successfully");\r\n      }\r\n    } catch (error) {\r\n      console.error("Failed to save token to backend:", error);\r\n    }\r\n  };\r\n\r\n  onTokenRefresh = async (token) => {\r\n    console.log("FCM token refreshed:", token);\r\n    await AsyncStorage.setItem("fcm_token", token);\r\n    await this.saveTokenToBackend(token);\r\n  };\r\n\r\n  onForegroundMessage = async (remoteMessage) => {\r\n    console.log("Foreground message received:", remoteMessage);\r\n\r\n    // Show local notification when app is in foreground\r\n    this.showLocalNotification(remoteMessage);\r\n  };\r\n\r\n  onBackgroundMessage = async (remoteMessage) => {\r\n    console.log("Background message received:", remoteMessage);\r\n\r\n    // Handle background message processing\r\n    // Note: Limited processing time in background\r\n    return Promise.resolve();\r\n  };\r\n\r\n  onNotificationOpenedApp = (remoteMessage) => {\r\n    if (remoteMessage) {\r\n      console.log("Notification opened app:", remoteMessage);\r\n\r\n      // Navigate to specific screen based on notification data\r\n      this.handleNotificationNavigation(remoteMessage.data);\r\n    }\r\n  };\r\n\r\n  showLocalNotification = (remoteMessage) => {\r\n    // Platform-specific local notification display\r\n    if (Platform.OS === "ios") {\r\n      // Use iOS local notification\r\n      const { title, body } = remoteMessage.notification || {};\r\n      // Implement iOS local notification\r\n    } else {\r\n      // Use Android local notification\r\n      // Implement Android local notification\r\n    }\r\n  };\r\n\r\n  handleNotificationNavigation = (data) => {\r\n    // Navigation logic based on notification data\r\n    const { screen, params } = data || {};\r\n\r\n    if (screen) {\r\n      // Use your navigation library to navigate\r\n      // NavigationService.navigate(screen, JSON.parse(params || \'{}\'));\r\n    }\r\n  };\r\n\r\n  // Subscribe to topic\r\n  subscribeToTopic = async (topic) => {\r\n    try {\r\n      await messaging().subscribeToTopic(topic);\r\n      console.log(`Subscribed to topic: ${topic}`);\r\n    } catch (error) {\r\n      console.error(`Failed to subscribe to topic ${topic}:`, error);\r\n    }\r\n  };\r\n\r\n  // Unsubscribe from topic\r\n  unsubscribeFromTopic = async (topic) => {\r\n    try {\r\n      await messaging().unsubscribeFromTopic(topic);\r\n      console.log(`Unsubscribed from topic: ${topic}`);\r\n    } catch (error) {\r\n      console.error(`Failed to unsubscribe from topic ${topic}:`, error);\r\n    }\r\n  };\r\n}\r\n\r\nexport default new PushNotificationService();\n'})}),"\n",(0,i.jsx)(n.h2,{id:"the-new-architecture-fabric-and-turbomodules",children:"The New Architecture: Fabric and TurboModules"}),"\n",(0,i.jsx)(n.h3,{id:"javascript-interface-jsi",children:"JavaScript Interface (JSI)"}),"\n",(0,i.jsx)(n.p,{children:"JSI enables direct, synchronous communication between JavaScript and native code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'// Native C++ JSI module example\r\n#include <jsi/jsi.h>\r\n\r\nusing namespace facebook;\r\n\r\nclass JSICalculator : public jsi::HostObject {\r\npublic:\r\n  jsi::Value get(jsi::Runtime& runtime, const jsi::PropNameID& propName) override {\r\n    auto name = propName.utf8(runtime);\r\n\r\n    if (name == "add") {\r\n      return jsi::Function::createFromHostFunction(\r\n        runtime,\r\n        jsi::PropNameID::forAscii(runtime, "add"),\r\n        2,\r\n        [](jsi::Runtime& runtime, const jsi::Value& thisValue, const jsi::Value* arguments, size_t count) -> jsi::Value {\r\n          if (count != 2) {\r\n            throw jsi::JSError(runtime, "add() requires exactly 2 arguments");\r\n          }\r\n\r\n          double a = arguments[0].asNumber();\r\n          double b = arguments[1].asNumber();\r\n          return jsi::Value(a + b);\r\n        }\r\n      );\r\n    }\r\n\r\n    return jsi::Value::undefined();\r\n  }\r\n};\r\n\r\n// Install JSI module\r\nvoid installJSICalculator(jsi::Runtime& runtime) {\r\n  auto calculator = std::make_shared<JSICalculator>();\r\n  runtime.global().setProperty(runtime, "JSICalculator", jsi::Object::createFromHostObject(runtime, calculator));\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"turbomodules-implementation",children:"TurboModules Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// TurboModule spec (NativeCalculator.js)\r\nimport type { TurboModule } from "react-native";\r\nimport { TurboModuleRegistry } from "react-native";\r\n\r\nexport interface Spec extends TurboModule {\r\n  add(a: number, b: number): number;\r\n  addAsync(a: number, b: number): Promise<number>;\r\n  getConstants(): {\r\n    PI: number,\r\n    E: number,\r\n  };\r\n}\r\n\r\nexport default TurboModuleRegistry.getEnforcing < Spec > "NativeCalculator";\n'})}),"\n",(0,i.jsx)(n.h3,{id:"fabric-renderer",children:"Fabric Renderer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Fabric component spec\r\nimport type { ViewProps } from "react-native";\r\nimport type { HostComponent } from "react-native";\r\nimport codegenNativeComponent from "react-native/Libraries/Utilities/codegenNativeComponent";\r\n\r\ntype NativeProps = $ReadOnly<{\r\n  ...ViewProps,\r\n  value: number,\r\n  onValueChange?: (event: { nativeEvent: { value: number } }) => void,\r\n}>;\r\n\r\nexport default codegenNativeComponent < NativeProps > "CustomSlider";\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-optimization-strategies",children:"Performance Optimization Strategies"}),"\n",(0,i.jsx)(n.h3,{id:"bundle-size-optimization",children:"Bundle Size Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// metro.config.js - Bundle optimization\r\nmodule.exports = {\r\n  transformer: {\r\n    minifierConfig: {\r\n      keepClassNames: true, // Required for some libraries\r\n      keepFnNames: true,\r\n      mangle: {\r\n        keep_fnames: true,\r\n      },\r\n    },\r\n  },\r\n  serializer: {\r\n    // Enable bundle splitting\r\n    createModuleIdFactory: () => (path) => {\r\n      const hash = require("crypto").createHash("md5");\r\n      hash.update(path);\r\n      return hash.digest("hex").substr(0, 8);\r\n    },\r\n  },\r\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Proper cleanup in components\r\nimport { useEffect, useRef } from 'react';\r\nimport { AppState, DeviceEventEmitter } from 'react-native';\r\n\r\nconst OptimizedComponent = () => {\r\n  const timeoutRef = useRef(null);\r\n  const subscriptionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Set up event listeners\r\n    subscriptionRef.current = DeviceEventEmitter.addListener(\r\n      'memoryWarning',\r\n      handleMemoryWarning\r\n    );\r\n\r\n    // Set up timers\r\n    timeoutRef.current = setTimeout(() => {\r\n      console.log('Timer executed');\r\n    }, 5000);\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n\r\n      if (subscriptionRef.current) {\r\n        subscriptionRef.current.remove();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const handleMemoryWarning = () => {\r\n    // Clear caches, reduce memory usage\r\n    console.log('Memory warning received');\r\n  };\r\n\r\n  return (\r\n    // Component JSX\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h3,{id:"image-optimization",children:"Image Optimization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'import { Image } from "react-native";\r\n\r\n// Optimized image usage\r\nconst OptimizedImageComponent = () => {\r\n  return (\r\n    <Image\r\n      source={{ uri: "https://example.com/image.jpg" }}\r\n      style={{ width: 200, height: 200 }}\r\n      resizeMode="cover"\r\n      // Enable native caching\r\n      cache="force-cache"\r\n      // Reduce memory usage for large images\r\n      fadeDuration={300}\r\n      // Optimize for performance\r\n      loadingIndicatorSource={{ uri: "placeholder.jpg" }}\r\n    />\r\n  );\r\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"real-world-implementation-examples",children:"Real-World Implementation Examples"}),"\n",(0,i.jsx)(n.h3,{id:"navigation-setup-with-react-navigation",children:"Navigation Setup with React Navigation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// App.js - Navigation setup\r\nimport React from "react";\r\nimport { NavigationContainer } from "@react-navigation/native";\r\nimport { createNativeStackNavigator } from "@react-navigation/native-stack";\r\nimport { createBottomTabNavigator } from "@react-navigation/bottom-tabs";\r\n\r\nimport HomeScreen from "./screens/HomeScreen";\r\nimport ProfileScreen from "./screens/ProfileScreen";\r\nimport SettingsScreen from "./screens/SettingsScreen";\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst TabNavigator = () => {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n        tabBarActiveTintColor: "#007AFF",\r\n        tabBarInactiveTintColor: "#999",\r\n      }}\r\n    >\r\n      <Tab.Screen name="Home" component={HomeScreen} />\r\n      <Tab.Screen name="Profile" component={ProfileScreen} />\r\n      <Tab.Screen name="Settings" component={SettingsScreen} />\r\n    </Tab.Navigator>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator>\r\n        <Stack.Screen\r\n          name="Main"\r\n          component={TabNavigator}\r\n          options={{ headerShown: false }}\r\n        />\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default App;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"state-management-with-redux-toolkit",children:"State Management with Redux Toolkit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// store/store.js\r\nimport { configureStore } from "@reduxjs/toolkit";\r\nimport userSlice from "./slices/userSlice";\r\nimport notificationSlice from "./slices/notificationSlice";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userSlice,\r\n    notifications: notificationSlice,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: ["persist/PERSIST"],\r\n      },\r\n    }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"debugging-and-development-tools",children:"Debugging and Development Tools"}),"\n",(0,i.jsx)(n.h3,{id:"flipper-integration",children:"Flipper Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Install Flipper for debugging\r\n# iOS\r\ncd ios && pod install\r\n\r\n# Add to AppDelegate.m\r\n#if DEBUG\r\n#import <FlipperKit/FlipperClient.h>\r\n#import <FlipperKitLayoutPlugin/FlipperKitLayoutPlugin.h>\r\n#import <FlipperKitNetworkPlugin/FlipperKitNetworkPlugin.h>\r\n\r\n- (void)initializeFlipper:(UIApplication *)application {\r\n  FlipperClient *client = [FlipperClient sharedClient];\r\n  [client addPlugin:[[FlipperKitLayoutPlugin alloc] initWithRootNode:application]];\r\n  [client addPlugin:[[FlipperKitNetworkPlugin alloc] init]];\r\n  [client start];\r\n}\r\n#endif\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Performance monitoring setup\r\nimport perf from '@react-native-firebase/perf';\r\n\r\nconst performanceTrace = perf().newTrace('app_startup');\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    const initializeApp = async () => {\r\n      performanceTrace.start();\r\n\r\n      // App initialization logic\r\n      await initializeServices();\r\n\r\n      performanceTrace.stop();\r\n    };\r\n\r\n    initializeApp();\r\n  }, []);\r\n\r\n  return (\r\n    // App components\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-and-common-pitfalls",children:"Best Practices and Common Pitfalls"}),"\n",(0,i.jsx)(n.h3,{id:"performance-best-practices",children:"Performance Best Practices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// \u2705 Use FlatList for large lists\r\nimport { FlatList } from "react-native";\r\n\r\nconst OptimizedList = ({ data }) => {\r\n  const renderItem = useCallback(\r\n    ({ item }) => <ItemComponent item={item} />,\r\n    []\r\n  );\r\n\r\n  return (\r\n    <FlatList\r\n      data={data}\r\n      renderItem={renderItem}\r\n      keyExtractor={(item) => item.id}\r\n      removeClippedSubviews={true}\r\n      maxToRenderPerBatch={10}\r\n      windowSize={10}\r\n      initialNumToRender={10}\r\n      getItemLayout={(data, index) => ({\r\n        length: ITEM_HEIGHT,\r\n        offset: ITEM_HEIGHT * index,\r\n        index,\r\n      })}\r\n    />\r\n  );\r\n};\r\n\r\n// \u274c Avoid ScrollView for large datasets\r\nconst IneffientList = ({ data }) => {\r\n  return (\r\n    <ScrollView>\r\n      {data.map((item) => (\r\n        <ItemComponent key={item.id} item={item} />\r\n      ))}\r\n    </ScrollView>\r\n  );\r\n};\n'})}),"\n",(0,i.jsx)(n.h3,{id:"memory-management-1",children:"Memory Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// \u2705 Proper cleanup and memoization\r\nimport { useMemo, useCallback, useEffect } from 'react';\r\n\r\nconst OptimizedComponent = ({ data, onPress }) => {\r\n  // Memoize expensive calculations\r\n  const processedData = useMemo(() => {\r\n    return data.map(item => ({\r\n      ...item,\r\n      processedValue: expensiveCalculation(item.value)\r\n    }));\r\n  }, [data]);\r\n\r\n  // Memoize callback functions\r\n  const handlePress = useCallback((item) => {\r\n    onPress(item);\r\n  }, [onPress]);\r\n\r\n  // Clean up side effects\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      // Some periodic task\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  return (\r\n    // Component render\r\n  );\r\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"React Native provides a powerful platform for building cross-platform mobile applications with near-native performance. Understanding its architecture\u2014from the bridge system to the new JSI and Fabric implementations\u2014enables developers to create efficient, maintainable applications."}),"\n",(0,i.jsx)(n.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Architecture Understanding"}),": The bridge system, while being replaced by JSI, remains crucial for understanding React Native's communication patterns."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Native Integration"}),": Native modules provide unlimited access to platform APIs while maintaining cross-platform code sharing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance Optimization"}),": Proper use of components like FlatList, image optimization, and memory management are essential for production apps."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Build Process Mastery"}),": Understanding Metro bundler, Xcode, and Gradle configurations helps optimize and troubleshoot builds."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Future-Proofing"}),": The new architecture with Fabric and TurboModules represents the future of React Native development."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/facebook/react-native",children:"React Native GitHub Repository"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://reactnative.dev/",children:"React Native Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://reactnative.dev/docs/the-new-architecture/landing-page",children:"React Native New Architecture"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://facebook.github.io/metro/",children:"Metro Bundler Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://fbflipper.com/",children:"Flipper Debugging Tool"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"React Native continues to evolve, bridging the gap between web and mobile development while providing developers with the tools needed to build sophisticated, high-performance mobile applications."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(6540);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);