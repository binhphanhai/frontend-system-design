"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6070],{1897:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"frontend-interview/data-structures-algorithms-interviews","title":"Data Structures and Algorithms Interviews","description":"Front end engineer\'s guide to DSA \u2013 important concepts to know, top practice questions to do, and other tips","source":"@site/docs/frontend-interview/04-data-structures-algorithms-interviews.md","sourceDirName":"frontend-interview","slug":"/frontend-interview/data-structures-algorithms-interviews","permalink":"/frontend-system-design/docs/frontend-interview/data-structures-algorithms-interviews","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/frontend-interview/04-data-structures-algorithms-interviews.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"frontendInterviewSidebar","previous":{"title":"JavaScript Coding Interviews","permalink":"/frontend-system-design/docs/frontend-interview/javascript-coding-interviews"},"next":{"title":"User Interface Coding Interviews","permalink":"/frontend-system-design/docs/frontend-interview/user-interface-coding-interviews"}}');var r=t(4848),s=t(8453);const o={},a="Data Structures and Algorithms Interviews",l={},c=[{value:"What Are Algorithmic Coding Questions?",id:"what-are-algorithmic-coding-questions",level:2},{value:"Examples",id:"examples",level:2},{value:"How to Prepare",id:"how-to-prepare",level:2},{value:"Important Concepts",id:"important-concepts",level:2},{value:"Common JavaScript Operations",id:"common-javascript-operations",level:2},{value:"Array",id:"array",level:3},{value:"Map",id:"map",level:3},{value:"Set",id:"set",level:3},{value:"Evaluation Axes",id:"evaluation-axes",level:2},{value:"Useful Tips",id:"useful-tips",level:2},{value:"Practice Questions",id:"practice-questions",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"data-structures-and-algorithms-interviews",children:"Data Structures and Algorithms Interviews"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Front end engineer's guide to DSA \u2013 important concepts to know, top practice questions to do, and other tips"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"what-are-algorithmic-coding-questions",children:"What Are Algorithmic Coding Questions?"}),"\n",(0,r.jsx)(n.p,{children:"Algorithmic coding questions are exactly the questions you can find on LeetCode. Algorithmic questions usually have the following traits:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"They aren't specific to the front end domain; they can be solved in most mainstream programming languages."}),"\n",(0,r.jsx)(n.li,{children:"Usually accompanied with impractical scenarios. You would not have encountered such a problem during real world development. Who ever had to flip a binary tree or count the number of palindromic substrings in a string?"}),"\n",(0,r.jsx)(n.li,{children:"Efficiency of the code (time and space complexity) is important and producing the most efficient solution requires solid knowledge of data structures and algorithms."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Although algorithmic coding questions aren't specific to front end, the skills needed to excel in these questions \u2014 strong analytical thinking, effective communication, a solid grasp of the common data structures and algorithms, good code hygiene \u2014 are still crucial skills good Front End Engineers should possess. Good Front End Engineers are also good Software Engineers and good Software Engineers should have mastery over basic DSA. Hence it's no surprise that many companies still ask algorithmic coding questions during the interview process. Familiarity with data structures and algorithms is also helpful for solving JavaScript coding questions and User Interface coding questions."}),"\n",(0,r.jsxs)(n.p,{children:["There are a ton of resources out there that cover algorithmic coding interviews and since they are not specific to front end, we won't go into too much detail on this page. We recommend referring to the ",(0,r.jsx)(n.a,{href:"https://www.techinterviewhandbook.org/",children:"Tech Interview Handbook"})," as a free resource if you would like to learn more about algorithmic coding interviews."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reverse a linked list"}),"\n",(0,r.jsx)(n.li,{children:"Determine if a string contains balanced brackets"}),"\n",(0,r.jsx)(n.li,{children:"Determine how many substrings in a string are palindromes"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"how-to-prepare",children:"How to Prepare"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Pick a good programming language to use. If you want to save preparation time you should probably stick with JavaScript for algorithmic questions, although note that the JavaScript language doesn't contain certain common useful data structures and algorithms whereas other languages like Python, Java, and C++ do. We recommend using Python for solving algorithmic interview questions."}),"\n",(0,r.jsx)(n.li,{children:"Plan your time and tackle topics and questions in order of importance."}),"\n",(0,r.jsx)(n.li,{children:"Combine studying and practicing for a single topic."}),"\n",(0,r.jsx)(n.li,{children:"Accompany practice with coding interview cheat sheets to internalize the must-dos and must-remembers."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Refer to ",(0,r.jsx)(n.a,{href:"https://www.techinterviewhandbook.org/coding-interview-prep/",children:"Tech Interview Handbook's step-by-step guide on how to prepare for algorithmic coding interviews"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"important-concepts",children:"Important Concepts"}),"\n",(0,r.jsx)(n.p,{children:"Although you can still be asked any algorithmic question, companies tend to go easier on Front End Engineer candidates and probably will not ask questions involving hard topics like dynamic programming or complex graph algorithms."}),"\n",(0,r.jsx)(n.p,{children:"Since the DOM is a tree, prioritize learning about trees and the various tree traversal algorithms."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Category"}),(0,r.jsx)(n.th,{children:"Important topics"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Data structures"}),(0,r.jsx)(n.td,{children:"Arrays, Maps, Stacks, Trees, Graphs, Matrix (2D Arrays), Sets"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Algorithms"}),(0,r.jsx)(n.td,{children:"Binary Search, Breadth-first Search, Depth-first Search, Topological Sorting, Recursion"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"common-javascript-operations",children:"Common JavaScript Operations"}),"\n",(0,r.jsx)(n.p,{children:"Be aware of the common JavaScript operations and their time complexities."}),"\n",(0,r.jsx)(n.h3,{id:"array",children:"Array"}),"\n",(0,r.jsx)(n.p,{children:"Array operations and their time complexity:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.concat()"}),": O(m + n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.every()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.fill()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.filter()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.find()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.pop()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.push()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.reduce()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.reverse()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.shift()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.slice()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.some()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.sort()"}),": O(nlgn)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.splice()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Array.prototype.unshift()"}),": O(m + n)"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"n"})," is the number of elements in the array and ",(0,r.jsx)(n.em,{children:"m"})," is the number of elements to be added."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"map",children:"Map"}),"\n",(0,r.jsx)(n.p,{children:"Map operations and their time complexity:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.clear()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.delete()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.entries()"}),": O(1) because it returns an iterator. Getting all the entries will take O(n) time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.forEach()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.get()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.has()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.keys()"}),": O(1) because it returns an iterator. Getting all the keys will take O(n) time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.set()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Map.prototype.values()"}),": O(1) because it returns an iterator. Getting all the values will take O(n) time"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"n"})," is the number of keys in the map."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"set",children:"Set"}),"\n",(0,r.jsx)(n.p,{children:"Set operations and their time complexity:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.add()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.clear()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.delete()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.entries()"}),": O(1) because it returns an iterator. Getting all the entries will take O(n) time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.forEach()"}),": O(n)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.has()"}),": O(1)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.keys()"}),": O(1) because it returns an iterator. Getting all the keys will take O(n) time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Set.prototype.values()"}),": O(1) because it returns an iterator. Getting all the values will take O(n) time"]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"n"})," is the number of elements in the set."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"evaluation-axes",children:"Evaluation Axes"}),"\n",(0,r.jsx)(n.p,{children:"During algorithmic coding interviews, interviewers are evaluating candidates on the following skills:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Problem solving"}),": Use a systematic and logical approach to understanding and addressing a problem. Break down the problem into smaller independent problems. Evaluate different approaches and their tradeoffs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Technical competence"}),": Ability to translate solutions into working code and demonstrating a strong understanding of the language being used."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Communication"}),": Ask questions to clarify details and clearly explain one's approach and considerations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Verification"}),": Identify various scenarios to test the code against, including edge cases. Be able to diagnose and fix any issues that arise."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"useful-tips",children:"Useful Tips"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wishful thinking"}),": JavaScript's standard library doesn't have some useful data structures and algorithms like queue, heap, binary search, which can make your life easier during JavaScript coding interviews. However, you can ask the interviewer if you can pretend such a data structure/algorithm exists and use it directly in your solution without implementing it."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pure functions"}),": Aim to write pure functions which have the benefit of reusability and modularity, i.e., functions which don't rely on state outside of the function and don't cause side effects."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Choose data structures wisely"}),": Pay attention to your choice of data structures and be aware of the time complexities of the code. Be familiar with the time/space complexities of the basic JavaScript Array, Object, Set, Map operations should you want to use them in your solution. Some of these time/space complexities differ across languages. Don't write code that runs in O(n^2) if it can be accomplished in O(n) runtime with the use of hash maps."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recursion edge cases"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clarifying input size"}),": If you have identified that solving the question requires recursion, ask about the input size and how to handle the case of recursion stack overflow. Usually you won't have to handle it but raising this issue demonstrates thoughtfulness."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cyclic structures"}),": Nested deep data structures can have recursive references to itself, which makes certain operations like serialization and traversal more tricky. Ask the interviewer if you have to handle such cases. Usually you won't have to handle it but raising this issue demonstrates thoughtfulness."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"practice-questions",children:"Practice Questions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Blind 75"})," is a famous and concise list of algorithm questions curated by ",(0,r.jsx)(n.a,{href:"https://www.linkedin.com/in/yangshun/",children:"Yangshun Tay"}),". You can practice the ",(0,r.jsx)(n.a,{href:"/interviews/blind75",children:"Blind 75 question list on GreatFrontEnd"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["GreatFrontEnd also provides some ",(0,r.jsx)(n.a,{href:"/questions/formats/algo-coding",children:"general practice questions for Data Structures and Algorithms"})," where you can practice implementing common data structures (",(0,r.jsx)(n.a,{href:"/questions/algo/stack",children:"Stack"}),", ",(0,r.jsx)(n.a,{href:"/questions/algo/queue",children:"Queue"}),") and algorithms (",(0,r.jsx)(n.a,{href:"/questions/algo/binary-search",children:"Binary Search"}),", ",(0,r.jsx)(n.a,{href:"/questions/algo/merge-sort",children:"Merge Sort"}),"), etc. in JavaScript."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);