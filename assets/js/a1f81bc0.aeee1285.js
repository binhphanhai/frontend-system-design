"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6023],{7394:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"project-detail/web-worker","title":"Web Workers: Background Threading in the Browser","description":"Table of Contents","source":"@site/docs/project-detail/web-worker.md","sourceDirName":"project-detail","slug":"/project-detail/web-worker","permalink":"/frontend-system-design/docs/project-detail/web-worker","draft":false,"unlisted":false,"editUrl":"https://github.com/binhphanhai/frontend-system-design/tree/main/Summarize/docs/project-detail/web-worker.md","tags":[],"version":"current","frontMatter":{},"sidebar":"projectDetailSidebar","previous":{"title":"WebSockets: Real-Time Communication Under the Hood","permalink":"/frontend-system-design/docs/project-detail/web-socket"},"next":{"title":"Service Workers: The Gateway to Progressive Web Apps","permalink":"/frontend-system-design/docs/project-detail/service-worker"}}');var s=n(4848),a=n(8453);const o={},i="Web Workers: Background Threading in the Browser",c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"Getting Started with Web Workers",id:"getting-started-with-web-workers",level:2},{value:"Browser Support Check",id:"browser-support-check",level:3},{value:"Basic Worker Implementation",id:"basic-worker-implementation",level:3},{value:"Main Thread (app.js)",id:"main-thread-appjs",level:4},{value:"Worker Script (worker.js)",id:"worker-script-workerjs",level:4},{value:"Types of Web Workers",id:"types-of-web-workers",level:2},{value:"Dedicated Workers",id:"dedicated-workers",level:3},{value:"Shared Workers",id:"shared-workers",level:3},{value:"Shared Worker Script (shared-worker.js)",id:"shared-worker-script-shared-workerjs",level:4},{value:"Using Shared Workers",id:"using-shared-workers",level:4},{value:"Under the Hood: Threading Model",id:"under-the-hood-threading-model",level:2},{value:"Browser Threading Architecture",id:"browser-threading-architecture",level:3},{value:"Worker Global Scope",id:"worker-global-scope",level:3},{value:"Message Passing and Data Transfer",id:"message-passing-and-data-transfer",level:2},{value:"Structured Clone Algorithm",id:"structured-clone-algorithm",level:3},{value:"Transferable Objects for Performance",id:"transferable-objects-for-performance",level:3},{value:"Advanced Message Handler",id:"advanced-message-handler",level:3},{value:"Worker Lifecycle Management",id:"worker-lifecycle-management",level:2},{value:"Worker Pool Implementation",id:"worker-pool-implementation",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Fibonacci Calculation Example",id:"fibonacci-calculation-example",level:3},{value:"Usage with Performance Monitoring",id:"usage-with-performance-monitoring",level:3},{value:"Real-World Implementation Examples",id:"real-world-implementation-examples",level:2},{value:"Image Processing Worker",id:"image-processing-worker",level:3},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Comprehensive Error Handling",id:"comprehensive-error-handling",level:3},{value:"Best Practices and Limitations",id:"best-practices-and-limitations",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Limitations and Considerations",id:"limitations-and-considerations",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Key Takeaways",id:"key-takeaways",level:3},{value:"When to Use Web Workers",id:"when-to-use-web-workers",level:3},{value:"Further Resources",id:"further-resources",level:3}];function d(e){const r={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"web-workers-background-threading-in-the-browser",children:"Web Workers: Background Threading in the Browser"})}),"\n",(0,s.jsx)(r.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#introduction",children:"Introduction"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#getting-started-with-web-workers",children:"Getting Started with Web Workers"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#types-of-web-workers",children:"Types of Web Workers"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#under-the-hood-threading-model",children:"Under the Hood: Threading Model"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#message-passing-and-data-transfer",children:"Message Passing and Data Transfer"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#worker-lifecycle-management",children:"Worker Lifecycle Management"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#advanced-features-and-patterns",children:"Advanced Features and Patterns"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#performance-optimization",children:"Performance Optimization"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#real-world-implementation-examples",children:"Real-World Implementation Examples"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#error-handling-and-debugging",children:"Error Handling and Debugging"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#best-practices-and-limitations",children:"Best Practices and Limitations"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"#conclusion",children:"Conclusion"})}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(r.p,{children:"Web Workers provide a way to run JavaScript code in background threads, separate from the main execution thread of a web page. This enables true parallel processing in web applications, allowing intensive computations to be performed without blocking the user interface."}),"\n",(0,s.jsxs)(r.p,{children:["As outlined in the ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",children:"MDN Web Workers documentation"}),", Web Workers solve the fundamental problem of JavaScript's single-threaded nature by providing isolated execution contexts that can communicate with the main thread through message passing."]}),"\n",(0,s.jsx)(r.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Non-blocking Operations"}),": Heavy computations don't freeze the UI"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"True Parallelism"}),": Multiple workers can run simultaneously"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Isolated Execution"}),": Workers can't accidentally interfere with the main thread"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Network Access"}),": Workers can make HTTP requests independently"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Shared Processing"}),": Multiple scripts can share worker resources"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Image/video processing"}),"\n",(0,s.jsx)(r.li,{children:"Cryptographic operations"}),"\n",(0,s.jsx)(r.li,{children:"Data parsing and analysis"}),"\n",(0,s.jsx)(r.li,{children:"Background data synchronization"}),"\n",(0,s.jsx)(r.li,{children:"Real-time data processing"}),"\n",(0,s.jsx)(r.li,{children:"Mathematical calculations"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"getting-started-with-web-workers",children:"Getting Started with Web Workers"}),"\n",(0,s.jsx)(r.h3,{id:"browser-support-check",children:"Browser Support Check"}),"\n",(0,s.jsx)(r.p,{children:"Before implementing Web Workers, it's crucial to check if the browser supports this feature. Not all browsers (especially older ones) support Web Workers, so feature detection is essential for graceful degradation."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"What this code does:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Checks if the ",(0,s.jsx)(r.code,{children:"Worker"})," constructor is available in the global scope"]}),"\n",(0,s.jsx)(r.li,{children:"Provides a boolean result that can be used for conditional logic"}),"\n",(0,s.jsx)(r.li,{children:"Allows you to implement fallback strategies for unsupported browsers"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," None (feature detection function)",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Boolean indicating Web Worker support",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"When to use:"})," At the start of your application or before creating any workers"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Feature detection for Web Workers\r\n// This function checks if the browser supports the Worker API\r\nfunction supportsWebWorkers() {\r\n  // Check if Worker constructor exists and is not undefined\r\n  // typeof returns "function" for constructors, "undefined" for missing features\r\n  return typeof Worker !== "undefined";\r\n}\r\n\r\n// Use the detection function to conditionally enable worker features\r\nif (supportsWebWorkers()) {\r\n  console.log("Web Workers are supported");\r\n  // Safe to proceed with Web Worker implementation\r\n  // Initialize your worker-based features here\r\n} else {\r\n  console.log("Web Workers are not supported");\r\n  // Provide fallback functionality for older browsers\r\n  // Could use setTimeout for async operations, or process data synchronously\r\n  // Example fallback: use requestAnimationFrame for chunked processing\r\n}\r\n\r\n// Alternative: More comprehensive feature detection\r\nfunction checkWorkerSupport() {\r\n  const features = {\r\n    webWorkers: typeof Worker !== "undefined",\r\n    sharedWorkers: typeof SharedWorker !== "undefined",\r\n    serviceWorkers: "serviceWorker" in navigator,\r\n    transferableObjects: typeof ArrayBuffer !== "undefined",\r\n  };\r\n\r\n  console.log("Browser support:", features);\r\n  return features;\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"basic-worker-implementation",children:"Basic Worker Implementation"}),"\n",(0,s.jsx)(r.p,{children:"This example demonstrates the fundamental pattern for creating and communicating with a Web Worker. The implementation consists of two parts: the main thread code that creates and manages the worker, and the worker script that runs in the background."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"What this implementation does:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Creates a worker that runs independently from the main UI thread"}),"\n",(0,s.jsx)(r.li,{children:"Sends computational tasks to the worker without blocking the user interface"}),"\n",(0,s.jsx)(r.li,{children:"Receives results back from the worker and updates the UI"}),"\n",(0,s.jsx)(r.li,{children:"Handles errors gracefully to prevent application crashes"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Communication Flow:"})}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Main thread creates worker and sends initial data"}),"\n",(0,s.jsx)(r.li,{children:"Worker receives data, processes it, and sends results back"}),"\n",(0,s.jsx)(r.li,{children:"Main thread receives results and updates the UI"}),"\n",(0,s.jsx)(r.li,{children:"Error handlers catch and manage any issues that occur"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"main-thread-appjs",children:"Main Thread (app.js)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," Array of numbers to process",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Processed result displayed in the UI",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Purpose:"})," Coordinates worker creation, data sending, and result handling"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Check for Web Worker support before attempting to create one\r\nif (window.Worker) {\r\n  // Step 1: Create a new worker instance\r\n  // The worker will load and execute the specified JavaScript file\r\n  const worker = new Worker("worker.js");\r\n\r\n  // Step 2: Send data to worker using postMessage\r\n  // The data is serialized using the structured clone algorithm\r\n  // This example sends a command object with task instructions and data array\r\n  worker.postMessage({\r\n    command: "start", // Task identifier for the worker\r\n    data: [1, 2, 3, 4, 5], // Array of numbers to process\r\n  });\r\n\r\n  // Step 3: Listen for messages from worker\r\n  // The worker will send results back using postMessage\r\n  worker.onmessage = function (event) {\r\n    console.log("Message from worker:", event.data);\r\n\r\n    // Update the UI with the processed result\r\n    // event.data contains the worker\'s response\r\n    const resultElement = document.getElementById("result");\r\n    if (resultElement) {\r\n      // Display the result (could be a number, object, or formatted string)\r\n      resultElement.textContent = JSON.stringify(event.data);\r\n    }\r\n  };\r\n\r\n  // Step 4: Handle worker runtime errors\r\n  // This catches errors that occur during worker execution\r\n  worker.onerror = function (error) {\r\n    console.error("Worker error:", {\r\n      message: error.message, // Error description\r\n      filename: error.filename, // File where error occurred\r\n      lineno: error.lineno, // Line number of error\r\n    });\r\n\r\n    // Optionally show user-friendly error message\r\n    const resultElement = document.getElementById("result");\r\n    if (resultElement) {\r\n      resultElement.textContent = "Processing failed. Please try again.";\r\n    }\r\n  };\r\n\r\n  // Step 5: Handle message serialization errors\r\n  // This occurs when data cannot be cloned between threads\r\n  worker.onmessageerror = function (event) {\r\n    console.error("Message serialization error:", event);\r\n    // This typically happens when trying to send functions or DOM elements\r\n  };\r\n\r\n  // Optional: Clean up worker when page unloads\r\n  window.addEventListener("beforeunload", () => {\r\n    worker.terminate(); // Immediately stop the worker\r\n  });\r\n} else {\r\n  console.log("Web Workers not supported");\r\n  // Fallback: Process data synchronously on main thread\r\n  processDataSynchronously([1, 2, 3, 4, 5]);\r\n}\r\n\r\n// Fallback function for browsers without Web Worker support\r\nfunction processDataSynchronously(data) {\r\n  const result = data.reduce((sum, num) => sum + num * num, 0);\r\n  document.getElementById("result").textContent = result;\r\n}\n'})}),"\n",(0,s.jsx)(r.h4,{id:"worker-script-workerjs",children:"Worker Script (worker.js)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Purpose:"})," Runs computationally intensive tasks in background without blocking the UI",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Input:"})," Command objects with task instructions and data",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Processed results sent back to main thread",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Key Features:"})," Command routing, error handling, and self-termination capability"]}),"\n",(0,s.jsx)(r.p,{children:"This worker script demonstrates a command-based architecture that can handle multiple types of operations. It runs in the WorkerGlobalScope, which is isolated from the main thread and doesn't have access to DOM or window objects."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Worker global scope - isolated from main thread\r\n// No access to DOM, window, or parent objects\r\n// \'self\' refers to the WorkerGlobalScope\r\nconsole.log("Worker started and ready to receive commands");\r\n\r\n// Step 1: Set up message listener for communication with main thread\r\n// This is the primary way the worker receives instructions and data\r\nself.onmessage = function (event) {\r\n  console.log("Worker received message:", event.data);\r\n\r\n  // Extract command and data from the message object\r\n  // This uses destructuring to get specific properties\r\n  const { command, data } = event.data;\r\n\r\n  // Step 2: Route commands to appropriate handlers\r\n  // Using a switch statement for clear command routing\r\n  switch (command) {\r\n    case "start":\r\n      // Process the data and send result back to main thread\r\n      const result = processData(data);\r\n      self.postMessage(result);\r\n      break;\r\n\r\n    case "stop":\r\n      // Gracefully terminate the worker from inside\r\n      console.log("Worker stopping...");\r\n      self.close(); // This terminates the worker\r\n      break;\r\n\r\n    case "ping":\r\n      // Simple health check command\r\n      self.postMessage({ status: "alive", timestamp: Date.now() });\r\n      break;\r\n\r\n    default:\r\n      // Handle unknown commands gracefully\r\n      console.error("Unknown command received:", command);\r\n      self.postMessage({\r\n        error: `Unknown command: ${command}`,\r\n        availableCommands: ["start", "stop", "ping"],\r\n      });\r\n  }\r\n};\r\n\r\n// Step 3: Core data processing function\r\n// This simulates a CPU-intensive operation that would block the UI if run on main thread\r\nfunction processData(numbers) {\r\n  console.log(`Processing ${numbers.length} numbers...`);\r\n\r\n  // Validate input data\r\n  if (!Array.isArray(numbers)) {\r\n    throw new Error("Input must be an array of numbers");\r\n  }\r\n\r\n  // Start performance measurement\r\n  const startTime = performance.now();\r\n\r\n  // Simulate intensive computation: sum of squares\r\n  let sum = 0;\r\n  for (let i = 0; i < numbers.length; i++) {\r\n    // Validate each number\r\n    if (typeof numbers[i] !== "number") {\r\n      throw new Error(`Invalid number at index ${i}: ${numbers[i]}`);\r\n    }\r\n\r\n    sum += numbers[i] * numbers[i];\r\n\r\n    // Simulate heavy computational work\r\n    // This would normally be your actual complex algorithm\r\n    for (let j = 0; j < 1000000; j++) {\r\n      Math.random(); // CPU-intensive operation\r\n    }\r\n\r\n    // Optional: Report progress for long operations\r\n    if (i % 10 === 0 && numbers.length > 10) {\r\n      self.postMessage({\r\n        type: "progress",\r\n        completed: i,\r\n        total: numbers.length,\r\n        percentage: Math.round((i / numbers.length) * 100),\r\n      });\r\n    }\r\n  }\r\n\r\n  // Calculate processing time\r\n  const endTime = performance.now();\r\n  const processingTime = endTime - startTime;\r\n\r\n  console.log(`Processing completed in ${processingTime.toFixed(2)}ms`);\r\n\r\n  // Return comprehensive result object\r\n  return {\r\n    type: "result",\r\n    result: sum,\r\n    processed: numbers.length,\r\n    processingTime: processingTime,\r\n    average: sum / numbers.length,\r\n    timestamp: Date.now(),\r\n  };\r\n}\r\n\r\n// Step 4: Global error handler for the worker\r\n// This catches any unhandled errors in the worker script\r\nself.onerror = function (error) {\r\n  console.error("Unhandled error in worker:", {\r\n    message: error.message,\r\n    filename: error.filename,\r\n    lineno: error.lineno,\r\n    colno: error.colno,\r\n  });\r\n\r\n  // Send error information back to main thread\r\n  self.postMessage({\r\n    type: "error",\r\n    error: error.message,\r\n    details: {\r\n      filename: error.filename,\r\n      line: error.lineno,\r\n      column: error.colno,\r\n    },\r\n  });\r\n};\r\n\r\n// Step 5: Handle unhandled promise rejections\r\n// Important for async operations within the worker\r\nself.addEventListener("unhandledrejection", function (event) {\r\n  console.error("Unhandled promise rejection in worker:", event.reason);\r\n\r\n  self.postMessage({\r\n    type: "error",\r\n    error: "Unhandled promise rejection",\r\n    details: event.reason,\r\n  });\r\n\r\n  // Prevent the default handling\r\n  event.preventDefault();\r\n});\r\n\r\n// Optional: Worker initialization code\r\n// This runs when the worker is first loaded\r\n(function initializeWorker() {\r\n  console.log("Worker initialized successfully");\r\n\r\n  // Send ready signal to main thread\r\n  self.postMessage({\r\n    type: "ready",\r\n    capabilities: ["start", "stop", "ping"],\r\n    workerInfo: {\r\n      userAgent: navigator.userAgent,\r\n      language: navigator.language,\r\n      onLine: navigator.onLine,\r\n    },\r\n  });\r\n})();\n'})}),"\n",(0,s.jsx)(r.h2,{id:"types-of-web-workers",children:"Types of Web Workers"}),"\n",(0,s.jsx)(r.h3,{id:"dedicated-workers",children:"Dedicated Workers"}),"\n",(0,s.jsx)(r.p,{children:"Dedicated workers are bound to a single script/context and provide isolated execution environments. Unlike shared workers, they can only communicate with the script that created them. This class-based approach provides a clean, Promise-based API for worker communication."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"What this implementation provides:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Promise-based worker communication (async/await support)"}),"\n",(0,s.jsx)(r.li,{children:"Automatic message ID tracking to match requests with responses"}),"\n",(0,s.jsx)(r.li,{children:"Proper cleanup and error handling"}),"\n",(0,s.jsx)(r.li,{children:"Simplified API that abstracts away the complexity of worker messaging"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Use cases:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"CPU-intensive calculations for a specific component"}),"\n",(0,s.jsx)(r.li,{children:"Data processing tasks that need dedicated resources"}),"\n",(0,s.jsx)(r.li,{children:"Image/video processing workflows"}),"\n",(0,s.jsx)(r.li,{children:"Mathematical computations that shouldn't block the UI"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," Worker script path, commands, and data objects",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Promise-wrapped results from worker execution",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Key Features:"})," Message correlation, error propagation, resource cleanup"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Advanced worker manager with Promise-based API and message correlation\r\nclass DedicatedWorkerManager {\r\n  constructor(workerScript) {\r\n    // Initialize the worker with the specified script\r\n    this.worker = new Worker(workerScript);\r\n\r\n    // Message tracking for correlating requests with responses\r\n    this.messageId = 0; // Counter for unique message IDs\r\n    this.pendingMessages = new Map(); // Store Promise resolvers/rejectors\r\n\r\n    // Set up communication handlers\r\n    this.setupEventHandlers();\r\n\r\n    console.log(`Dedicated worker created: ${workerScript}`);\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    // Handle messages from worker\r\n    this.worker.onmessage = (event) => {\r\n      const { messageId, result, error, type } = event.data;\r\n\r\n      // Handle different message types\r\n      if (type === "progress") {\r\n        // Handle progress updates (optional)\r\n        this.handleProgress(event.data);\r\n        return;\r\n      }\r\n\r\n      // Find the corresponding pending message\r\n      if (this.pendingMessages.has(messageId)) {\r\n        const { resolve, reject, timestamp } =\r\n          this.pendingMessages.get(messageId);\r\n\r\n        // Calculate response time for performance monitoring\r\n        const responseTime = Date.now() - timestamp;\r\n        console.log(`Worker response received in ${responseTime}ms`);\r\n\r\n        // Clean up the pending message\r\n        this.pendingMessages.delete(messageId);\r\n\r\n        // Resolve or reject the Promise based on worker response\r\n        if (error) {\r\n          reject(new Error(error));\r\n        } else {\r\n          resolve(result);\r\n        }\r\n      } else {\r\n        console.warn("Received message with unknown ID:", messageId);\r\n      }\r\n    };\r\n\r\n    // Handle worker runtime errors\r\n    this.worker.onerror = (error) => {\r\n      console.error("Worker runtime error:", {\r\n        message: error.message,\r\n        filename: error.filename,\r\n        lineno: error.lineno,\r\n      });\r\n\r\n      // Reject all pending messages since worker is in error state\r\n      this.rejectAllPending(new Error(`Worker error: ${error.message}`));\r\n    };\r\n\r\n    // Handle message serialization errors\r\n    this.worker.onmessageerror = (event) => {\r\n      console.error("Worker message serialization error:", event);\r\n      this.rejectAllPending(new Error("Message serialization failed"));\r\n    };\r\n  }\r\n\r\n  // Promise-based execution method\r\n  async execute(command, data, options = {}) {\r\n    return new Promise((resolve, reject) => {\r\n      // Generate unique message ID\r\n      const messageId = ++this.messageId;\r\n      const timestamp = Date.now();\r\n\r\n      // Store Promise resolvers for later use\r\n      this.pendingMessages.set(messageId, {\r\n        resolve,\r\n        reject,\r\n        timestamp,\r\n        command,\r\n        timeout: options.timeout || 30000, // Default 30 second timeout\r\n      });\r\n\r\n      // Set up timeout to prevent hanging promises\r\n      setTimeout(() => {\r\n        if (this.pendingMessages.has(messageId)) {\r\n          this.pendingMessages.delete(messageId);\r\n          reject(\r\n            new Error(`Worker timeout after ${options.timeout || 30000}ms`)\r\n          );\r\n        }\r\n      }, options.timeout || 30000);\r\n\r\n      // Send message to worker\r\n      this.worker.postMessage({\r\n        messageId, // For response correlation\r\n        command, // Operation to perform\r\n        data, // Data to process\r\n        options, // Additional options\r\n      });\r\n\r\n      console.log(`Sent command \'${command}\' to worker with ID ${messageId}`);\r\n    });\r\n  }\r\n\r\n  // Handle progress updates from worker\r\n  handleProgress(progressData) {\r\n    const { messageId, completed, total, percentage } = progressData;\r\n\r\n    if (this.pendingMessages.has(messageId)) {\r\n      // Emit progress event if listeners are set up\r\n      this.emit("progress", {\r\n        completed,\r\n        total,\r\n        percentage,\r\n        messageId,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Utility method to reject all pending messages\r\n  rejectAllPending(error) {\r\n    this.pendingMessages.forEach(({ reject, command }, messageId) => {\r\n      console.log(`Rejecting pending command \'${command}\' (ID: ${messageId})`);\r\n      reject(error);\r\n    });\r\n    this.pendingMessages.clear();\r\n  }\r\n\r\n  // Clean shutdown of the worker\r\n  terminate() {\r\n    console.log("Terminating dedicated worker...");\r\n\r\n    // Reject all pending messages before termination\r\n    this.rejectAllPending(new Error("Worker terminated"));\r\n\r\n    // Terminate the worker\r\n    this.worker.terminate();\r\n\r\n    console.log("Worker terminated successfully");\r\n  }\r\n\r\n  // Check if worker has pending operations\r\n  hasPendingOperations() {\r\n    return this.pendingMessages.size > 0;\r\n  }\r\n\r\n  // Get statistics about worker usage\r\n  getStats() {\r\n    return {\r\n      pendingMessages: this.pendingMessages.size,\r\n      totalMessagesSent: this.messageId,\r\n      isActive: !!this.worker,\r\n    };\r\n  }\r\n\r\n  // Simple event emitter for progress updates\r\n  emit(event, data) {\r\n    if (this.listeners && this.listeners[event]) {\r\n      this.listeners[event].forEach((callback) => callback(data));\r\n    }\r\n  }\r\n\r\n  // Add event listener for progress updates\r\n  on(event, callback) {\r\n    if (!this.listeners) this.listeners = {};\r\n    if (!this.listeners[event]) this.listeners[event] = [];\r\n    this.listeners[event].push(callback);\r\n  }\r\n}\r\n\r\n// Example usage of the DedicatedWorkerManager\r\n/*\r\nconst workerManager = new DedicatedWorkerManager(\'math-worker.js\');\r\n\r\n// Listen for progress updates\r\nworkerManager.on(\'progress\', (progress) => {\r\n  console.log(`Progress: ${progress.percentage}%`);\r\n});\r\n\r\n// Execute commands with async/await\r\ntry {\r\n  const result = await workerManager.execute(\'fibonacci\', { n: 40 });\r\n  console.log(\'Fibonacci result:\', result);\r\n} catch (error) {\r\n  console.error(\'Worker execution failed:\', error);\r\n}\r\n\r\n// Clean up when done\r\nworkerManager.terminate();\r\n*/\n'})}),"\n",(0,s.jsx)(r.h3,{id:"shared-workers",children:"Shared Workers"}),"\n",(0,s.jsx)(r.p,{children:"Shared workers enable multiple browser contexts (tabs, iframes, windows) to communicate with a single worker instance. This is powerful for cross-tab communication, shared state management, and coordinating activities across multiple parts of a web application."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Key advantages of Shared Workers:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Single worker instance shared across multiple browser contexts"}),"\n",(0,s.jsx)(r.li,{children:"Persistent state that survives tab navigation and closing"}),"\n",(0,s.jsx)(r.li,{children:"Real-time synchronization between different tabs/windows"}),"\n",(0,s.jsx)(r.li,{children:"Resource efficiency by avoiding duplicate worker instances"}),"\n",(0,s.jsx)(r.li,{children:"Central coordination hub for distributed web app features"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Common use cases:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Live chat systems that sync across tabs"}),"\n",(0,s.jsx)(r.li,{children:"Real-time collaborative features (like Google Docs)"}),"\n",(0,s.jsx)(r.li,{children:"Cross-tab notification systems"}),"\n",(0,s.jsx)(r.li,{children:"Shared caching and data synchronization"}),"\n",(0,s.jsx)(r.li,{children:"Multi-tab shopping cart management"}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"shared-worker-script-shared-workerjs",children:"Shared Worker Script (shared-worker.js)"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Purpose:"})," Central hub that manages connections from multiple browser contexts",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Input:"})," Action-based messages from connected ports",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Broadcasted updates to all connected contexts",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"State Management:"})," Persistent shared data across all connections"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Shared worker maintains connections and shared state\r\nconst connections = []; // Array to track all active port connections\r\nlet sharedData = {\r\n  // Centralized data shared across all contexts\r\n  counter: 0, // Example counter that all tabs can modify\r\n  messages: [], // Chat-like message system\r\n  activeUsers: new Set(), // Track active users across tabs\r\n  lastActivity: Date.now(), // Track when worker was last active\r\n};\r\n\r\n// Handle new connections from browser contexts (tabs, iframes, etc.)\r\nself.onconnect = function (event) {\r\n  // Get the MessagePort for this new connection\r\n  const port = event.ports[0];\r\n\r\n  // Generate unique connection ID for tracking\r\n  const connectionId = `conn_${Date.now()}_${Math.random()\r\n    .toString(36)\r\n    .substr(2, 9)}`;\r\n\r\n  // Store connection with metadata\r\n  const connectionInfo = {\r\n    port: port,\r\n    id: connectionId,\r\n    connectedAt: Date.now(),\r\n    lastSeen: Date.now(),\r\n    userAgent: "unknown", // Could be passed from client\r\n  };\r\n\r\n  connections.push(connectionInfo);\r\n  console.log(\r\n    `New connection established: ${connectionId} (Total: ${connections.length})`\r\n  );\r\n\r\n  // Set up message handler for this specific port\r\n  port.onmessage = function (event) {\r\n    const { action, data, userId } = event.data;\r\n\r\n    // Update last seen timestamp for this connection\r\n    connectionInfo.lastSeen = Date.now();\r\n    sharedData.lastActivity = Date.now();\r\n\r\n    // Route actions to appropriate handlers\r\n    switch (action) {\r\n      case "increment":\r\n        // Increment shared counter and broadcast to all connected tabs\r\n        sharedData.counter++;\r\n        console.log(\r\n          `Counter incremented to ${sharedData.counter} by ${connectionId}`\r\n        );\r\n\r\n        broadcastToAllPorts({\r\n          type: "counter",\r\n          value: sharedData.counter,\r\n          updatedBy: connectionId,\r\n          timestamp: Date.now(),\r\n        });\r\n        break;\r\n\r\n      case "addMessage":\r\n        // Add message to shared chat and broadcast to all tabs\r\n        const message = {\r\n          id: `msg_${Date.now()}`,\r\n          content: data,\r\n          author: userId || "Anonymous",\r\n          timestamp: Date.now(),\r\n          connectionId: connectionId,\r\n        };\r\n\r\n        sharedData.messages.push(message);\r\n        console.log(`New message added: ${message.content}`);\r\n\r\n        // Limit message history to prevent memory growth\r\n        if (sharedData.messages.length > 100) {\r\n          sharedData.messages = sharedData.messages.slice(-50); // Keep last 50\r\n        }\r\n\r\n        broadcastToAllPorts({\r\n          type: "newMessage",\r\n          message: message,\r\n        });\r\n        break;\r\n\r\n      case "getData":\r\n        // Send current shared data only to requesting port\r\n        port.postMessage({\r\n          type: "data",\r\n          data: sharedData,\r\n          connectionInfo: {\r\n            id: connectionId,\r\n            totalConnections: connections.length,\r\n          },\r\n        });\r\n        break;\r\n\r\n      case "setUser":\r\n        // Track active users across tabs\r\n        if (data.userId) {\r\n          sharedData.activeUsers.add(data.userId);\r\n          connectionInfo.userId = data.userId;\r\n\r\n          broadcastToAllPorts({\r\n            type: "userUpdate",\r\n            activeUsers: Array.from(sharedData.activeUsers),\r\n            action: "joined",\r\n            userId: data.userId,\r\n          });\r\n        }\r\n        break;\r\n\r\n      case "ping":\r\n        // Health check - respond only to sender\r\n        port.postMessage({\r\n          type: "pong",\r\n          timestamp: Date.now(),\r\n          connectionId: connectionId,\r\n        });\r\n        break;\r\n\r\n      default:\r\n        console.warn(`Unknown action received: ${action}`);\r\n        port.postMessage({\r\n          type: "error",\r\n          error: `Unknown action: ${action}`,\r\n          availableActions: [\r\n            "increment",\r\n            "addMessage",\r\n            "getData",\r\n            "setUser",\r\n            "ping",\r\n          ],\r\n        });\r\n    }\r\n  };\r\n\r\n  // Handle port disconnection\r\n  port.onmessageerror = function (event) {\r\n    console.error(`Message error on connection ${connectionId}:`, event);\r\n    removeConnection(connectionId);\r\n  };\r\n\r\n  // Start the port communication\r\n  port.start();\r\n\r\n  // Send initial connection confirmation with current state\r\n  port.postMessage({\r\n    type: "connected",\r\n    data: sharedData,\r\n    connectionId: connectionId,\r\n    totalConnections: connections.length,\r\n  });\r\n};\r\n\r\n// Broadcast message to all connected ports\r\nfunction broadcastToAllPorts(message) {\r\n  console.log(\r\n    `Broadcasting to ${connections.length} connections:`,\r\n    message.type\r\n  );\r\n\r\n  // Iterate through all connections and send message\r\n  connections.forEach((connectionInfo, index) => {\r\n    try {\r\n      connectionInfo.port.postMessage(message);\r\n    } catch (error) {\r\n      // Port might be closed - remove it from connections\r\n      console.warn(\r\n        `Failed to send message to connection ${connectionInfo.id}:`,\r\n        error\r\n      );\r\n      connections.splice(index, 1);\r\n\r\n      // Clean up user data if connection had a user\r\n      if (connectionInfo.userId) {\r\n        sharedData.activeUsers.delete(connectionInfo.userId);\r\n\r\n        // Notify other connections about user leaving\r\n        broadcastToAllPorts({\r\n          type: "userUpdate",\r\n          activeUsers: Array.from(sharedData.activeUsers),\r\n          action: "left",\r\n          userId: connectionInfo.userId,\r\n        });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Remove specific connection\r\nfunction removeConnection(connectionId) {\r\n  const index = connections.findIndex((conn) => conn.id === connectionId);\r\n  if (index !== -1) {\r\n    const removedConnection = connections.splice(index, 1)[0];\r\n    console.log(`Connection removed: ${connectionId}`);\r\n\r\n    // Clean up associated user data\r\n    if (removedConnection.userId) {\r\n      sharedData.activeUsers.delete(removedConnection.userId);\r\n    }\r\n  }\r\n}\r\n\r\n// Periodic cleanup of stale connections (every 30 seconds)\r\nsetInterval(() => {\r\n  const now = Date.now();\r\n  const staleThreshold = 60000; // 1 minute\r\n\r\n  const staleConnections = connections.filter(\r\n    (conn) => now - conn.lastSeen > staleThreshold\r\n  );\r\n\r\n  staleConnections.forEach((conn) => {\r\n    console.log(`Removing stale connection: ${conn.id}`);\r\n    removeConnection(conn.id);\r\n  });\r\n\r\n  if (staleConnections.length > 0) {\r\n    console.log(`Cleaned up ${staleConnections.length} stale connections`);\r\n  }\r\n}, 30000);\r\n\r\n// Log worker status periodically\r\nsetInterval(() => {\r\n  console.log(\r\n    `Shared Worker Status: ${connections.length} active connections, ${sharedData.activeUsers.size} active users`\r\n  );\r\n}, 60000);\n'})}),"\n",(0,s.jsx)(r.h4,{id:"using-shared-workers",children:"Using Shared Workers"}),"\n",(0,s.jsx)(r.p,{children:"This client class provides a clean interface for connecting to and communicating with shared workers. Multiple instances of this class (across different tabs/windows) will all connect to the same shared worker instance, enabling real-time cross-tab synchronization."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"What this client provides:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Clean API for shared worker communication"}),"\n",(0,s.jsx)(r.li,{children:"Automatic reconnection handling"}),"\n",(0,s.jsx)(r.li,{children:"Event-driven architecture for real-time updates"}),"\n",(0,s.jsx)(r.li,{children:"Type-safe message handling"}),"\n",(0,s.jsx)(r.li,{children:"Connection lifecycle management"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," User actions and data from the browser context",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," UI updates based on shared worker state changes",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Key Features:"})," Real-time synchronization, connection management, error recovery"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Client class for connecting to and communicating with shared workers\r\nclass SharedWorkerClient {\r\n  constructor(userId = null) {\r\n    this.userId =\r\n      userId || `user_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;\r\n    this.connectionId = null;\r\n    this.isConnected = false;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectDelay = 1000; // Start with 1 second delay\r\n\r\n    this.initializeWorker();\r\n  }\r\n\r\n  initializeWorker() {\r\n    try {\r\n      // Create connection to shared worker\r\n      this.worker = new SharedWorker("shared-worker.js");\r\n      this.port = this.worker.port;\r\n\r\n      // Set up event handlers\r\n      this.setupEventHandlers();\r\n\r\n      console.log("Attempting to connect to shared worker...");\r\n    } catch (error) {\r\n      console.error("Failed to create shared worker:", error);\r\n      this.handleConnectionError(error);\r\n    }\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    // Handle messages from shared worker\r\n    this.port.onmessage = (event) => {\r\n      const { type, data, value, message, connectionId, totalConnections } =\r\n        event.data;\r\n\r\n      // Handle different message types from shared worker\r\n      switch (type) {\r\n        case "connected":\r\n          // Successfully connected to shared worker\r\n          this.connectionId = connectionId;\r\n          this.isConnected = true;\r\n          this.reconnectAttempts = 0;\r\n\r\n          console.log(`Connected to shared worker as ${connectionId}`);\r\n          console.log(`Total connections: ${totalConnections}`);\r\n          console.log("Initial shared data:", data);\r\n\r\n          // Initialize UI with current state\r\n          this.initializeUI(data);\r\n\r\n          // Register this user with the shared worker\r\n          this.setUser(this.userId);\r\n          break;\r\n\r\n        case "counter":\r\n          // Counter value updated by another tab\r\n          console.log(`Counter updated to ${value} by ${event.data.updatedBy}`);\r\n          this.updateCounter(value);\r\n\r\n          // Visual feedback for updates from other tabs\r\n          if (event.data.updatedBy !== this.connectionId) {\r\n            this.showUpdateNotification("Counter updated by another tab");\r\n          }\r\n          break;\r\n\r\n        case "newMessage":\r\n          // New message added by any connected tab\r\n          console.log("New message received:", message);\r\n          this.displayMessage(message);\r\n\r\n          // Show notification if message is from another tab\r\n          if (message.connectionId !== this.connectionId) {\r\n            this.showUpdateNotification(`New message from ${message.author}`);\r\n          }\r\n          break;\r\n\r\n        case "userUpdate":\r\n          // Active users list updated\r\n          console.log(`User ${event.data.action}: ${event.data.userId}`);\r\n          this.updateActiveUsers(event.data.activeUsers);\r\n          break;\r\n\r\n        case "data":\r\n          // Response to getData request\r\n          console.log("Received current shared data:", data);\r\n          this.updateAllUI(data);\r\n          break;\r\n\r\n        case "pong":\r\n          // Health check response\r\n          console.log(\r\n            `Health check OK (${Date.now() - event.data.timestamp}ms)`\r\n          );\r\n          break;\r\n\r\n        case "error":\r\n          // Error from shared worker\r\n          console.error("Shared worker error:", event.data.error);\r\n          this.handleWorkerError(event.data.error);\r\n          break;\r\n\r\n        default:\r\n          console.warn("Unknown message type:", type);\r\n      }\r\n    };\r\n\r\n    // Handle connection errors\r\n    this.port.onmessageerror = (event) => {\r\n      console.error("Port message error:", event);\r\n      this.handleConnectionError(event);\r\n    };\r\n\r\n    // Start the port communication\r\n    this.port.start();\r\n  }\r\n\r\n  // Initialize UI elements with current shared state\r\n  initializeUI(data) {\r\n    this.updateCounter(data.counter);\r\n\r\n    // Display existing messages\r\n    data.messages.forEach((message) => {\r\n      this.displayMessage(message);\r\n    });\r\n\r\n    // Update active users\r\n    this.updateActiveUsers(Array.from(data.activeUsers));\r\n  }\r\n\r\n  // Update entire UI with fresh data\r\n  updateAllUI(data) {\r\n    // Clear existing messages\r\n    const messagesList = document.getElementById("messages");\r\n    if (messagesList) {\r\n      messagesList.innerHTML = "";\r\n    }\r\n\r\n    // Reinitialize with fresh data\r\n    this.initializeUI(data);\r\n  }\r\n\r\n  // Send increment command to shared worker\r\n  increment() {\r\n    if (!this.isConnected) {\r\n      console.warn("Not connected to shared worker");\r\n      return;\r\n    }\r\n\r\n    console.log("Sending increment command");\r\n    this.port.postMessage({ action: "increment" });\r\n  }\r\n\r\n  // Send new message to shared worker\r\n  addMessage(messageContent) {\r\n    if (!this.isConnected) {\r\n      console.warn("Not connected to shared worker");\r\n      return;\r\n    }\r\n\r\n    if (!messageContent.trim()) {\r\n      console.warn("Cannot send empty message");\r\n      return;\r\n    }\r\n\r\n    console.log("Sending new message:", messageContent);\r\n    this.port.postMessage({\r\n      action: "addMessage",\r\n      data: messageContent,\r\n      userId: this.userId,\r\n    });\r\n  }\r\n\r\n  // Request current data from shared worker\r\n  getData() {\r\n    if (!this.isConnected) {\r\n      console.warn("Not connected to shared worker");\r\n      return;\r\n    }\r\n\r\n    console.log("Requesting current data");\r\n    this.port.postMessage({ action: "getData" });\r\n  }\r\n\r\n  // Register user with shared worker\r\n  setUser(userId) {\r\n    this.userId = userId;\r\n    this.port.postMessage({\r\n      action: "setUser",\r\n      data: { userId: userId },\r\n    });\r\n  }\r\n\r\n  // Health check\r\n  ping() {\r\n    if (!this.isConnected) {\r\n      console.warn("Not connected to shared worker");\r\n      return;\r\n    }\r\n\r\n    this.port.postMessage({ action: "ping" });\r\n  }\r\n\r\n  // UI update methods\r\n  updateCounter(value) {\r\n    const counterElement = document.getElementById("counter");\r\n    if (counterElement) {\r\n      counterElement.textContent = value;\r\n\r\n      // Add visual feedback for updates\r\n      counterElement.classList.add("updated");\r\n      setTimeout(() => counterElement.classList.remove("updated"), 500);\r\n    }\r\n  }\r\n\r\n  displayMessage(message) {\r\n    const messagesList = document.getElementById("messages");\r\n    if (!messagesList) return;\r\n\r\n    // Create message element\r\n    const messageElement = document.createElement("div");\r\n    messageElement.className = "message";\r\n\r\n    // Style differently if it\'s from current tab\r\n    if (message.connectionId === this.connectionId) {\r\n      messageElement.classList.add("own-message");\r\n    }\r\n\r\n    // Format message content\r\n    messageElement.innerHTML = `\r\n      <div class="message-header">\r\n        <span class="author">${message.author}</span>\r\n        <span class="timestamp">${new Date(\r\n          message.timestamp\r\n        ).toLocaleTimeString()}</span>\r\n      </div>\r\n      <div class="message-content">${message.content}</div>\r\n    `;\r\n\r\n    messagesList.appendChild(messageElement);\r\n    messagesList.scrollTop = messagesList.scrollHeight; // Auto-scroll to bottom\r\n  }\r\n\r\n  updateActiveUsers(users) {\r\n    const usersElement = document.getElementById("active-users");\r\n    if (usersElement) {\r\n      usersElement.innerHTML = `Active users: ${users.join(", ")}`;\r\n    }\r\n  }\r\n\r\n  showUpdateNotification(message) {\r\n    // Simple notification system\r\n    const notification = document.createElement("div");\r\n    notification.className = "notification";\r\n    notification.textContent = message;\r\n\r\n    document.body.appendChild(notification);\r\n\r\n    // Auto-remove after 3 seconds\r\n    setTimeout(() => {\r\n      document.body.removeChild(notification);\r\n    }, 3000);\r\n  }\r\n\r\n  // Error handling and reconnection\r\n  handleConnectionError(error) {\r\n    console.error("Connection error:", error);\r\n    this.isConnected = false;\r\n\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      const delay =\r\n        this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1); // Exponential backoff\r\n\r\n      console.log(\r\n        `Reconnecting in ${delay}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`\r\n      );\r\n\r\n      setTimeout(() => {\r\n        this.initializeWorker();\r\n      }, delay);\r\n    } else {\r\n      console.error(\r\n        "Max reconnection attempts reached. Please refresh the page."\r\n      );\r\n      this.showUpdateNotification("Connection lost. Please refresh the page.");\r\n    }\r\n  }\r\n\r\n  handleWorkerError(error) {\r\n    console.error("Worker error:", error);\r\n    this.showUpdateNotification("Worker error occurred");\r\n  }\r\n\r\n  // Clean disconnect\r\n  disconnect() {\r\n    if (this.port) {\r\n      this.port.close();\r\n    }\r\n    this.isConnected = false;\r\n    console.log("Disconnected from shared worker");\r\n  }\r\n\r\n  // Get connection status\r\n  getStatus() {\r\n    return {\r\n      isConnected: this.isConnected,\r\n      connectionId: this.connectionId,\r\n      userId: this.userId,\r\n      reconnectAttempts: this.reconnectAttempts,\r\n    };\r\n  }\r\n}\r\n\r\n// Example usage and initialization\r\n/*\r\n// Create client instance with optional user ID\r\nconst sharedClient = new SharedWorkerClient(\'user123\');\r\n\r\n// Set up UI event handlers\r\ndocument.getElementById(\'increment-btn\').addEventListener(\'click\', () => {\r\n  sharedClient.increment();\r\n});\r\n\r\ndocument.getElementById(\'send-message-btn\').addEventListener(\'click\', () => {\r\n  const input = document.getElementById(\'message-input\');\r\n  if (input.value.trim()) {\r\n    sharedClient.addMessage(input.value);\r\n    input.value = \'\';\r\n  }\r\n});\r\n\r\n// Refresh data button\r\ndocument.getElementById(\'refresh-btn\').addEventListener(\'click\', () => {\r\n  sharedClient.getData();\r\n});\r\n\r\n// Health check button\r\ndocument.getElementById(\'ping-btn\').addEventListener(\'click\', () => {\r\n  sharedClient.ping();\r\n});\r\n\r\n// Clean up on page unload\r\nwindow.addEventListener(\'beforeunload\', () => {\r\n  sharedClient.disconnect();\r\n});\r\n*/\n'})}),"\n",(0,s.jsx)(r.h2,{id:"under-the-hood-threading-model",children:"Under the Hood: Threading Model"}),"\n",(0,s.jsx)(r.h3,{id:"browser-threading-architecture",children:"Browser Threading Architecture"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502                    Browser Process                      \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502  Main Thread              \u2502      Worker Threads         \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 DOM Manipulation    \u2502      \u251c\u2500\u2500\u2500 Worker 1          \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 Event Handling      \u2502      \u251c\u2500\u2500\u2500 Worker 2          \u2502\r\n\u2502  \u251c\u2500\u2500\u2500 JavaScript Engine   \u2502      \u251c\u2500\u2500\u2500 Worker N          \u2502\r\n\u2502  \u2514\u2500\u2500\u2500 Rendering Pipeline  \u2502      \u2514\u2500\u2500\u2500 Shared Workers    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502              Message Passing Layer                      \u2502\r\n\u2502              (Structured Clone Algorithm)               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(r.h3,{id:"worker-global-scope",children:"Worker Global Scope"}),"\n",(0,s.jsx)(r.p,{children:"Workers run in a different global context than the main thread:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// In worker context - these are available\r\nconsole.log(self); // WorkerGlobalScope\r\nconsole.log(location); // WorkerLocation\r\nconsole.log(navigator); // WorkerNavigator\r\n\r\n// These are NOT available in workers\r\n// console.log(window); // undefined\r\n// console.log(document); // undefined\r\n// console.log(parent); // undefined\r\n\r\n// Worker-specific APIs available\r\nimportScripts("https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js");\r\n\r\n// Network requests are available\r\nfetch("/api/data")\r\n  .then((response) => response.json())\r\n  .then((data) => {\r\n    self.postMessage({ type: "dataLoaded", data });\r\n  });\r\n\r\n// IndexedDB is available for storage\r\nconst request = indexedDB.open("WorkerDB", 1);\r\nrequest.onsuccess = (event) => {\r\n  const db = event.target.result;\r\n  // Use IndexedDB in worker\r\n};\n'})}),"\n",(0,s.jsx)(r.h2,{id:"message-passing-and-data-transfer",children:"Message Passing and Data Transfer"}),"\n",(0,s.jsx)(r.h3,{id:"structured-clone-algorithm",children:"Structured Clone Algorithm"}),"\n",(0,s.jsx)(r.p,{children:"The structured clone algorithm is the browser's mechanism for safely transferring data between different execution contexts (like main thread to worker). Understanding what can and cannot be transferred is crucial for effective worker communication."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"How it works:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Creates a deep copy of the data structure"}),"\n",(0,s.jsx)(r.li,{children:"Maintains object references and circular dependencies"}),"\n",(0,s.jsx)(r.li,{children:"Preserves most built-in JavaScript types"}),"\n",(0,s.jsx)(r.li,{children:"Throws errors for non-cloneable data types"}),"\n",(0,s.jsx)(r.li,{children:"More robust than JSON.stringify/parse for complex objects"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Performance considerations:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Cloning large objects can be expensive"}),"\n",(0,s.jsx)(r.li,{children:"Complex nested structures take longer to clone"}),"\n",(0,s.jsx)(r.li,{children:"Use transferable objects for large binary data"}),"\n",(0,s.jsx)(r.li,{children:"Consider sending only necessary data to minimize clone overhead"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," Any cloneable JavaScript value",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Deep copy of the input in the target context",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Limitations:"})," Cannot clone functions, DOM elements, or other non-serializable objects"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Comprehensive example of data types and their cloning behavior\r\nconst transferableData = {\r\n  // \u2705 Primitive types - these clone perfectly\r\n  string: "Hello World",\r\n  number: 42,\r\n  bigint: 123n, // BigInt support varies by browser\r\n  boolean: true,\r\n  null: null,\r\n  undefined: undefined,\r\n\r\n  // \u2705 Basic objects and arrays\r\n  object: {\r\n    key: "value",\r\n    nested: {\r\n      data: true,\r\n      deepNesting: {\r\n        level3: "works fine",\r\n      },\r\n    },\r\n  },\r\n  array: [1, 2, 3, { nested: "array" }],\r\n  mixedArray: ["string", 42, true, { object: "in array" }],\r\n\r\n  // \u2705 Date objects\r\n  date: new Date(),\r\n  specificDate: new Date("2023-01-01"),\r\n\r\n  // \u2705 Regular expressions\r\n  regexp: /pattern/gi,\r\n  complexRegexp: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n\r\n  // \u2705 Binary data types\r\n  arrayBuffer: new ArrayBuffer(8),\r\n  int8Array: new Int8Array([1, 2, 3, 4]),\r\n  uint8Array: new Uint8Array([1, 2, 3, 4]),\r\n  uint8ClampedArray: new Uint8ClampedArray([255, 0, 128]),\r\n  int16Array: new Int16Array([1000, 2000]),\r\n  uint16Array: new Uint16Array([1000, 2000]),\r\n  int32Array: new Int32Array([100000, 200000]),\r\n  uint32Array: new Uint32Array([100000, 200000]),\r\n  float32Array: new Float32Array([1.5, 2.7, 3.14]),\r\n  float64Array: new Float64Array([1.5, 2.7, 3.14159265359]),\r\n\r\n  // \u2705 Complex built-in objects\r\n  map: new Map([\r\n    ["key1", "value1"],\r\n    ["key2", { nested: "object" }],\r\n    [42, "number key"],\r\n  ]),\r\n  set: new Set([1, 2, 3, "string", { object: "in set" }]),\r\n\r\n  // \u2705 Error objects (with limitations)\r\n  error: new Error("This error can be cloned"),\r\n  typeError: new TypeError("Type errors work too"),\r\n\r\n  // \u2705 Circular references are handled correctly\r\n  // Note: We\'ll create this below to avoid issues in static definition\r\n};\r\n\r\n// Add circular reference example\r\ntransferableData.circular = { reference: transferableData };\r\n\r\n// Examples of data that CANNOT be transferred (will cause DataCloneError)\r\nconst nonTransferableData = {\r\n  // \u274c Functions of any kind\r\n  // regularFunction: function() { return "hello"; },\r\n  // arrowFunction: () => "hello",\r\n  // asyncFunction: async () => "hello",\r\n  // generatorFunction: function*() { yield 1; },\r\n  // \u274c DOM elements and nodes\r\n  // domElement: document.createElement(\'div\'),\r\n  // textNode: document.createTextNode(\'text\'),\r\n  // documentFragment: document.createDocumentFragment(),\r\n  // \u274c Symbols\r\n  // symbol: Symbol(\'test\'),\r\n  // symbolFor: Symbol.for(\'global\'),\r\n  // \u274c Window and other global objects\r\n  // windowObject: window,\r\n  // documentObject: document,\r\n  // \u274c Objects with non-cloneable properties\r\n  // objectWithFunction: {\r\n  //   data: "this is fine",\r\n  //   method: function() { return "this breaks cloning"; }\r\n  // },\r\n  // \u274c Promises and other async objects\r\n  // promise: Promise.resolve("value"),\r\n  // proxy: new Proxy({}, {}),\r\n  // \u274c WeakMap and WeakSet\r\n  // weakMap: new WeakMap(),\r\n  // weakSet: new WeakSet()\r\n};\r\n\r\n// Safe worker communication with error handling\r\nfunction sendToWorker(worker, data) {\r\n  try {\r\n    // Attempt to send data - this will throw if data is not cloneable\r\n    worker.postMessage(data);\r\n    console.log("Data sent successfully:", data);\r\n  } catch (error) {\r\n    if (error.name === "DataCloneError") {\r\n      console.error("Data cloning failed:", error.message);\r\n      console.error("The data contains non-cloneable objects");\r\n\r\n      // Try to send a sanitized version\r\n      const sanitizedData = sanitizeForCloning(data);\r\n      worker.postMessage(sanitizedData);\r\n    } else {\r\n      console.error("Unexpected error:", error);\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to sanitize data for cloning\r\nfunction sanitizeForCloning(data) {\r\n  return JSON.parse(\r\n    JSON.stringify(data, (key, value) => {\r\n      // Handle functions\r\n      if (typeof value === "function") {\r\n        return `[Function: ${value.name || "anonymous"}]`;\r\n      }\r\n\r\n      // Handle symbols\r\n      if (typeof value === "symbol") {\r\n        return `[Symbol: ${value.toString()}]`;\r\n      }\r\n\r\n      // Handle DOM elements\r\n      if (value instanceof Element) {\r\n        return `[Element: ${value.tagName}]`;\r\n      }\r\n\r\n      // Handle other non-cloneable types\r\n      if (value instanceof Promise) {\r\n        return "[Promise]";\r\n      }\r\n\r\n      if (value instanceof WeakMap || value instanceof WeakSet) {\r\n        return `[${value.constructor.name}]`;\r\n      }\r\n\r\n      return value;\r\n    })\r\n  );\r\n}\r\n\r\n// Example usage\r\nconst worker = new Worker("worker.js");\r\n\r\n// This will work fine\r\nsendToWorker(worker, transferableData);\r\n\r\n// This would normally fail, but our helper handles it\r\n// sendToWorker(worker, nonTransferableData);\r\n\r\n// Performance testing for large data structures\r\nfunction testCloningPerformance() {\r\n  const largeArray = new Array(100000).fill(0).map((_, i) => ({\r\n    id: i,\r\n    data: `Item ${i}`,\r\n    nested: {\r\n      value: Math.random(),\r\n      timestamp: Date.now(),\r\n    },\r\n  }));\r\n\r\n  console.time("Large data cloning");\r\n\r\n  try {\r\n    worker.postMessage({\r\n      type: "performance-test",\r\n      data: largeArray,\r\n    });\r\n    console.timeEnd("Large data cloning");\r\n  } catch (error) {\r\n    console.timeEnd("Large data cloning");\r\n    console.error("Cloning failed:", error);\r\n  }\r\n}\r\n\r\n// Run performance test\r\n// testCloningPerformance();\n'})}),"\n",(0,s.jsx)(r.h3,{id:"transferable-objects-for-performance",children:"Transferable Objects for Performance"}),"\n",(0,s.jsx)(r.p,{children:"Transferable objects provide a zero-copy mechanism for moving large binary data between threads. Instead of cloning the data (which can be expensive), ownership is transferred from one context to another. This is crucial for performance when dealing with large datasets like images, audio, or video data."}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Key benefits:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Zero-copy transfer for maximum performance"}),"\n",(0,s.jsx)(r.li,{children:"Ideal for large binary data (ArrayBuffers, ImageData, etc.)"}),"\n",(0,s.jsx)(r.li,{children:"Reduces memory usage by avoiding duplication"}),"\n",(0,s.jsx)(r.li,{children:"Essential for real-time applications with large data flows"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Important considerations:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:'Original object becomes "neutered" (unusable) after transfer'}),"\n",(0,s.jsx)(r.li,{children:"Only specific object types can be transferred"}),"\n",(0,s.jsx)(r.li,{children:"Transfer is one-way - data cannot be easily sent back"}),"\n",(0,s.jsx)(r.li,{children:"Planning data flow is crucial in transferable object architecture"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Transferable object types:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"ArrayBuffer and its views (Uint8Array, Float32Array, etc.)"}),"\n",(0,s.jsx)(r.li,{children:"MessagePort objects"}),"\n",(0,s.jsx)(r.li,{children:"ImageData objects"}),"\n",(0,s.jsx)(r.li,{children:"OffscreenCanvas (in supported browsers)"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Input:"})," ArrayBuffer or other transferable objects",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Output:"})," Zero-copy transfer with original object neutered",(0,s.jsx)(r.br,{}),"\n",(0,s.jsx)(r.strong,{children:"Performance:"})," Dramatically faster than cloning for large data"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Comprehensive example of transferable objects usage\r\n\r\n// Example 1: Basic ArrayBuffer transfer\r\nfunction demonstrateBasicTransfer() {\r\n  console.log("=== Basic ArrayBuffer Transfer ===");\r\n\r\n  // Create a large buffer (1MB) in main thread\r\n  const largeBuffer = new ArrayBuffer(1024 * 1024); // 1MB\r\n  const uint8View = new Uint8Array(largeBuffer);\r\n\r\n  // Fill buffer with some pattern data\r\n  console.log("Filling buffer with data...");\r\n  for (let i = 0; i < uint8View.length; i++) {\r\n    uint8View[i] = i % 256; // Create a repeating pattern\r\n  }\r\n\r\n  console.log(`Buffer created: ${largeBuffer.byteLength} bytes`);\r\n  console.log(`First few values: ${uint8View.slice(0, 10)}`);\r\n\r\n  // Transfer ownership to worker (zero-copy operation)\r\n  console.log("Transferring buffer to worker...");\r\n  worker.postMessage(\r\n    {\r\n      command: "processLargeData",\r\n      buffer: largeBuffer,\r\n      metadata: {\r\n        originalSize: largeBuffer.byteLength,\r\n        pattern: "incremental",\r\n        timestamp: Date.now(),\r\n      },\r\n    },\r\n    [largeBuffer] // Transferable objects list - this is the key!\r\n  );\r\n\r\n  // Note: largeBuffer is now neutered and unusable in main thread\r\n  console.log(`Buffer after transfer: ${largeBuffer.byteLength} bytes`); // 0\r\n  console.log("Buffer has been neutered - ownership transferred to worker");\r\n\r\n  // Attempting to use the buffer will now fail\r\n  try {\r\n    const failedView = new Uint8Array(largeBuffer);\r\n    console.log("This won\'t execute");\r\n  } catch (error) {\r\n    console.log("Expected error - buffer is neutered:", error.message);\r\n  }\r\n}\r\n\r\n// Example 2: Multiple buffer transfer\r\nfunction transferMultipleBuffers() {\r\n  console.log("\\n=== Multiple Buffer Transfer ===");\r\n\r\n  // Create multiple buffers for different data types\r\n  const imageData = new ArrayBuffer(1920 * 1080 * 4); // RGBA image data\r\n  const audioData = new ArrayBuffer(44100 * 2 * 4); // 1 second of stereo audio\r\n  const metaData = new ArrayBuffer(1024); // Small metadata buffer\r\n\r\n  // Fill with different patterns\r\n  new Uint8Array(imageData).fill(128); // Gray image\r\n  new Int16Array(audioData).fill(0); // Silent audio\r\n  new Uint8Array(metaData).fill(255); // Metadata\r\n\r\n  console.log(`Transferring:\r\n    - Image data: ${imageData.byteLength} bytes\r\n    - Audio data: ${audioData.byteLength} bytes  \r\n    - Meta data: ${metaData.byteLength} bytes\r\n    - Total: ${\r\n      (imageData.byteLength + audioData.byteLength + metaData.byteLength) /\r\n      1024 /\r\n      1024\r\n    } MB`);\r\n\r\n  // Transfer all buffers at once\r\n  worker.postMessage(\r\n    {\r\n      command: "processMultipleBuffers",\r\n      buffers: {\r\n        image: imageData,\r\n        audio: audioData,\r\n        meta: metaData,\r\n      },\r\n      info: {\r\n        imageFormat: "RGBA",\r\n        audioFormat: "16-bit stereo",\r\n        sampleRate: 44100,\r\n      },\r\n    },\r\n    [imageData, audioData, metaData]\r\n  ); // All buffers in transferable list\r\n\r\n  // All buffers are now neutered\r\n  console.log("All buffers transferred and neutered");\r\n}\r\n\r\n// Example 3: TypedArray transfer (transfers underlying ArrayBuffer)\r\nfunction transferTypedArrays() {\r\n  console.log("\\n=== TypedArray Transfer ===");\r\n\r\n  // Create different typed arrays\r\n  const floatData = new Float32Array(100000);\r\n  const intData = new Int32Array(50000);\r\n\r\n  // Fill with computed values\r\n  for (let i = 0; i < floatData.length; i++) {\r\n    floatData[i] = Math.sin(i * 0.01); // Sine wave\r\n  }\r\n\r\n  for (let i = 0; i < intData.length; i++) {\r\n    intData[i] = i * i; // Square numbers\r\n  }\r\n\r\n  console.log(\r\n    `Float data: ${floatData.length} elements (${floatData.buffer.byteLength} bytes)`\r\n  );\r\n  console.log(\r\n    `Int data: ${intData.length} elements (${intData.buffer.byteLength} bytes)`\r\n  );\r\n\r\n  // Transfer the underlying ArrayBuffers\r\n  worker.postMessage(\r\n    {\r\n      command: "processTypedArrays",\r\n      data: {\r\n        floats: floatData,\r\n        integers: intData,\r\n      },\r\n      info: {\r\n        floatType: "Float32Array",\r\n        intType: "Int32Array",\r\n      },\r\n    },\r\n    [floatData.buffer, intData.buffer]\r\n  ); // Transfer underlying buffers\r\n\r\n  // TypedArrays are now unusable (their buffers were transferred)\r\n  console.log(\r\n    `Float buffer after transfer: ${floatData.buffer.byteLength} bytes`\r\n  ); // 0\r\n  console.log(`Int buffer after transfer: ${intData.buffer.byteLength} bytes`); // 0\r\n}\r\n\r\n// Example 4: Error handling for non-transferable objects\r\nfunction demonstrateTransferErrors() {\r\n  console.log("\\n=== Transfer Error Handling ===");\r\n\r\n  const validBuffer = new ArrayBuffer(1024);\r\n  const invalidObject = { data: "this cannot be transferred" };\r\n\r\n  try {\r\n    // This will fail because regular objects are not transferable\r\n    worker.postMessage(\r\n      {\r\n        command: "test",\r\n        data: invalidObject,\r\n      },\r\n      [invalidObject]\r\n    ); // This will throw an error\r\n  } catch (error) {\r\n    console.error("Expected error for non-transferable object:", error.message);\r\n  }\r\n\r\n  try {\r\n    // This will work\r\n    worker.postMessage(\r\n      {\r\n        command: "test",\r\n        data: validBuffer,\r\n      },\r\n      [validBuffer]\r\n    );\r\n\r\n    console.log("Valid buffer transferred successfully");\r\n  } catch (error) {\r\n    console.error("Unexpected error:", error);\r\n  }\r\n}\r\n\r\n// Example 5: Performance comparison\r\nfunction compareTransferMethods() {\r\n  console.log("\\n=== Performance Comparison ===");\r\n\r\n  const dataSize = 10 * 1024 * 1024; // 10MB\r\n  const testData = new ArrayBuffer(dataSize);\r\n  new Uint8Array(testData).fill(42);\r\n\r\n  // Test 1: Regular cloning (will clone the data)\r\n  console.time("Regular cloning");\r\n  worker.postMessage({\r\n    command: "performanceTest",\r\n    method: "clone",\r\n    data: testData.slice(), // Create a copy to avoid neutering original\r\n  });\r\n  console.timeEnd("Regular cloning");\r\n\r\n  // Test 2: Transferable object (zero-copy)\r\n  console.time("Transferable object");\r\n  worker.postMessage(\r\n    {\r\n      command: "performanceTest",\r\n      method: "transfer",\r\n      data: testData, // This will be transferred\r\n    },\r\n    [testData]\r\n  );\r\n  console.timeEnd("Transferable object");\r\n\r\n  console.log(\r\n    "Note: Transferable objects are significantly faster for large data"\r\n  );\r\n}\r\n\r\n// Example 6: Practical image processing setup\r\nfunction setupImageProcessingTransfer() {\r\n  console.log("\\n=== Image Processing Setup ===");\r\n\r\n  // Simulate getting ImageData from a canvas\r\n  const canvas = document.createElement("canvas");\r\n  canvas.width = 1920;\r\n  canvas.height = 1080;\r\n  const ctx = canvas.getContext("2d");\r\n\r\n  // Fill with gradient for testing\r\n  const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n  gradient.addColorStop(0, "red");\r\n  gradient.addColorStop(1, "blue");\r\n  ctx.fillStyle = gradient;\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Get image data\r\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n  console.log(\r\n    `Image data: ${imageData.width}x${imageData.height}, ${imageData.data.byteLength} bytes`\r\n  );\r\n\r\n  // Transfer ImageData to worker for processing\r\n  worker.postMessage(\r\n    {\r\n      command: "processImage",\r\n      imageData: imageData,\r\n      operations: ["grayscale", "blur"],\r\n      settings: {\r\n        blurRadius: 2,\r\n        preserveAlpha: true,\r\n      },\r\n    },\r\n    [imageData.data.buffer]\r\n  ); // Transfer the underlying buffer\r\n\r\n  console.log("Image data transferred to worker for processing");\r\n}\r\n\r\n// Example usage - uncomment to run individual examples\r\nconst worker = new Worker("processing-worker.js");\r\n\r\n// demonstrateBasicTransfer();\r\n// transferMultipleBuffers();\r\n// transferTypedArrays();\r\n// demonstrateTransferErrors();\r\n// compareTransferMethods();\r\n// setupImageProcessingTransfer();\r\n\r\n// Utility function to check if an object is transferable\r\nfunction isTransferable(obj) {\r\n  const transferableTypes = [\r\n    "ArrayBuffer",\r\n    "MessagePort",\r\n    "ImageData",\r\n    "OffscreenCanvas",\r\n  ];\r\n\r\n  return transferableTypes.some((type) => {\r\n    try {\r\n      return obj instanceof globalThis[type];\r\n    } catch {\r\n      return false;\r\n    }\r\n  });\r\n}\r\n\r\n// Helper to safely transfer objects\r\nfunction safeTransfer(worker, data, transferables = []) {\r\n  // Validate transferable objects\r\n  const validTransferables = transferables.filter((obj) => {\r\n    if (isTransferable(obj)) {\r\n      return true;\r\n    } else {\r\n      console.warn("Non-transferable object found:", obj);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  try {\r\n    worker.postMessage(data, validTransferables);\r\n    console.log(\r\n      `Transferred ${validTransferables.length} objects successfully`\r\n    );\r\n  } catch (error) {\r\n    console.error("Transfer failed:", error);\r\n    // Fallback to regular cloning\r\n    worker.postMessage(data);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"advanced-message-handler",children:"Advanced Message Handler"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'class WorkerMessageHandler {\r\n  constructor(worker) {\r\n    this.worker = worker;\r\n    this.messageQueue = [];\r\n    this.isProcessing = false;\r\n    this.responseTimeout = 30000; // 30 seconds\r\n    this.setupMessageHandling();\r\n  }\r\n\r\n  setupMessageHandling() {\r\n    this.worker.onmessage = (event) => {\r\n      this.handleMessage(event.data);\r\n    };\r\n  }\r\n\r\n  async sendMessage(message, transferable = []) {\r\n    return new Promise((resolve, reject) => {\r\n      const messageId = this.generateMessageId();\r\n      const timeoutId = setTimeout(() => {\r\n        reject(new Error("Message timeout"));\r\n      }, this.responseTimeout);\r\n\r\n      const messageData = {\r\n        id: messageId,\r\n        payload: message,\r\n        timestamp: Date.now(),\r\n        resolve: (result) => {\r\n          clearTimeout(timeoutId);\r\n          resolve(result);\r\n        },\r\n        reject: (error) => {\r\n          clearTimeout(timeoutId);\r\n          reject(error);\r\n        },\r\n      };\r\n\r\n      this.messageQueue.push(messageData);\r\n\r\n      this.worker.postMessage(\r\n        {\r\n          id: messageId,\r\n          payload: message,\r\n          timestamp: Date.now(),\r\n        },\r\n        transferable\r\n      );\r\n    });\r\n  }\r\n\r\n  handleMessage(data) {\r\n    const { id, result, error } = data;\r\n    const message = this.messageQueue.find((msg) => msg.id === id);\r\n\r\n    if (message) {\r\n      this.messageQueue = this.messageQueue.filter((msg) => msg.id !== id);\r\n\r\n      if (error) {\r\n        message.reject(new Error(error));\r\n      } else {\r\n        message.resolve(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  generateMessageId() {\r\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  getQueueLength() {\r\n    return this.messageQueue.length;\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"worker-lifecycle-management",children:"Worker Lifecycle Management"}),"\n",(0,s.jsx)(r.h3,{id:"worker-pool-implementation",children:"Worker Pool Implementation"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:"class WorkerPool {\r\n  constructor(workerScript, poolSize = navigator.hardwareConcurrency || 4) {\r\n    this.workerScript = workerScript;\r\n    this.poolSize = poolSize;\r\n    this.workers = [];\r\n    this.availableWorkers = [];\r\n    this.taskQueue = [];\r\n    this.activeTasksCount = 0;\r\n\r\n    this.initializePool();\r\n  }\r\n\r\n  initializePool() {\r\n    for (let i = 0; i < this.poolSize; i++) {\r\n      const worker = new Worker(this.workerScript);\r\n      const workerWrapper = {\r\n        id: i,\r\n        worker: worker,\r\n        busy: false,\r\n        currentTask: null,\r\n      };\r\n\r\n      worker.onmessage = (event) => {\r\n        this.handleWorkerMessage(workerWrapper, event);\r\n      };\r\n\r\n      worker.onerror = (error) => {\r\n        this.handleWorkerError(workerWrapper, error);\r\n      };\r\n\r\n      this.workers.push(workerWrapper);\r\n      this.availableWorkers.push(workerWrapper);\r\n    }\r\n  }\r\n\r\n  async execute(task, transferable = []) {\r\n    return new Promise((resolve, reject) => {\r\n      const taskData = {\r\n        id: this.generateTaskId(),\r\n        task,\r\n        transferable,\r\n        resolve,\r\n        reject,\r\n        createdAt: Date.now(),\r\n      };\r\n\r\n      if (this.availableWorkers.length > 0) {\r\n        this.assignTaskToWorker(taskData);\r\n      } else {\r\n        this.taskQueue.push(taskData);\r\n      }\r\n    });\r\n  }\r\n\r\n  assignTaskToWorker(taskData) {\r\n    const workerWrapper = this.availableWorkers.shift();\r\n    workerWrapper.busy = true;\r\n    workerWrapper.currentTask = taskData;\r\n    this.activeTasksCount++;\r\n\r\n    workerWrapper.worker.postMessage(\r\n      {\r\n        taskId: taskData.id,\r\n        ...taskData.task,\r\n      },\r\n      taskData.transferable\r\n    );\r\n  }\r\n\r\n  handleWorkerMessage(workerWrapper, event) {\r\n    const { taskId, result, error } = event.data;\r\n    const task = workerWrapper.currentTask;\r\n\r\n    if (task && task.id === taskId) {\r\n      workerWrapper.busy = false;\r\n      workerWrapper.currentTask = null;\r\n      this.activeTasksCount--;\r\n      this.availableWorkers.push(workerWrapper);\r\n\r\n      if (error) {\r\n        task.reject(new Error(error));\r\n      } else {\r\n        task.resolve(result);\r\n      }\r\n\r\n      // Process next task in queue\r\n      if (this.taskQueue.length > 0) {\r\n        const nextTask = this.taskQueue.shift();\r\n        this.assignTaskToWorker(nextTask);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleWorkerError(workerWrapper, error) {\r\n    console.error(`Worker ${workerWrapper.id} error:`, error);\r\n\r\n    if (workerWrapper.currentTask) {\r\n      workerWrapper.currentTask.reject(error);\r\n    }\r\n\r\n    // Restart the worker\r\n    this.restartWorker(workerWrapper);\r\n  }\r\n\r\n  restartWorker(workerWrapper) {\r\n    workerWrapper.worker.terminate();\r\n\r\n    const newWorker = new Worker(this.workerScript);\r\n    workerWrapper.worker = newWorker;\r\n    workerWrapper.busy = false;\r\n    workerWrapper.currentTask = null;\r\n\r\n    newWorker.onmessage = (event) => {\r\n      this.handleWorkerMessage(workerWrapper, event);\r\n    };\r\n\r\n    newWorker.onerror = (error) => {\r\n      this.handleWorkerError(workerWrapper, error);\r\n    };\r\n  }\r\n\r\n  generateTaskId() {\r\n    return `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  getStats() {\r\n    return {\r\n      poolSize: this.poolSize,\r\n      activeWorkers: this.workers.filter((w) => w.busy).length,\r\n      availableWorkers: this.availableWorkers.length,\r\n      queuedTasks: this.taskQueue.length,\r\n      activeTasks: this.activeTasksCount,\r\n    };\r\n  }\r\n\r\n  terminate() {\r\n    this.workers.forEach((workerWrapper) => {\r\n      workerWrapper.worker.terminate();\r\n    });\r\n\r\n    this.workers = [];\r\n    this.availableWorkers = [];\r\n    this.taskQueue = [];\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(r.h3,{id:"fibonacci-calculation-example",children:"Fibonacci Calculation Example"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Optimized worker for mathematical calculations\r\n// fibonacci-worker.js\r\nconst fibonacciCache = new Map();\r\n\r\nself.onmessage = function (event) {\r\n  const { taskId, command, data } = event.data;\r\n\r\n  try {\r\n    let result;\r\n\r\n    switch (command) {\r\n      case "fibonacci":\r\n        result = calculateFibonacci(data.n);\r\n        break;\r\n      case "fibonacciSequence":\r\n        result = calculateFibonacciSequence(data.start, data.end);\r\n        break;\r\n      case "clearCache":\r\n        fibonacciCache.clear();\r\n        result = "Cache cleared";\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown command: ${command}`);\r\n    }\r\n\r\n    self.postMessage({ taskId, result });\r\n  } catch (error) {\r\n    self.postMessage({ taskId, error: error.message });\r\n  }\r\n};\r\n\r\nfunction calculateFibonacci(n) {\r\n  if (n < 0) throw new Error("Negative numbers not supported");\r\n  if (n <= 1) return n;\r\n\r\n  if (fibonacciCache.has(n)) {\r\n    return fibonacciCache.get(n);\r\n  }\r\n\r\n  let a = 0,\r\n    b = 1;\r\n  for (let i = 2; i <= n; i++) {\r\n    [a, b] = [b, a + b];\r\n  }\r\n\r\n  fibonacciCache.set(n, b);\r\n  return b;\r\n}\r\n\r\nfunction calculateFibonacciSequence(start, end) {\r\n  const sequence = [];\r\n  for (let i = start; i <= end; i++) {\r\n    sequence.push(calculateFibonacci(i));\r\n  }\r\n  return sequence;\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"usage-with-performance-monitoring",children:"Usage with Performance Monitoring"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'class FibonacciCalculator {\r\n  constructor() {\r\n    this.workerPool = new WorkerPool("fibonacci-worker.js", 2);\r\n  }\r\n\r\n  async calculateFibonacci(n) {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      const result = await this.workerPool.execute({\r\n        command: "fibonacci",\r\n        data: { n },\r\n      });\r\n\r\n      const endTime = performance.now();\r\n      console.log(\r\n        `Fibonacci(${n}) = ${result} (took ${endTime - startTime}ms)`\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error("Fibonacci calculation failed:", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async calculateSequence(start, end) {\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      const result = await this.workerPool.execute({\r\n        command: "fibonacciSequence",\r\n        data: { start, end },\r\n      });\r\n\r\n      const endTime = performance.now();\r\n      console.log(\r\n        `Fibonacci sequence [${start}-${end}] calculated in ${\r\n          endTime - startTime\r\n        }ms`\r\n      );\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error("Fibonacci sequence calculation failed:", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Usage\r\nconst calculator = new FibonacciCalculator();\r\n\r\n// Calculate individual Fibonacci numbers\r\ncalculator.calculateFibonacci(40).then(console.log);\r\n\r\n// Calculate sequence\r\ncalculator.calculateSequence(10, 20).then(console.log);\n'})}),"\n",(0,s.jsx)(r.h2,{id:"real-world-implementation-examples",children:"Real-World Implementation Examples"}),"\n",(0,s.jsx)(r.h3,{id:"image-processing-worker",children:"Image Processing Worker"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// image-processor-worker.js\r\nself.onmessage = function (event) {\r\n  const { taskId, command, imageData, options } = event.data;\r\n\r\n  try {\r\n    let result;\r\n\r\n    switch (command) {\r\n      case "grayscale":\r\n        result = applyGrayscale(imageData);\r\n        break;\r\n      case "blur":\r\n        result = applyBlur(imageData, options.radius || 1);\r\n        break;\r\n      case "brightness":\r\n        result = adjustBrightness(imageData, options.factor || 1);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown command: ${command}`);\r\n    }\r\n\r\n    self.postMessage({ taskId, result }, [result.data.buffer]);\r\n  } catch (error) {\r\n    self.postMessage({ taskId, error: error.message });\r\n  }\r\n};\r\n\r\nfunction applyGrayscale(imageData) {\r\n  const data = new Uint8ClampedArray(imageData.data);\r\n\r\n  for (let i = 0; i < data.length; i += 4) {\r\n    const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];\r\n    data[i] = gray; // Red\r\n    data[i + 1] = gray; // Green\r\n    data[i + 2] = gray; // Blue\r\n    // Alpha channel (data[i + 3]) remains unchanged\r\n  }\r\n\r\n  return new ImageData(data, imageData.width, imageData.height);\r\n}\r\n\r\nfunction applyBlur(imageData, radius) {\r\n  const data = new Uint8ClampedArray(imageData.data);\r\n  const width = imageData.width;\r\n  const height = imageData.height;\r\n  const output = new Uint8ClampedArray(data.length);\r\n\r\n  // Simple box blur implementation\r\n  for (let y = 0; y < height; y++) {\r\n    for (let x = 0; x < width; x++) {\r\n      let r = 0,\r\n        g = 0,\r\n        b = 0,\r\n        a = 0,\r\n        count = 0;\r\n\r\n      for (let dy = -radius; dy <= radius; dy++) {\r\n        for (let dx = -radius; dx <= radius; dx++) {\r\n          const ny = y + dy;\r\n          const nx = x + dx;\r\n\r\n          if (ny >= 0 && ny < height && nx >= 0 && nx < width) {\r\n            const idx = (ny * width + nx) * 4;\r\n            r += data[idx];\r\n            g += data[idx + 1];\r\n            b += data[idx + 2];\r\n            a += data[idx + 3];\r\n            count++;\r\n          }\r\n        }\r\n      }\r\n\r\n      const idx = (y * width + x) * 4;\r\n      output[idx] = r / count;\r\n      output[idx + 1] = g / count;\r\n      output[idx + 2] = b / count;\r\n      output[idx + 3] = a / count;\r\n    }\r\n  }\r\n\r\n  return new ImageData(output, width, height);\r\n}\r\n\r\nfunction adjustBrightness(imageData, factor) {\r\n  const data = new Uint8ClampedArray(imageData.data);\r\n\r\n  for (let i = 0; i < data.length; i += 4) {\r\n    data[i] = Math.min(255, data[i] * factor); // Red\r\n    data[i + 1] = Math.min(255, data[i + 1] * factor); // Green\r\n    data[i + 2] = Math.min(255, data[i + 2] * factor); // Blue\r\n    // Alpha channel remains unchanged\r\n  }\r\n\r\n  return new ImageData(data, imageData.width, imageData.height);\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"error-handling-and-debugging",children:"Error Handling and Debugging"}),"\n",(0,s.jsx)(r.h3,{id:"comprehensive-error-handling",children:"Comprehensive Error Handling"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'class RobustWorkerManager {\r\n  constructor(workerScript) {\r\n    this.workerScript = workerScript;\r\n    this.worker = null;\r\n    this.isTerminated = false;\r\n    this.retryCount = 0;\r\n    this.maxRetries = 3;\r\n    this.retryDelay = 1000;\r\n\r\n    this.initializeWorker();\r\n  }\r\n\r\n  initializeWorker() {\r\n    try {\r\n      this.worker = new Worker(this.workerScript);\r\n      this.setupEventHandlers();\r\n      this.retryCount = 0;\r\n    } catch (error) {\r\n      console.error("Failed to create worker:", error);\r\n      this.handleWorkerCreationError(error);\r\n    }\r\n  }\r\n\r\n  setupEventHandlers() {\r\n    this.worker.onmessage = (event) => {\r\n      this.handleMessage(event);\r\n    };\r\n\r\n    this.worker.onerror = (error) => {\r\n      console.error("Worker runtime error:", error);\r\n      this.handleWorkerError(error);\r\n    };\r\n\r\n    this.worker.onmessageerror = (event) => {\r\n      console.error("Worker message error:", event);\r\n      this.handleMessageError(event);\r\n    };\r\n  }\r\n\r\n  handleWorkerCreationError(error) {\r\n    if (this.retryCount < this.maxRetries) {\r\n      this.retryCount++;\r\n      console.log(\r\n        `Retrying worker creation (${this.retryCount}/${this.maxRetries})`\r\n      );\r\n\r\n      setTimeout(() => {\r\n        this.initializeWorker();\r\n      }, this.retryDelay * this.retryCount);\r\n    } else {\r\n      console.error("Max retries reached. Worker creation failed permanently.");\r\n    }\r\n  }\r\n\r\n  handleWorkerError(error) {\r\n    console.error("Worker error occurred:", {\r\n      message: error.message,\r\n      filename: error.filename,\r\n      lineno: error.lineno,\r\n      colno: error.colno,\r\n    });\r\n\r\n    // Attempt to restart worker\r\n    this.restartWorker();\r\n  }\r\n\r\n  handleMessageError(event) {\r\n    console.error("Message serialization error:", event);\r\n    // Handle cases where message couldn\'t be cloned\r\n  }\r\n\r\n  restartWorker() {\r\n    if (!this.isTerminated && this.retryCount < this.maxRetries) {\r\n      console.log("Restarting worker...");\r\n      this.terminate();\r\n      this.initializeWorker();\r\n    }\r\n  }\r\n\r\n  terminate() {\r\n    if (this.worker) {\r\n      this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n    this.isTerminated = true;\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"best-practices-and-limitations",children:"Best Practices and Limitations"}),"\n",(0,s.jsx)(r.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// \u2705 Good: Minimize data transfer\r\nclass EfficientWorkerManager {\r\n  constructor() {\r\n    this.worker = new Worker("worker.js");\r\n    this.cache = new Map();\r\n  }\r\n\r\n  async processLargeDataset(data) {\r\n    // Send only necessary data\r\n    const essentialData = data.map((item) => ({\r\n      id: item.id,\r\n      value: item.computeValue,\r\n    }));\r\n\r\n    return await this.sendMessage({\r\n      command: "process",\r\n      data: essentialData,\r\n    });\r\n  }\r\n\r\n  // \u2705 Good: Reuse workers\r\n  async batchProcess(tasks) {\r\n    const results = [];\r\n\r\n    for (const task of tasks) {\r\n      results.push(await this.processTask(task));\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n\r\n// \u274c Bad: Creating new workers for each task\r\nclass InefficientWorkerManager {\r\n  async processTask(data) {\r\n    const worker = new Worker("worker.js"); // Don\'t do this\r\n\r\n    return new Promise((resolve) => {\r\n      worker.postMessage(data);\r\n      worker.onmessage = (event) => {\r\n        resolve(event.data);\r\n        worker.terminate(); // Wasteful\r\n      };\r\n    });\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"limitations-and-considerations",children:"Limitations and Considerations"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-javascript",children:'// Worker limitations demonstration\r\n// worker-limitations.js\r\n\r\n// \u274c These will cause errors in workers:\r\ntry {\r\n  // DOM access not allowed\r\n  document.getElementById("test");\r\n} catch (error) {\r\n  console.error("DOM access failed:", error.message);\r\n}\r\n\r\ntry {\r\n  // Window object not available\r\n  window.alert("Hello");\r\n} catch (error) {\r\n  console.error("Window access failed:", error.message);\r\n}\r\n\r\ntry {\r\n  // Parent object not available\r\n  parent.postMessage("test");\r\n} catch (error) {\r\n  console.error("Parent access failed:", error.message);\r\n}\r\n\r\n// \u2705 These work in workers:\r\nconsole.log("Console works");\r\nsetTimeout(() => console.log("Timers work"), 1000);\r\nfetch("/api/data").then((response) => console.log("Fetch works"));\r\n\r\n// Import external scripts\r\nimportScripts("/lib/utility.js");\r\n\r\n// Use Web APIs available to workers\r\nconst db = indexedDB.open("WorkerDB");\r\nconst cache = caches.open("worker-cache");\n'})}),"\n",(0,s.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(r.p,{children:"Web Workers provide a powerful mechanism for achieving true parallelism in web applications, enabling developers to perform intensive computations without blocking the main thread. By understanding their threading model, message passing mechanisms, and best practices, developers can create responsive applications that effectively utilize modern multi-core processors."}),"\n",(0,s.jsx)(r.h3,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Threading Model"}),": Web Workers run in isolated contexts with their own global scope, providing true parallel execution."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Message Passing"}),": The structured clone algorithm enables efficient data transfer, while transferable objects provide zero-copy transfers for large data."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Worker Types"}),": Dedicated workers serve single scripts, while shared workers enable cross-context communication."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Performance"}),": Proper worker pool management and data transfer optimization are crucial for performance."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Limitations"}),": Workers cannot access DOM or window objects, requiring careful architecture planning."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"when-to-use-web-workers",children:"When to Use Web Workers"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"CPU-intensive calculations that would block the UI"}),"\n",(0,s.jsx)(r.li,{children:"Data processing tasks that can run independently"}),"\n",(0,s.jsx)(r.li,{children:"Background data synchronization"}),"\n",(0,s.jsx)(r.li,{children:"Image/video processing"}),"\n",(0,s.jsx)(r.li,{children:"Cryptographic operations"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Web Workers represent a fundamental shift toward multi-threaded web applications, enabling developers to build more responsive and capable web experiences. As outlined in the ",(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",children:"MDN documentation"}),", proper implementation of Web Workers can significantly improve application performance and user experience."]}),"\n",(0,s.jsx)(r.h3,{id:"further-resources",children:"Further Resources"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",children:"MDN Web Workers API Documentation"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://html.spec.whatwg.org/multipage/workers.html",children:"HTML Living Standard - Web Workers"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://caniuse.com/webworkers",children:"Can I Use - Web Workers"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://worker-playground.glitch.me/",children:"Worker Playground - Test Worker APIs"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>i});var t=n(6540);const s={},a=t.createContext(s);function o(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);